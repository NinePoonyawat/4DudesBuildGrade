
EmbedFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b958  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800baf8  0800baf8  0001baf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be10  0800be10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800be10  0800be10  0001be10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be18  0800be18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be18  0800be18  0001be18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be1c  0800be1c  0001be1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800be20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000076f0  20000078  0800be98  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007768  0800be98  00027768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e53c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b90  00000000  00000000  0003e5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00042178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c8  00000000  00000000  00043a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018146  00000000  00000000  00045248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0f2  00000000  00000000  0005d38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aebb  00000000  00000000  00079480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011433b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000709c  00000000  00000000  0011438c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bae0 	.word	0x0800bae0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800bae0 	.word	0x0800bae0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <GetIsFingerOnScreen>:
	MAX30102_STATE_COLLECT_NEXT_PORTION
} MAX30102_STATE;

MAX30102_STATE StateMachine;

uint8_t GetIsFingerOnScreen() {
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	return IsFingerOnScreen;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <GetIsFingerOnScreen+0x14>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	20001364 	.word	0x20001364

08000bc8 <UART2_GetState>:

int32_t UART2_GetState() {
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

	switch (StateMachine) {
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <UART2_GetState+0x40>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d813      	bhi.n	8000bfc <UART2_GetState+0x34>
 8000bd4:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <UART2_GetState+0x14>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000bf1 	.word	0x08000bf1
 8000be4:	08000bf5 	.word	0x08000bf5
 8000be8:	08000bf9 	.word	0x08000bf9
	case MAX30102_STATE_BEGIN:
		return 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	e005      	b.n	8000bfc <UART2_GetState+0x34>
	case MAX30102_STATE_CALIBRATE:
		return 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e003      	b.n	8000bfc <UART2_GetState+0x34>
	case MAX30102_STATE_CALCULATE_HR:
		return 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e001      	b.n	8000bfc <UART2_GetState+0x34>
	case MAX30102_STATE_COLLECT_NEXT_PORTION:
		return 3;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	e7ff      	b.n	8000bfc <UART2_GetState+0x34>
	}

}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20001375 	.word	0x20001375

08000c0c <Max30102_WriteReg>:

MAX30102_STATUS Max30102_WriteReg(uint8_t uch_addr, uint8_t uch_data) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	4603      	mov	r3, r0
 8000c14:	460a      	mov	r2, r1
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	71bb      	strb	r3, [r7, #6]
	if (HAL_I2C_Mem_Write(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1,
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <Max30102_WriteReg+0x40>)
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	2301      	movs	r3, #1
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2301      	movs	r3, #1
 8000c32:	21ae      	movs	r1, #174	; 0xae
 8000c34:	f003 fa22 	bl	800407c <HAL_I2C_Mem_Write>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <Max30102_WriteReg+0x36>
			&uch_data, 1, I2C_TIMEOUT) == HAL_OK)
		return MAX30102_OK;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <Max30102_WriteReg+0x38>
	return MAX30102_ERROR;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000094 	.word	0x20000094

08000c50 <Max30102_ReadReg>:

MAX30102_STATUS Max30102_ReadReg(uint8_t uch_addr, uint8_t *puch_data) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af04      	add	r7, sp, #16
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
	if (HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, uch_addr, 1, puch_data,
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <Max30102_ReadReg+0x3c>)
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	2301      	movs	r3, #1
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2301      	movs	r3, #1
 8000c72:	21ae      	movs	r1, #174	; 0xae
 8000c74:	f003 fafc 	bl	8004270 <HAL_I2C_Mem_Read>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <Max30102_ReadReg+0x32>
			1, I2C_TIMEOUT) == HAL_OK)
		return MAX30102_OK;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <Max30102_ReadReg+0x34>
	return MAX30102_ERROR;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000094 	.word	0x20000094

08000c90 <Max30102_WriteRegisterBit>:

MAX30102_STATUS Max30102_WriteRegisterBit(uint8_t Register, uint8_t Bit,
		uint8_t Value) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(Register, &tmp))
 8000ca2:	f107 020f 	add.w	r2, r7, #15
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ffd0 	bl	8000c50 <Max30102_ReadReg>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d001      	beq.n	8000cba <Max30102_WriteRegisterBit+0x2a>
		return MAX30102_ERROR;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e025      	b.n	8000d06 <Max30102_WriteRegisterBit+0x76>
	tmp &= ~(1 << Bit);
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	b25a      	sxtb	r2, r3
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	4013      	ands	r3, r2
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x01) << Bit;
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	f003 0201 	and.w	r2, r3, #1
 8000cda:	79bb      	ldrb	r3, [r7, #6]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	b25a      	sxtb	r2, r3
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(Register, tmp))
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff89 	bl	8000c0c <Max30102_WriteReg>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d001      	beq.n	8000d04 <Max30102_WriteRegisterBit+0x74>
		return MAX30102_ERROR;
 8000d00:	2300      	movs	r3, #0
 8000d02:	e000      	b.n	8000d06 <Max30102_WriteRegisterBit+0x76>

	return MAX30102_OK;
 8000d04:	2301      	movs	r3, #1
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <Max30102_ReadFifo>:

MAX30102_STATUS Max30102_ReadFifo(volatile uint32_t *pun_red_led,
		volatile uint32_t *pun_ir_led) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af04      	add	r7, sp, #16
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	uint32_t un_temp;
	*pun_red_led = 0;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
	*pun_ir_led = 0;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
	uint8_t ach_i2c_data[6];

	if (HAL_I2C_Mem_Read(i2c_max30102, MAX30102_ADDRESS, REG_FIFO_DATA, 1,
 8000d26:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <Max30102_ReadFifo+0xd8>)
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	2306      	movs	r3, #6
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	21ae      	movs	r1, #174	; 0xae
 8000d3e:	f003 fa97 	bl	8004270 <HAL_I2C_Mem_Read>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <Max30102_ReadFifo+0x3c>
			ach_i2c_data, 6, I2C_TIMEOUT) != HAL_OK) {
		return MAX30102_ERROR;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e048      	b.n	8000dde <Max30102_ReadFifo+0xce>
	}
	un_temp = (unsigned char) ach_i2c_data[0];
 8000d4c:	7b3b      	ldrb	r3, [r7, #12]
 8000d4e:	617b      	str	r3, [r7, #20]
	un_temp <<= 16;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	041b      	lsls	r3, r3, #16
 8000d54:	617b      	str	r3, [r7, #20]
	*pun_red_led += un_temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	441a      	add	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	601a      	str	r2, [r3, #0]
	un_temp = (unsigned char) ach_i2c_data[1];
 8000d62:	7b7b      	ldrb	r3, [r7, #13]
 8000d64:	617b      	str	r3, [r7, #20]
	un_temp <<= 8;
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	617b      	str	r3, [r7, #20]
	*pun_red_led += un_temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	441a      	add	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	601a      	str	r2, [r3, #0]
	un_temp = (unsigned char) ach_i2c_data[2];
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	617b      	str	r3, [r7, #20]
	*pun_red_led += un_temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	441a      	add	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	601a      	str	r2, [r3, #0]

	un_temp = (unsigned char) ach_i2c_data[3];
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	617b      	str	r3, [r7, #20]
	un_temp <<= 16;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	041b      	lsls	r3, r3, #16
 8000d90:	617b      	str	r3, [r7, #20]
	*pun_ir_led += un_temp;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	441a      	add	r2, r3
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	601a      	str	r2, [r3, #0]
	un_temp = (unsigned char) ach_i2c_data[4];
 8000d9e:	7c3b      	ldrb	r3, [r7, #16]
 8000da0:	617b      	str	r3, [r7, #20]
	un_temp <<= 8;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	617b      	str	r3, [r7, #20]
	*pun_ir_led += un_temp;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	441a      	add	r2, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	601a      	str	r2, [r3, #0]
	un_temp = (unsigned char) ach_i2c_data[5];
 8000db4:	7c7b      	ldrb	r3, [r7, #17]
 8000db6:	617b      	str	r3, [r7, #20]
	*pun_ir_led += un_temp;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	441a      	add	r2, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	601a      	str	r2, [r3, #0]
	*pun_red_led &= 0x03FFFF;  //Mask MSB [23:18]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	601a      	str	r2, [r3, #0]
	*pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	601a      	str	r2, [r3, #0]

	return MAX30102_OK;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000094 	.word	0x20000094

08000dec <Max30102_SetIntAlmostFullEnabled>:

//
//	Interrupts
//
MAX30102_STATUS Max30102_SetIntAlmostFullEnabled(uint8_t Enable) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_A_FULL_BIT, Enable);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	2107      	movs	r1, #7
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f7ff ff47 	bl	8000c90 <Max30102_WriteRegisterBit>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <Max30102_SetIntFifoDataReadyEnabled>:

MAX30102_STATUS Max30102_SetIntFifoDataReadyEnabled(uint8_t Enable) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_1, INT_PPG_RDY_BIT, Enable);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	2106      	movs	r1, #6
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff ff37 	bl	8000c90 <Max30102_WriteRegisterBit>
 8000e22:	4603      	mov	r3, r0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <Max30102_ReadInterruptStatus>:
{

	return Max30102_WriteRegisterBit(REG_INTR_ENABLE_2, INT_DIE_TEMP_RDY_BIT, Enable);
}
#endif
MAX30102_STATUS Max30102_ReadInterruptStatus(uint8_t *Status) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	*Status = 0;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]

	if (MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_1, &tmp))
 8000e3a:	f107 030f 	add.w	r3, r7, #15
 8000e3e:	4619      	mov	r1, r3
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff ff05 	bl	8000c50 <Max30102_ReadReg>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d001      	beq.n	8000e50 <Max30102_ReadInterruptStatus+0x24>
		return MAX30102_ERROR;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e00d      	b.n	8000e6c <Max30102_ReadInterruptStatus+0x40>
	*Status |= tmp & 0xE1; // 3 highest bits
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	f023 031e 	bic.w	r3, r3, #30
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	701a      	strb	r2, [r3, #0]
#ifdef MAX30102_USE_INTERNAL_TEMPERATURE
	if(MAX30102_OK != Max30102_ReadReg(REG_INTR_STATUS_2, &tmp))
		return MAX30102_ERROR;
	*Status |= tmp & 0x02;
#endif
	return MAX30102_OK;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <Max30102_InterruptCallback>:

void Max30102_InterruptCallback(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	uint8_t Status;
	while (MAX30102_OK != Max30102_ReadInterruptStatus(&Status))
 8000e7a:	bf00      	nop
 8000e7c:	1dbb      	adds	r3, r7, #6
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffd4 	bl	8000e2c <Max30102_ReadInterruptStatus>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d1f8      	bne.n	8000e7c <Max30102_InterruptCallback+0x8>
		;

	// Almost Full FIFO Interrupt handle
	if (Status & (1 << INT_A_FULL_BIT)) {
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da4a      	bge.n	8000f28 <Max30102_InterruptCallback+0xb4>
		for (uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	e044      	b.n	8000f22 <Max30102_InterruptCallback+0xae>
			while (MAX30102_OK
 8000e98:	bf00      	nop
					!= Max30102_ReadFifo((RedBuffer + BufferHead),
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4a48      	ldr	r2, [pc, #288]	; (8000fc4 <Max30102_InterruptCallback+0x150>)
 8000ea2:	441a      	add	r2, r3
							(IrBuffer + BufferHead)))
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	009b      	lsls	r3, r3, #2
					!= Max30102_ReadFifo((RedBuffer + BufferHead),
 8000eaa:	4947      	ldr	r1, [pc, #284]	; (8000fc8 <Max30102_InterruptCallback+0x154>)
 8000eac:	440b      	add	r3, r1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	f7ff ff2d 	bl	8000d10 <Max30102_ReadFifo>
 8000eb6:	4603      	mov	r3, r0
			while (MAX30102_OK
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d1ee      	bne.n	8000e9a <Max30102_InterruptCallback+0x26>
				;
			if (IsFingerOnScreen) {
 8000ebc:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <Max30102_InterruptCallback+0x158>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00c      	beq.n	8000ee0 <Max30102_InterruptCallback+0x6c>
				if (IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR)
 8000ec6:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <Max30102_InterruptCallback+0x154>)
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d80e      	bhi.n	8000ef6 <Max30102_InterruptCallback+0x82>
					IsFingerOnScreen = 0;
 8000ed8:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <Max30102_InterruptCallback+0x158>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e00a      	b.n	8000ef6 <Max30102_InterruptCallback+0x82>
			} else {
				if (IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR)
 8000ee0:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a38      	ldr	r2, [pc, #224]	; (8000fc8 <Max30102_InterruptCallback+0x154>)
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000eee:	d902      	bls.n	8000ef6 <Max30102_InterruptCallback+0x82>
					IsFingerOnScreen = 1;
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <Max30102_InterruptCallback+0x158>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
			}
			BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8000ef6:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <Max30102_InterruptCallback+0x15c>)
 8000efe:	fba3 1302 	umull	r1, r3, r3, r2
 8000f02:	099b      	lsrs	r3, r3, #6
 8000f04:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000f08:	fb01 f303 	mul.w	r3, r1, r3
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	4a2c      	ldr	r2, [pc, #176]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000f10:	6013      	str	r3, [r2, #0]
			CollectedSamples++;
 8000f12:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <Max30102_InterruptCallback+0x160>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a2e      	ldr	r2, [pc, #184]	; (8000fd4 <Max30102_InterruptCallback+0x160>)
 8000f1a:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < MAX30102_FIFO_ALMOST_FULL_SAMPLES; i++) {
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b10      	cmp	r3, #16
 8000f26:	d9b7      	bls.n	8000e98 <Max30102_InterruptCallback+0x24>
		}
	}

	// New FIFO Data Ready Interrupt handle
	if (Status & (1 << INT_PPG_RDY_BIT)) {
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d041      	beq.n	8000fb6 <Max30102_InterruptCallback+0x142>
		while (MAX30102_OK
 8000f32:	bf00      	nop
				!= Max30102_ReadFifo((RedBuffer + BufferHead),
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <Max30102_InterruptCallback+0x150>)
 8000f3c:	441a      	add	r2, r3
						(IrBuffer + BufferHead)))
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	009b      	lsls	r3, r3, #2
				!= Max30102_ReadFifo((RedBuffer + BufferHead),
 8000f44:	4920      	ldr	r1, [pc, #128]	; (8000fc8 <Max30102_InterruptCallback+0x154>)
 8000f46:	440b      	add	r3, r1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	f7ff fee0 	bl	8000d10 <Max30102_ReadFifo>
 8000f50:	4603      	mov	r3, r0
		while (MAX30102_OK
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d1ee      	bne.n	8000f34 <Max30102_InterruptCallback+0xc0>
			;
		if (IsFingerOnScreen) {
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <Max30102_InterruptCallback+0x158>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00c      	beq.n	8000f7a <Max30102_InterruptCallback+0x106>
			if (IrBuffer[BufferHead] < MAX30102_IR_VALUE_FINGER_OUT_SENSOR)
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <Max30102_InterruptCallback+0x154>)
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d80e      	bhi.n	8000f90 <Max30102_InterruptCallback+0x11c>
				IsFingerOnScreen = 0;
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <Max30102_InterruptCallback+0x158>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e00a      	b.n	8000f90 <Max30102_InterruptCallback+0x11c>
		} else {
			if (IrBuffer[BufferHead] > MAX30102_IR_VALUE_FINGER_ON_SENSOR)
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <Max30102_InterruptCallback+0x154>)
 8000f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000f88:	d902      	bls.n	8000f90 <Max30102_InterruptCallback+0x11c>
				IsFingerOnScreen = 1;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <Max30102_InterruptCallback+0x158>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
		}
		BufferHead = (BufferHead + 1) % MAX30102_BUFFER_LENGTH;
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <Max30102_InterruptCallback+0x15c>)
 8000f98:	fba3 1302 	umull	r1, r3, r3, r2
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000fa2:	fb01 f303 	mul.w	r3, r1, r3
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <Max30102_InterruptCallback+0x14c>)
 8000faa:	6013      	str	r3, [r2, #0]
		CollectedSamples++;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <Max30102_InterruptCallback+0x160>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <Max30102_InterruptCallback+0x160>)
 8000fb4:	6013      	str	r3, [r2, #0]
	if(Status & (1<<INT_DIE_TEMP_RDY_BIT))
	{

	}
#endif
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20001358 	.word	0x20001358
 8000fc4:	200009f8 	.word	0x200009f8
 8000fc8:	20000098 	.word	0x20000098
 8000fcc:	20001364 	.word	0x20001364
 8000fd0:	1b4e81b5 	.word	0x1b4e81b5
 8000fd4:	20001360 	.word	0x20001360

08000fd8 <Max30102_FifoWritePointer>:

//
//	FIFO Configuration
//
MAX30102_STATUS Max30102_FifoWritePointer(uint8_t Address) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_FIFO_WR_PTR, (Address & 0x1F))) //FIFO_WR_PTR[4:0]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	2004      	movs	r0, #4
 8000fee:	f7ff fe0d 	bl	8000c0c <Max30102_WriteReg>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d001      	beq.n	8000ffc <Max30102_FifoWritePointer+0x24>
		return MAX30102_ERROR;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e000      	b.n	8000ffe <Max30102_FifoWritePointer+0x26>
	return MAX30102_OK;
 8000ffc:	2301      	movs	r3, #1
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <Max30102_FifoOverflowCounter>:

MAX30102_STATUS Max30102_FifoOverflowCounter(uint8_t Address) {
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_OVF_COUNTER, (Address & 0x1F))) //OVF_COUNTER[4:0]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	2005      	movs	r0, #5
 800101c:	f7ff fdf6 	bl	8000c0c <Max30102_WriteReg>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d001      	beq.n	800102a <Max30102_FifoOverflowCounter+0x24>
		return MAX30102_ERROR;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <Max30102_FifoOverflowCounter+0x26>
	return MAX30102_OK;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <Max30102_FifoReadPointer>:

MAX30102_STATUS Max30102_FifoReadPointer(uint8_t Address) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_FIFO_RD_PTR, (Address & 0x1F))) //FIFO_RD_PTR[4:0]
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	b2db      	uxtb	r3, r3
 8001046:	4619      	mov	r1, r3
 8001048:	2006      	movs	r0, #6
 800104a:	f7ff fddf 	bl	8000c0c <Max30102_WriteReg>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d001      	beq.n	8001058 <Max30102_FifoReadPointer+0x24>
		return MAX30102_ERROR;
 8001054:	2300      	movs	r3, #0
 8001056:	e000      	b.n	800105a <Max30102_FifoReadPointer+0x26>
	return MAX30102_OK;
 8001058:	2301      	movs	r3, #1
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <Max30102_FifoSampleAveraging>:

MAX30102_STATUS Max30102_FifoSampleAveraging(uint8_t Value) {
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 800106c:	f107 030f 	add.w	r3, r7, #15
 8001070:	4619      	mov	r1, r3
 8001072:	2008      	movs	r0, #8
 8001074:	f7ff fdec 	bl	8000c50 <Max30102_ReadReg>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d001      	beq.n	8001082 <Max30102_FifoSampleAveraging+0x20>
		return MAX30102_ERROR;
 800107e:	2300      	movs	r3, #0
 8001080:	e018      	b.n	80010b4 <Max30102_FifoSampleAveraging+0x52>
	tmp &= ~(0x07);
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	f023 0307 	bic.w	r3, r3, #7
 8001088:	b2db      	uxtb	r3, r3
 800108a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x07) << 5;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	015b      	lsls	r3, r3, #5
 8001090:	b25a      	sxtb	r2, r3
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b25b      	sxtb	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	4619      	mov	r1, r3
 80010a2:	2008      	movs	r0, #8
 80010a4:	f7ff fdb2 	bl	8000c0c <Max30102_WriteReg>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d001      	beq.n	80010b2 <Max30102_FifoSampleAveraging+0x50>
		return MAX30102_ERROR;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <Max30102_FifoSampleAveraging+0x52>

	return MAX30102_OK;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <Max30102_FifoRolloverEnable>:

MAX30102_STATUS Max30102_FifoRolloverEnable(uint8_t Enable) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	return Max30102_WriteRegisterBit(REG_FIFO_CONFIG,
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	2104      	movs	r1, #4
 80010d2:	2008      	movs	r0, #8
 80010d4:	f7ff fddc 	bl	8000c90 <Max30102_WriteRegisterBit>
 80010d8:	4603      	mov	r3, r0
			FIFO_CONF_FIFO_ROLLOVER_EN_BIT, (Enable & 0x01));
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <Max30102_FifoAlmostFullValue>:

MAX30102_STATUS Max30102_FifoAlmostFullValue(uint8_t Value) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
	if (Value < 17)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b10      	cmp	r3, #16
 80010f0:	d801      	bhi.n	80010f6 <Max30102_FifoAlmostFullValue+0x14>
		Value = 17;
 80010f2:	2311      	movs	r3, #17
 80010f4:	71fb      	strb	r3, [r7, #7]
	if (Value > 32)
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b20      	cmp	r3, #32
 80010fa:	d901      	bls.n	8001100 <Max30102_FifoAlmostFullValue+0x1e>
		Value = 32;
 80010fc:	2320      	movs	r3, #32
 80010fe:	71fb      	strb	r3, [r7, #7]
	Value = 32 - Value;
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f1c3 0320 	rsb	r3, r3, #32
 8001106:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_FIFO_CONFIG, &tmp))
 8001108:	f107 030f 	add.w	r3, r7, #15
 800110c:	4619      	mov	r1, r3
 800110e:	2008      	movs	r0, #8
 8001110:	f7ff fd9e 	bl	8000c50 <Max30102_ReadReg>
 8001114:	4603      	mov	r3, r0
 8001116:	2b01      	cmp	r3, #1
 8001118:	d001      	beq.n	800111e <Max30102_FifoAlmostFullValue+0x3c>
		return MAX30102_ERROR;
 800111a:	2300      	movs	r3, #0
 800111c:	e01a      	b.n	8001154 <Max30102_FifoAlmostFullValue+0x72>
	tmp &= ~(0x0F);
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	f023 030f 	bic.w	r3, r3, #15
 8001124:	b2db      	uxtb	r3, r3
 8001126:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x0F);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	b25a      	sxtb	r2, r3
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	b25b      	sxtb	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b25b      	sxtb	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_FIFO_CONFIG, tmp))
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	4619      	mov	r1, r3
 8001142:	2008      	movs	r0, #8
 8001144:	f7ff fd62 	bl	8000c0c <Max30102_WriteReg>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d001      	beq.n	8001152 <Max30102_FifoAlmostFullValue+0x70>
		return MAX30102_ERROR;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <Max30102_FifoAlmostFullValue+0x72>

	return MAX30102_OK;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Max30102_Reset>:
MAX30102_STATUS Max30102_ShutdownMode(uint8_t Enable) {
	return Max30102_WriteRegisterBit(REG_MODE_CONFIG, MODE_SHDN_BIT,
			(Enable & 0x01));
}

MAX30102_STATUS Max30102_Reset(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	uint8_t tmp = 0xFF;
 8001162:	23ff      	movs	r3, #255	; 0xff
 8001164:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, 0x40))
 8001166:	2140      	movs	r1, #64	; 0x40
 8001168:	2009      	movs	r0, #9
 800116a:	f7ff fd4f 	bl	8000c0c <Max30102_WriteReg>
 800116e:	4603      	mov	r3, r0
 8001170:	2b01      	cmp	r3, #1
 8001172:	d001      	beq.n	8001178 <Max30102_Reset+0x1c>
		return MAX30102_ERROR;
 8001174:	2300      	movs	r3, #0
 8001176:	e00f      	b.n	8001198 <Max30102_Reset+0x3c>
	do {
		if (MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	4619      	mov	r1, r3
 800117c:	2009      	movs	r0, #9
 800117e:	f7ff fd67 	bl	8000c50 <Max30102_ReadReg>
 8001182:	4603      	mov	r3, r0
 8001184:	2b01      	cmp	r3, #1
 8001186:	d001      	beq.n	800118c <Max30102_Reset+0x30>
			return MAX30102_ERROR;
 8001188:	2300      	movs	r3, #0
 800118a:	e005      	b.n	8001198 <Max30102_Reset+0x3c>
	} while (tmp & (1 << 6));
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <Max30102_Reset+0x1c>

	return MAX30102_OK;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Max30102_SetMode>:

MAX30102_STATUS Max30102_SetMode(uint8_t Mode) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_MODE_CONFIG, &tmp))
 80011aa:	f107 030f 	add.w	r3, r7, #15
 80011ae:	4619      	mov	r1, r3
 80011b0:	2009      	movs	r0, #9
 80011b2:	f7ff fd4d 	bl	8000c50 <Max30102_ReadReg>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d001      	beq.n	80011c0 <Max30102_SetMode+0x20>
		return MAX30102_ERROR;
 80011bc:	2300      	movs	r3, #0
 80011be:	e01a      	b.n	80011f6 <Max30102_SetMode+0x56>
	tmp &= ~(0x07);
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	f023 0307 	bic.w	r3, r3, #7
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	73fb      	strb	r3, [r7, #15]
	tmp |= (Mode & 0x07);
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_MODE_CONFIG, tmp))
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4619      	mov	r1, r3
 80011e4:	2009      	movs	r0, #9
 80011e6:	f7ff fd11 	bl	8000c0c <Max30102_WriteReg>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d001      	beq.n	80011f4 <Max30102_SetMode+0x54>
		return MAX30102_ERROR;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e000      	b.n	80011f6 <Max30102_SetMode+0x56>

	return MAX30102_OK;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <Max30102_SpO2AdcRange>:
//
//	SpO2 Configuration
//
MAX30102_STATUS Max30102_SpO2AdcRange(uint8_t Value) {
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001208:	f107 030f 	add.w	r3, r7, #15
 800120c:	4619      	mov	r1, r3
 800120e:	200a      	movs	r0, #10
 8001210:	f7ff fd1e 	bl	8000c50 <Max30102_ReadReg>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <Max30102_SpO2AdcRange+0x20>
		return MAX30102_ERROR;
 800121a:	2300      	movs	r3, #0
 800121c:	e01b      	b.n	8001256 <Max30102_SpO2AdcRange+0x58>
	tmp &= ~(0x03);
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	f023 0303 	bic.w	r3, r3, #3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x03) << 5);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	015b      	lsls	r3, r3, #5
 800122c:	b25b      	sxtb	r3, r3
 800122e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001232:	b25a      	sxtb	r2, r3
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	b25b      	sxtb	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b25b      	sxtb	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	4619      	mov	r1, r3
 8001244:	200a      	movs	r0, #10
 8001246:	f7ff fce1 	bl	8000c0c <Max30102_WriteReg>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	d001      	beq.n	8001254 <Max30102_SpO2AdcRange+0x56>
		return MAX30102_ERROR;
 8001250:	2300      	movs	r3, #0
 8001252:	e000      	b.n	8001256 <Max30102_SpO2AdcRange+0x58>

	return MAX30102_OK;
 8001254:	2301      	movs	r3, #1
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <Max30102_SpO2SampleRate>:

MAX30102_STATUS Max30102_SpO2SampleRate(uint8_t Value) {
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 8001268:	f107 030f 	add.w	r3, r7, #15
 800126c:	4619      	mov	r1, r3
 800126e:	200a      	movs	r0, #10
 8001270:	f7ff fcee 	bl	8000c50 <Max30102_ReadReg>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d001      	beq.n	800127e <Max30102_SpO2SampleRate+0x20>
		return MAX30102_ERROR;
 800127a:	2300      	movs	r3, #0
 800127c:	e01b      	b.n	80012b6 <Max30102_SpO2SampleRate+0x58>
	tmp &= ~(0x07);
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	f023 0307 	bic.w	r3, r3, #7
 8001284:	b2db      	uxtb	r3, r3
 8001286:	73fb      	strb	r3, [r7, #15]
	tmp |= ((Value & 0x07) << 2);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	b25b      	sxtb	r3, r3
 800128e:	f003 031c 	and.w	r3, r3, #28
 8001292:	b25a      	sxtb	r2, r3
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b25b      	sxtb	r3, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	4619      	mov	r1, r3
 80012a4:	200a      	movs	r0, #10
 80012a6:	f7ff fcb1 	bl	8000c0c <Max30102_WriteReg>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d001      	beq.n	80012b4 <Max30102_SpO2SampleRate+0x56>
		return MAX30102_ERROR;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e000      	b.n	80012b6 <Max30102_SpO2SampleRate+0x58>

	return MAX30102_OK;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <Max30102_SpO2LedPulseWidth>:

MAX30102_STATUS Max30102_SpO2LedPulseWidth(uint8_t Value) {
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp;
	if (MAX30102_OK != Max30102_ReadReg(REG_SPO2_CONFIG, &tmp))
 80012c8:	f107 030f 	add.w	r3, r7, #15
 80012cc:	4619      	mov	r1, r3
 80012ce:	200a      	movs	r0, #10
 80012d0:	f7ff fcbe 	bl	8000c50 <Max30102_ReadReg>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d001      	beq.n	80012de <Max30102_SpO2LedPulseWidth+0x20>
		return MAX30102_ERROR;
 80012da:	2300      	movs	r3, #0
 80012dc:	e01a      	b.n	8001314 <Max30102_SpO2LedPulseWidth+0x56>
	tmp &= ~(0x03);
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	f023 0303 	bic.w	r3, r3, #3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value & 0x03);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	73fb      	strb	r3, [r7, #15]
	if (MAX30102_OK != Max30102_WriteReg(REG_SPO2_CONFIG, tmp))
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	4619      	mov	r1, r3
 8001302:	200a      	movs	r0, #10
 8001304:	f7ff fc82 	bl	8000c0c <Max30102_WriteReg>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d001      	beq.n	8001312 <Max30102_SpO2LedPulseWidth+0x54>
		return MAX30102_ERROR;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <Max30102_SpO2LedPulseWidth+0x56>

	return MAX30102_OK;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <Max30102_Led1PulseAmplitude>:

//
//	LEDs Pulse Amplitute Configuration
//	LED Current = Value * 0.2 mA
//
MAX30102_STATUS Max30102_Led1PulseAmplitude(uint8_t Value) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_LED1_PA, Value))
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4619      	mov	r1, r3
 800132a:	200c      	movs	r0, #12
 800132c:	f7ff fc6e 	bl	8000c0c <Max30102_WriteReg>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d001      	beq.n	800133a <Max30102_Led1PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <Max30102_Led1PulseAmplitude+0x20>
	return MAX30102_OK;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <Max30102_Led2PulseAmplitude>:

MAX30102_STATUS Max30102_Led2PulseAmplitude(uint8_t Value) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	if (MAX30102_OK != Max30102_WriteReg(REG_LED2_PA, Value))
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4619      	mov	r1, r3
 8001352:	200d      	movs	r0, #13
 8001354:	f7ff fc5a 	bl	8000c0c <Max30102_WriteReg>
 8001358:	4603      	mov	r3, r0
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <Max30102_Led2PulseAmplitude+0x1e>
		return MAX30102_ERROR;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <Max30102_Led2PulseAmplitude+0x20>
	return MAX30102_OK;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <Max30102_GetHeartRate>:
//
MAX30102_STATUS Max30102_IsFingerOnSensor(void) {
	return IsFingerOnScreen;
}

int32_t Max30102_GetHeartRate(void) {
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	return HeartRate;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <Max30102_GetHeartRate+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20001370 	.word	0x20001370

08001384 <Max30102_Task>:

int32_t Max30102_GetSpO2Value(void) {
	return Sp02Value;
}

void Max30102_Task(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af04      	add	r7, sp, #16
	switch (StateMachine) {
 800138a:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <Max30102_Task+0x13c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b03      	cmp	r3, #3
 8001390:	f200 8092 	bhi.w	80014b8 <Max30102_Task+0x134>
 8001394:	a201      	add	r2, pc, #4	; (adr r2, 800139c <Max30102_Task+0x18>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013ad 	.word	0x080013ad
 80013a0:	080013e5 	.word	0x080013e5
 80013a4:	08001415 	.word	0x08001415
 80013a8:	08001481 	.word	0x08001481
	case MAX30102_STATE_BEGIN:
		HeartRate = 0;
 80013ac:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <Max30102_Task+0x140>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
		Sp02Value = 0;
 80013b2:	4b45      	ldr	r3, [pc, #276]	; (80014c8 <Max30102_Task+0x144>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
		if (IsFingerOnScreen) {
 80013b8:	4b44      	ldr	r3, [pc, #272]	; (80014cc <Max30102_Task+0x148>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d075      	beq.n	80014ae <Max30102_Task+0x12a>
			CollectedSamples = 0;
 80013c2:	4b43      	ldr	r3, [pc, #268]	; (80014d0 <Max30102_Task+0x14c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
			BufferTail = BufferHead;
 80013c8:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <Max30102_Task+0x150>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a42      	ldr	r2, [pc, #264]	; (80014d8 <Max30102_Task+0x154>)
 80013ce:	6013      	str	r3, [r2, #0]
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_HIGH);
 80013d0:	2024      	movs	r0, #36	; 0x24
 80013d2:	f7ff ffa3 	bl	800131c <Max30102_Led1PulseAmplitude>
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_HIGH);
 80013d6:	2024      	movs	r0, #36	; 0x24
 80013d8:	f7ff ffb4 	bl	8001344 <Max30102_Led2PulseAmplitude>
			StateMachine = MAX30102_STATE_CALIBRATE;
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <Max30102_Task+0x13c>)
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013e2:	e064      	b.n	80014ae <Max30102_Task+0x12a>

	case MAX30102_STATE_CALIBRATE:
		if (IsFingerOnScreen) {
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <Max30102_Task+0x148>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d008      	beq.n	8001400 <Max30102_Task+0x7c>
			if (CollectedSamples
					> (MAX30102_BUFFER_LENGTH - MAX30102_SAMPLES_PER_SECOND)) {
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <Max30102_Task+0x14c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
			if (CollectedSamples
 80013f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013f6:	d95c      	bls.n	80014b2 <Max30102_Task+0x12e>
				StateMachine = MAX30102_STATE_CALCULATE_HR;
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <Max30102_Task+0x13c>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	701a      	strb	r2, [r3, #0]
		} else {
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
			StateMachine = MAX30102_STATE_BEGIN;
		}
		break;
 80013fe:	e058      	b.n	80014b2 <Max30102_Task+0x12e>
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff ff8b 	bl	800131c <Max30102_Led1PulseAmplitude>
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8001406:	2001      	movs	r0, #1
 8001408:	f7ff ff9c 	bl	8001344 <Max30102_Led2PulseAmplitude>
			StateMachine = MAX30102_STATE_BEGIN;
 800140c:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <Max30102_Task+0x13c>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
		break;
 8001412:	e04e      	b.n	80014b2 <Max30102_Task+0x12e>

	case MAX30102_STATE_CALCULATE_HR:
		if (IsFingerOnScreen) {
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <Max30102_Task+0x148>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d026      	beq.n	800146c <Max30102_Task+0xe8>
			maxim_heart_rate_and_oxygen_saturation(IrBuffer, RedBuffer,
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <Max30102_Task+0x154>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <Max30102_Task+0x158>)
 8001426:	9203      	str	r2, [sp, #12]
 8001428:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <Max30102_Task+0x140>)
 800142a:	9202      	str	r2, [sp, #8]
 800142c:	4a2c      	ldr	r2, [pc, #176]	; (80014e0 <Max30102_Task+0x15c>)
 800142e:	9201      	str	r2, [sp, #4]
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <Max30102_Task+0x144>)
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001438:	492a      	ldr	r1, [pc, #168]	; (80014e4 <Max30102_Task+0x160>)
 800143a:	482b      	ldr	r0, [pc, #172]	; (80014e8 <Max30102_Task+0x164>)
 800143c:	f000 f8ee 	bl	800161c <maxim_heart_rate_and_oxygen_saturation>
					MAX30102_BUFFER_LENGTH - MAX30102_SAMPLES_PER_SECOND,
					BufferTail, &Sp02Value, &Sp02IsValid, &HeartRate,
					&IsHrValid);
			BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND)
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <Max30102_Task+0x154>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f103 0264 	add.w	r2, r3, #100	; 0x64
					% MAX30102_BUFFER_LENGTH;
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <Max30102_Task+0x168>)
 800144a:	fba3 1302 	umull	r1, r3, r3, r2
 800144e:	099b      	lsrs	r3, r3, #6
 8001450:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	1ad3      	subs	r3, r2, r3
			BufferTail = (BufferTail + MAX30102_SAMPLES_PER_SECOND)
 800145a:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <Max30102_Task+0x154>)
 800145c:	6013      	str	r3, [r2, #0]
			CollectedSamples = 0;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <Max30102_Task+0x14c>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
			StateMachine = MAX30102_STATE_COLLECT_NEXT_PORTION;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <Max30102_Task+0x13c>)
 8001466:	2203      	movs	r2, #3
 8001468:	701a      	strb	r2, [r3, #0]
		} else {
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
			StateMachine = MAX30102_STATE_BEGIN;
		}
		break;
 800146a:	e025      	b.n	80014b8 <Max30102_Task+0x134>
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff ff55 	bl	800131c <Max30102_Led1PulseAmplitude>
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff ff66 	bl	8001344 <Max30102_Led2PulseAmplitude>
			StateMachine = MAX30102_STATE_BEGIN;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <Max30102_Task+0x13c>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
		break;
 800147e:	e01b      	b.n	80014b8 <Max30102_Task+0x134>

	case MAX30102_STATE_COLLECT_NEXT_PORTION:
		if (IsFingerOnScreen) {
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <Max30102_Task+0x148>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <Max30102_Task+0x116>
			if (CollectedSamples > MAX30102_SAMPLES_PER_SECOND) {
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <Max30102_Task+0x14c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d911      	bls.n	80014b6 <Max30102_Task+0x132>
				StateMachine = MAX30102_STATE_CALCULATE_HR;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <Max30102_Task+0x13c>)
 8001494:	2202      	movs	r2, #2
 8001496:	701a      	strb	r2, [r3, #0]
		} else {
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
			StateMachine = MAX30102_STATE_BEGIN;
		}
		break;
 8001498:	e00d      	b.n	80014b6 <Max30102_Task+0x132>
			Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff ff3e 	bl	800131c <Max30102_Led1PulseAmplitude>
			Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff ff4f 	bl	8001344 <Max30102_Led2PulseAmplitude>
			StateMachine = MAX30102_STATE_BEGIN;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <Max30102_Task+0x13c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
		break;
 80014ac:	e003      	b.n	80014b6 <Max30102_Task+0x132>
		break;
 80014ae:	bf00      	nop
 80014b0:	e002      	b.n	80014b8 <Max30102_Task+0x134>
		break;
 80014b2:	bf00      	nop
 80014b4:	e000      	b.n	80014b8 <Max30102_Task+0x134>
		break;
 80014b6:	bf00      	nop
	}
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20001375 	.word	0x20001375
 80014c4:	20001370 	.word	0x20001370
 80014c8:	20001368 	.word	0x20001368
 80014cc:	20001364 	.word	0x20001364
 80014d0:	20001360 	.word	0x20001360
 80014d4:	20001358 	.word	0x20001358
 80014d8:	2000135c 	.word	0x2000135c
 80014dc:	20001374 	.word	0x20001374
 80014e0:	2000136c 	.word	0x2000136c
 80014e4:	200009f8 	.word	0x200009f8
 80014e8:	20000098 	.word	0x20000098
 80014ec:	1b4e81b5 	.word	0x1b4e81b5

080014f0 <Max30102_Init>:

//
//	Initialization
//
MAX30102_STATUS Max30102_Init(I2C_HandleTypeDef *i2c) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	uint8_t uch_dummy;
	i2c_max30102 = i2c;
 80014f8:	4a46      	ldr	r2, [pc, #280]	; (8001614 <Max30102_Init+0x124>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
	if (MAX30102_OK != Max30102_Reset()) //resets the MAX30102
 80014fe:	f7ff fe2d 	bl	800115c <Max30102_Reset>
 8001502:	4603      	mov	r3, r0
 8001504:	2b01      	cmp	r3, #1
 8001506:	d001      	beq.n	800150c <Max30102_Init+0x1c>
		return MAX30102_ERROR;
 8001508:	2300      	movs	r3, #0
 800150a:	e07e      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_ReadReg(0, &uch_dummy))
 800150c:	f107 030f 	add.w	r3, r7, #15
 8001510:	4619      	mov	r1, r3
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fb9c 	bl	8000c50 <Max30102_ReadReg>
 8001518:	4603      	mov	r3, r0
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <Max30102_Init+0x32>
		return MAX30102_ERROR;
 800151e:	2300      	movs	r3, #0
 8001520:	e073      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoWritePointer(0x00))
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fd58 	bl	8000fd8 <Max30102_FifoWritePointer>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d001      	beq.n	8001532 <Max30102_Init+0x42>
		return MAX30102_ERROR;
 800152e:	2300      	movs	r3, #0
 8001530:	e06b      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoOverflowCounter(0x00))
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff fd67 	bl	8001006 <Max30102_FifoOverflowCounter>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d001      	beq.n	8001542 <Max30102_Init+0x52>
		return MAX30102_ERROR;
 800153e:	2300      	movs	r3, #0
 8001540:	e063      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoReadPointer(0x00))
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff fd76 	bl	8001034 <Max30102_FifoReadPointer>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d001      	beq.n	8001552 <Max30102_Init+0x62>
		return MAX30102_ERROR;
 800154e:	2300      	movs	r3, #0
 8001550:	e05b      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoSampleAveraging(FIFO_SMP_AVE_1))
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fd85 	bl	8001062 <Max30102_FifoSampleAveraging>
 8001558:	4603      	mov	r3, r0
 800155a:	2b01      	cmp	r3, #1
 800155c:	d001      	beq.n	8001562 <Max30102_Init+0x72>
		return MAX30102_ERROR;
 800155e:	2300      	movs	r3, #0
 8001560:	e053      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_FifoRolloverEnable(0))
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff fdaa 	bl	80010bc <Max30102_FifoRolloverEnable>
 8001568:	4603      	mov	r3, r0
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <Max30102_Init+0x82>
		return MAX30102_ERROR;
 800156e:	2300      	movs	r3, #0
 8001570:	e04b      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK
			!= Max30102_FifoAlmostFullValue(MAX30102_FIFO_ALMOST_FULL_SAMPLES))
 8001572:	2011      	movs	r0, #17
 8001574:	f7ff fdb5 	bl	80010e2 <Max30102_FifoAlmostFullValue>
 8001578:	4603      	mov	r3, r0
	if (MAX30102_OK
 800157a:	2b01      	cmp	r3, #1
 800157c:	d001      	beq.n	8001582 <Max30102_Init+0x92>
		return MAX30102_ERROR;
 800157e:	2300      	movs	r3, #0
 8001580:	e043      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SetMode(MODE_SPO2_MODE))
 8001582:	2003      	movs	r0, #3
 8001584:	f7ff fe0c 	bl	80011a0 <Max30102_SetMode>
 8001588:	4603      	mov	r3, r0
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <Max30102_Init+0xa2>
		return MAX30102_ERROR;
 800158e:	2300      	movs	r3, #0
 8001590:	e03b      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SpO2AdcRange(SPO2_ADC_RGE_4096))
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff fe33 	bl	80011fe <Max30102_SpO2AdcRange>
 8001598:	4603      	mov	r3, r0
 800159a:	2b01      	cmp	r3, #1
 800159c:	d001      	beq.n	80015a2 <Max30102_Init+0xb2>
		return MAX30102_ERROR;
 800159e:	2300      	movs	r3, #0
 80015a0:	e033      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SpO2SampleRate(SPO2_SAMPLE_RATE))
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff fe5b 	bl	800125e <Max30102_SpO2SampleRate>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <Max30102_Init+0xc2>
		return MAX30102_ERROR;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e02b      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SpO2LedPulseWidth(SPO2_PULSE_WIDTH_411))
 80015b2:	2003      	movs	r0, #3
 80015b4:	f7ff fe83 	bl	80012be <Max30102_SpO2LedPulseWidth>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <Max30102_Init+0xd2>
		return MAX30102_ERROR;
 80015be:	2300      	movs	r3, #0
 80015c0:	e023      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK
			!= Max30102_Led1PulseAmplitude(MAX30102_RED_LED_CURRENT_LOW))
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff feaa 	bl	800131c <Max30102_Led1PulseAmplitude>
 80015c8:	4603      	mov	r3, r0
	if (MAX30102_OK
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <Max30102_Init+0xe2>
		return MAX30102_ERROR;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e01b      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_Led2PulseAmplitude(MAX30102_IR_LED_CURRENT_LOW))
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff feb6 	bl	8001344 <Max30102_Led2PulseAmplitude>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d001      	beq.n	80015e2 <Max30102_Init+0xf2>
		return MAX30102_ERROR;
 80015de:	2300      	movs	r3, #0
 80015e0:	e013      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SetIntAlmostFullEnabled(1))
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff fc02 	bl	8000dec <Max30102_SetIntAlmostFullEnabled>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d001      	beq.n	80015f2 <Max30102_Init+0x102>
		return MAX30102_ERROR;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e00b      	b.n	800160a <Max30102_Init+0x11a>
	if (MAX30102_OK != Max30102_SetIntFifoDataReadyEnabled(1))
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fc0a 	bl	8000e0c <Max30102_SetIntFifoDataReadyEnabled>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <Max30102_Init+0x112>
		return MAX30102_ERROR;
 80015fe:	2300      	movs	r3, #0
 8001600:	e003      	b.n	800160a <Max30102_Init+0x11a>
//	if(MAX30102_OK != Max30102_WriteReg(REG_PILOT_PA,0x7f))   // Choose value for ~ 25mA for Pilot LED
//		return MAX30102_ERROR;
	StateMachine = MAX30102_STATE_BEGIN;
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <Max30102_Init+0x128>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
	return MAX30102_OK;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000094 	.word	0x20000094
 8001618:	20001375 	.word	0x20001375

0800161c <maxim_heart_rate_and_oxygen_saturation>:
 * \param[out]    *pn_heart_rate          - Calculated heart rate value
 * \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
 *
 * \retval       None
 */
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b0d3      	sub	sp, #332	; 0x14c
 8001620:	af04      	add	r7, sp, #16
 8001622:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8001626:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 800162a:	6020      	str	r0, [r4, #0]
 800162c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001630:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8001634:	6001      	str	r1, [r0, #0]
 8001636:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800163a:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 800163e:	600a      	str	r2, [r1, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001646:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800164a:	801a      	strh	r2, [r3, #0]
	int32_t n_spo2_calc;
	int32_t n_y_dc_max, n_x_dc_max;
	int32_t n_y_dc_max_idx, n_x_dc_max_idx;
	int32_t an_ratio[5], n_ratio_average;
	int32_t n_nume, n_denom;
	uint32_t un_offset_tmp = un_offset;
 800164c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001650:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	// remove DC of ir signal    
	un_ir_mean = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	for (k = 0; k < n_buffer_length; k++) {
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001666:	e021      	b.n	80016ac <maxim_heart_rate_and_oxygen_saturation+0x90>
		un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8001668:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001672:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	4413      	add	r3, r2
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001680:	4413      	add	r3, r2
 8001682:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800168a:	3301      	adds	r3, #1
 800168c:	4ad4      	ldr	r2, [pc, #848]	; (80019e0 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 800168e:	fba2 1203 	umull	r1, r2, r2, r3
 8001692:	0992      	lsrs	r2, r2, #6
 8001694:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001698:	fb01 f202 	mul.w	r2, r1, r2
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	for (k = 0; k < n_buffer_length; k++) {
 80016a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016a6:	3301      	adds	r3, #1
 80016a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80016ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016b4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dbd4      	blt.n	8001668 <maxim_heart_rate_and_oxygen_saturation+0x4c>
	}

	un_ir_mean = un_ir_mean / n_buffer_length;
 80016be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	un_offset_tmp = un_offset;
 80016d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016d8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	for (k = 0; k < n_buffer_length; k++) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80016e8:	e025      	b.n	8001736 <maxim_heart_rate_and_oxygen_saturation+0x11a>
		an_x[k] = pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 80016ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80016f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4619      	mov	r1, r3
 8001706:	4ab7      	ldr	r2, [pc, #732]	; (80019e4 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800170c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001710:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001714:	3301      	adds	r3, #1
 8001716:	4ab2      	ldr	r2, [pc, #712]	; (80019e0 <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8001718:	fba2 1203 	umull	r1, r2, r2, r3
 800171c:	0992      	lsrs	r2, r2, #6
 800171e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001722:	fb01 f202 	mul.w	r2, r1, r2
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	for (k = 0; k < n_buffer_length; k++) {
 800172c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001730:	3301      	adds	r3, #1
 8001732:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001736:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800173a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800173e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbd0      	blt.n	80016ea <maxim_heart_rate_and_oxygen_saturation+0xce>
	}

	// 4 pt Moving Average
	for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800174e:	e02c      	b.n	80017aa <maxim_heart_rate_and_oxygen_saturation+0x18e>
		n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
 8001750:	4aa4      	ldr	r2, [pc, #656]	; (80019e4 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001756:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800175a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800175e:	3301      	adds	r3, #1
 8001760:	49a0      	ldr	r1, [pc, #640]	; (80019e4 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001762:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001766:	441a      	add	r2, r3
 8001768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800176c:	3302      	adds	r3, #2
 800176e:	499d      	ldr	r1, [pc, #628]	; (80019e4 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001770:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001774:	441a      	add	r2, r3
 8001776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800177a:	3303      	adds	r3, #3
 800177c:	4999      	ldr	r1, [pc, #612]	; (80019e4 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800177e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001782:	4413      	add	r3, r2
 8001784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		an_x[k] = n_denom / (int32_t) 4;
 8001788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800178c:	2b00      	cmp	r3, #0
 800178e:	da00      	bge.n	8001792 <maxim_heart_rate_and_oxygen_saturation+0x176>
 8001790:	3303      	adds	r3, #3
 8001792:	109b      	asrs	r3, r3, #2
 8001794:	4619      	mov	r1, r3
 8001796:	4a93      	ldr	r2, [pc, #588]	; (80019e4 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8001798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800179c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
 80017a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017a4:	3301      	adds	r3, #1
 80017a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80017aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017ae:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80017b2:	dbcd      	blt.n	8001750 <maxim_heart_rate_and_oxygen_saturation+0x134>
	}

	// get difference of smoothed IR signal

	for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80017ba:	e015      	b.n	80017e8 <maxim_heart_rate_and_oxygen_saturation+0x1cc>
		an_dx[k] = (an_x[k + 1] - an_x[k]);
 80017bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017c0:	3301      	adds	r3, #1
 80017c2:	4a88      	ldr	r2, [pc, #544]	; (80019e4 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80017c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017c8:	4986      	ldr	r1, [pc, #536]	; (80019e4 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80017ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017d2:	1ad2      	subs	r2, r2, r3
 80017d4:	4984      	ldr	r1, [pc, #528]	; (80019e8 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80017d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
 80017de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017e2:	3301      	adds	r3, #1
 80017e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80017e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017ec:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 80017f0:	dde4      	ble.n	80017bc <maxim_heart_rate_and_oxygen_saturation+0x1a0>

	// 2-pt Moving Average to an_dx
	for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80017f8:	e019      	b.n	800182e <maxim_heart_rate_and_oxygen_saturation+0x212>
		an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
 80017fa:	4a7b      	ldr	r2, [pc, #492]	; (80019e8 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80017fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001808:	3301      	adds	r3, #1
 800180a:	4977      	ldr	r1, [pc, #476]	; (80019e8 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800180c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001810:	4413      	add	r3, r2
 8001812:	0fda      	lsrs	r2, r3, #31
 8001814:	4413      	add	r3, r2
 8001816:	105b      	asrs	r3, r3, #1
 8001818:	4619      	mov	r1, r3
 800181a:	4a73      	ldr	r2, [pc, #460]	; (80019e8 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800181c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++) {
 8001824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001828:	3301      	adds	r3, #1
 800182a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800182e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001832:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001836:	dbe0      	blt.n	80017fa <maxim_heart_rate_and_oxygen_saturation+0x1de>
	}

	// hamming window
	// flip wave form so that we can detect valley with peak detector
	for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++) {
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800183e:	e039      	b.n	80018b4 <maxim_heart_rate_and_oxygen_saturation+0x298>
		s = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		for (k = i; k < i + HAMMING_SIZE; k++) {
 8001846:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800184a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800184e:	e018      	b.n	8001882 <maxim_heart_rate_and_oxygen_saturation+0x266>
			s -= an_dx[k] * auw_hamm[k - i];
 8001850:	4a65      	ldr	r2, [pc, #404]	; (80019e8 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8001852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800185e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001862:	1a8a      	subs	r2, r1, r2
 8001864:	4961      	ldr	r1, [pc, #388]	; (80019ec <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8001866:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		for (k = i; k < i + HAMMING_SIZE; k++) {
 8001878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800187c:	3301      	adds	r3, #1
 800187e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001882:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001886:	3304      	adds	r3, #4
 8001888:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800188c:	429a      	cmp	r2, r3
 800188e:	dddf      	ble.n	8001850 <maxim_heart_rate_and_oxygen_saturation+0x234>
		}
		an_dx[i] = s / (int32_t) 1146; // divide by sum of auw_hamm 
 8001890:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001894:	4a56      	ldr	r2, [pc, #344]	; (80019f0 <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 8001896:	fb82 1203 	smull	r1, r2, r2, r3
 800189a:	1252      	asrs	r2, r2, #9
 800189c:	17db      	asrs	r3, r3, #31
 800189e:	1ad2      	subs	r2, r2, r3
 80018a0:	4951      	ldr	r1, [pc, #324]	; (80019e8 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80018a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++) {
 80018aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018ae:	3301      	adds	r3, #1
 80018b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018b8:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80018bc:	ddc0      	ble.n	8001840 <maxim_heart_rate_and_oxygen_saturation+0x224>
	}

	n_th1 = 0; // threshold calculation
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018ca:	e011      	b.n	80018f0 <maxim_heart_rate_and_oxygen_saturation+0x2d4>
		n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t) 0 - an_dx[k]));
 80018cc:	4a46      	ldr	r2, [pc, #280]	; (80019e8 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80018ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bfb8      	it	lt
 80018da:	425b      	neglt	r3, r3
 80018dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018e0:	4413      	add	r3, r2
 80018e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++) {
 80018e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018ea:	3301      	adds	r3, #1
 80018ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018f4:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 80018f8:	dde8      	ble.n	80018cc <maxim_heart_rate_and_oxygen_saturation+0x2b0>
	}
	n_th1 = n_th1 / ( BUFFER_SIZE - HAMMING_SIZE);
 80018fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018fe:	4a3d      	ldr	r2, [pc, #244]	; (80019f4 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 8001900:	fb82 1203 	smull	r1, r2, r2, r3
 8001904:	1192      	asrs	r2, r2, #6
 8001906:	17db      	asrs	r3, r3, #31
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	// peak location is acutally index for sharpest location of raw signal since we flipped the signal         
	maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx,
 800190e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001912:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001916:	2305      	movs	r3, #5
 8001918:	9302      	str	r3, [sp, #8]
 800191a:	2308      	movs	r3, #8
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	f240 13ef 	movw	r3, #495	; 0x1ef
 8001928:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800192a:	f000 fb91 	bl	8002050 <maxim_find_peaks>
			BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5); //peak_height, peak_distance, max_num_peaks 

	n_peak_interval_sum = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	if (n_npks >= 2) {
 8001934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001938:	2b01      	cmp	r3, #1
 800193a:	dd44      	ble.n	80019c6 <maxim_heart_rate_and_oxygen_saturation+0x3aa>
		for (k = 1; k < n_npks; k++)
 800193c:	2301      	movs	r3, #1
 800193e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001942:	e01b      	b.n	800197c <maxim_heart_rate_and_oxygen_saturation+0x360>
			n_peak_interval_sum +=
					(an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
 8001944:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001948:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800194c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001950:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001958:	1e59      	subs	r1, r3, #1
 800195a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800195e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001962:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001966:	1ad3      	subs	r3, r2, r3
			n_peak_interval_sum +=
 8001968:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800196c:	4413      	add	r3, r2
 800196e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		for (k = 1; k < n_npks; k++)
 8001972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001976:	3301      	adds	r3, #1
 8001978:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800197c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001980:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001984:	429a      	cmp	r2, r3
 8001986:	dbdd      	blt.n	8001944 <maxim_heart_rate_and_oxygen_saturation+0x328>
		n_peak_interval_sum = n_peak_interval_sum / (n_npks - 1);
 8001988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800198c:	3b01      	subs	r3, #1
 800198e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001992:	fb92 f3f3 	sdiv	r3, r2, r3
 8001996:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		*pn_heart_rate = (int32_t) (6000 / (float) n_peak_interval_sum
 800199a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				* (float) (FS / 100.0)); // beats per minutes
 80019a6:	eddf 6a14 	vldr	s13, [pc, #80]	; 80019f8 <maxim_heart_rate_and_oxygen_saturation+0x3dc>
 80019aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
		*pn_heart_rate = (int32_t) (6000 / (float) n_peak_interval_sum
 80019ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b2:	ee17 2a90 	vmov	r2, s15
 80019b6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80019ba:	601a      	str	r2, [r3, #0]
		*pch_hr_valid = 1;
 80019bc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e007      	b.n	80019d6 <maxim_heart_rate_and_oxygen_saturation+0x3ba>
	} else {
		*pn_heart_rate = -999;
 80019c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 80019cc:	601a      	str	r2, [r3, #0]
		*pch_hr_valid = 0;
 80019ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
	}

	for (k = 0; k < n_npks; k++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80019dc:	e026      	b.n	8001a2c <maxim_heart_rate_and_oxygen_saturation+0x410>
 80019de:	bf00      	nop
 80019e0:	1b4e81b5 	.word	0x1b4e81b5
 80019e4:	20001b38 	.word	0x20001b38
 80019e8:	20001378 	.word	0x20001378
 80019ec:	0800bbc4 	.word	0x0800bbc4
 80019f0:	725f9bed 	.word	0x725f9bed
 80019f4:	21195767 	.word	0x21195767
 80019f8:	45bb8000 	.word	0x45bb8000
 80019fc:	fffffc19 	.word	0xfffffc19
		an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;
 8001a00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a08:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	1c9a      	adds	r2, r3, #2
 8001a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001a1c:	443b      	add	r3, r7
 8001a1e:	f843 2c9c 	str.w	r2, [r3, #-156]
	for (k = 0; k < n_npks; k++)
 8001a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a26:	3301      	adds	r3, #1
 8001a28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a30:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbe3      	blt.n	8001a00 <maxim_heart_rate_and_oxygen_saturation+0x3e4>

	// raw value : RED(=y) and IR(=X)
	// we need to assess DC and AC value of ir and red PPG.
	un_offset_tmp = un_offset;
 8001a38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a3c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	for (k = 0; k < n_buffer_length; k++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a4c:	e032      	b.n	8001ab4 <maxim_heart_rate_and_oxygen_saturation+0x498>
		an_x[k] = pun_ir_buffer[un_offset_tmp];
 8001a4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001a58:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	4ab3      	ldr	r2, [pc, #716]	; (8001d34 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		an_y[k] = pun_red_buffer[un_offset_tmp];
 8001a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001a78:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	4aac      	ldr	r2, [pc, #688]	; (8001d38 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8001a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a92:	3301      	adds	r3, #1
 8001a94:	4aa9      	ldr	r2, [pc, #676]	; (8001d3c <maxim_heart_rate_and_oxygen_saturation+0x720>)
 8001a96:	fba2 1203 	umull	r1, r2, r2, r3
 8001a9a:	0992      	lsrs	r2, r2, #6
 8001a9c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001aa0:	fb01 f202 	mul.w	r2, r1, r2
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	for (k = 0; k < n_buffer_length; k++) {
 8001aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ab4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ab8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001abc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbc3      	blt.n	8001a4e <maxim_heart_rate_and_oxygen_saturation+0x432>
	}

	// find precise min near an_ir_valley_locs
	n_exact_ir_valley_locs_count = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	for (k = 0; k < n_npks; k++) {
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ad2:	e05a      	b.n	8001b8a <maxim_heart_rate_and_oxygen_saturation+0x56e>
		un_only_once = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		m = an_ir_valley_locs[k];
 8001ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ae4:	443b      	add	r3, r7
 8001ae6:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		n_c_min = 16777216;    //2^24;
 8001aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001af2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		if (m + 5 < BUFFER_SIZE - HAMMING_SIZE && m - 5 > 0) {
 8001af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001afa:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001afe:	da3f      	bge.n	8001b80 <maxim_heart_rate_and_oxygen_saturation+0x564>
 8001b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	dd3b      	ble.n	8001b80 <maxim_heart_rate_and_oxygen_saturation+0x564>
			for (i = m - 5; i < m + 5; i++)
 8001b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b0c:	3b05      	subs	r3, #5
 8001b0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b12:	e025      	b.n	8001b60 <maxim_heart_rate_and_oxygen_saturation+0x544>
				if (an_x[i] < n_c_min) {
 8001b14:	4a87      	ldr	r2, [pc, #540]	; (8001d34 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001b16:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dd17      	ble.n	8001b56 <maxim_heart_rate_and_oxygen_saturation+0x53a>
					if (un_only_once > 0) {
 8001b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <maxim_heart_rate_and_oxygen_saturation+0x518>
						un_only_once = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
					}
					n_c_min = an_x[i];
 8001b34:	4a7f      	ldr	r2, [pc, #508]	; (8001d34 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001b36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
					an_exact_ir_valley_locs[k] = i;
 8001b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001b4c:	443b      	add	r3, r7
 8001b4e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001b52:	f843 2cd8 	str.w	r2, [r3, #-216]
			for (i = m - 5; i < m + 5; i++)
 8001b56:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001b64:	3304      	adds	r3, #4
 8001b66:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	ddd2      	ble.n	8001b14 <maxim_heart_rate_and_oxygen_saturation+0x4f8>
				}
			if (un_only_once == 0)
 8001b6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d104      	bne.n	8001b80 <maxim_heart_rate_and_oxygen_saturation+0x564>
				n_exact_ir_valley_locs_count++;
 8001b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	for (k = 0; k < n_npks; k++) {
 8001b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b84:	3301      	adds	r3, #1
 8001b86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b8e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001b92:	429a      	cmp	r2, r3
 8001b94:	db9e      	blt.n	8001ad4 <maxim_heart_rate_and_oxygen_saturation+0x4b8>
		}
	}
	if (n_exact_ir_valley_locs_count < 2) {
 8001b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	dc08      	bgt.n	8001bb0 <maxim_heart_rate_and_oxygen_saturation+0x594>
		*pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
 8001b9e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001ba2:	4a67      	ldr	r2, [pc, #412]	; (8001d40 <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8001ba4:	601a      	str	r2, [r3, #0]
		*pch_spo2_valid = 0;
 8001ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
		return;
 8001bae:	e243      	b.n	8002038 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
	}
	// 4 pt MA
	for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bb6:	e04c      	b.n	8001c52 <maxim_heart_rate_and_oxygen_saturation+0x636>
		an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3])
 8001bb8:	4a5e      	ldr	r2, [pc, #376]	; (8001d34 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	495a      	ldr	r1, [pc, #360]	; (8001d34 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001bca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bce:	441a      	add	r2, r3
 8001bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	4957      	ldr	r1, [pc, #348]	; (8001d34 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001bd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bdc:	441a      	add	r2, r3
 8001bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001be2:	3303      	adds	r3, #3
 8001be4:	4953      	ldr	r1, [pc, #332]	; (8001d34 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001be6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bea:	4413      	add	r3, r2
				/ (int32_t) 4;
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da00      	bge.n	8001bf2 <maxim_heart_rate_and_oxygen_saturation+0x5d6>
 8001bf0:	3303      	adds	r3, #3
 8001bf2:	109b      	asrs	r3, r3, #2
 8001bf4:	4619      	mov	r1, r3
		an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3])
 8001bf6:	4a4f      	ldr	r2, [pc, #316]	; (8001d34 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8001bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3])
 8001c00:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c0e:	3301      	adds	r3, #1
 8001c10:	4949      	ldr	r1, [pc, #292]	; (8001d38 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001c12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c16:	441a      	add	r2, r3
 8001c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	4946      	ldr	r1, [pc, #280]	; (8001d38 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001c20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c24:	441a      	add	r2, r3
 8001c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c2a:	3303      	adds	r3, #3
 8001c2c:	4942      	ldr	r1, [pc, #264]	; (8001d38 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001c2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c32:	4413      	add	r3, r2
				/ (int32_t) 4;
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da00      	bge.n	8001c3a <maxim_heart_rate_and_oxygen_saturation+0x61e>
 8001c38:	3303      	adds	r3, #3
 8001c3a:	109b      	asrs	r3, r3, #2
 8001c3c:	4619      	mov	r1, r3
		an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3])
 8001c3e:	4a3e      	ldr	r2, [pc, #248]	; (8001d38 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8001c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++) {
 8001c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c56:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8001c5a:	dbad      	blt.n	8001bb8 <maxim_heart_rate_and_oxygen_saturation+0x59c>
	}

	//using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
	//finding AC/DC maximum of raw ir * red between two valley locations
	n_ratio_average = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	n_i_ratio_count = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	for (k = 0; k < 5; k++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c6e:	e00d      	b.n	8001c8c <maxim_heart_rate_and_oxygen_saturation+0x670>
		an_ratio[k] = 0;
 8001c70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c78:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (k = 0; k < 5; k++)
 8001c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c86:	3301      	adds	r3, #1
 8001c88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	dded      	ble.n	8001c70 <maxim_heart_rate_and_oxygen_saturation+0x654>
	for (k = 0; k < n_exact_ir_valley_locs_count; k++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c9a:	e018      	b.n	8001cce <maxim_heart_rate_and_oxygen_saturation+0x6b2>
		if (an_exact_ir_valley_locs[k] > BUFFER_SIZE) {
 8001c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ca6:	443b      	add	r3, r7
 8001ca8:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001cac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cb0:	dd08      	ble.n	8001cc4 <maxim_heart_rate_and_oxygen_saturation+0x6a8>
			*pn_spo2 = -999; // do not use SPO2 since valley loc is out of range
 8001cb2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001cb6:	4a22      	ldr	r2, [pc, #136]	; (8001d40 <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8001cb8:	601a      	str	r2, [r3, #0]
			*pch_spo2_valid = 0;
 8001cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
			return;
 8001cc2:	e1b9      	b.n	8002038 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
	for (k = 0; k < n_exact_ir_valley_locs_count; k++) {
 8001cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001cce:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbe0      	blt.n	8001c9c <maxim_heart_rate_and_oxygen_saturation+0x680>
		}
	}
	// find max between two valley locations 
	// and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 

	for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++) {
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ce0:	e14d      	b.n	8001f7e <maxim_heart_rate_and_oxygen_saturation+0x962>
		n_y_dc_max = -16777216;
 8001ce2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001ce6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		n_x_dc_max = -16777216;
 8001cea:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001cee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k] > 10) {
 8001cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001cfe:	443b      	add	r3, r7
 8001d00:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8001d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d0e:	443b      	add	r3, r7
 8001d10:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b0a      	cmp	r3, #10
 8001d18:	f340 812c 	ble.w	8001f74 <maxim_heart_rate_and_oxygen_saturation+0x958>
			for (i = an_exact_ir_valley_locs[k];
 8001d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d26:	443b      	add	r3, r7
 8001d28:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001d2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d30:	e035      	b.n	8001d9e <maxim_heart_rate_and_oxygen_saturation+0x782>
 8001d32:	bf00      	nop
 8001d34:	20001b38 	.word	0x20001b38
 8001d38:	20002308 	.word	0x20002308
 8001d3c:	1b4e81b5 	.word	0x1b4e81b5
 8001d40:	fffffc19 	.word	0xfffffc19
					i < an_exact_ir_valley_locs[k + 1]; i++) {
				if (an_x[i] > n_x_dc_max) {
 8001d44:	4abe      	ldr	r2, [pc, #760]	; (8002040 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001d46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001d52:	429a      	cmp	r2, r3
 8001d54:	da0a      	bge.n	8001d6c <maxim_heart_rate_and_oxygen_saturation+0x750>
					n_x_dc_max = an_x[i];
 8001d56:	4aba      	ldr	r2, [pc, #744]	; (8002040 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001d58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					n_x_dc_max_idx = i;
 8001d64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
				}
				if (an_y[i] > n_y_dc_max) {
 8001d6c:	4ab5      	ldr	r2, [pc, #724]	; (8002044 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001d6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	da0a      	bge.n	8001d94 <maxim_heart_rate_and_oxygen_saturation+0x778>
					n_y_dc_max = an_y[i];
 8001d7e:	4ab1      	ldr	r2, [pc, #708]	; (8002044 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001d80:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					n_y_dc_max_idx = i;
 8001d8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
					i < an_exact_ir_valley_locs[k + 1]; i++) {
 8001d94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001da2:	3301      	adds	r3, #1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001daa:	443b      	add	r3, r7
 8001dac:	f853 3cd8 	ldr.w	r3, [r3, #-216]
			for (i = an_exact_ir_valley_locs[k];
 8001db0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbc5      	blt.n	8001d44 <maxim_heart_rate_and_oxygen_saturation+0x728>
				}
			}
			n_y_ac = (an_y[an_exact_ir_valley_locs[k + 1]]
 8001db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001dc4:	443b      	add	r3, r7
 8001dc6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001dca:	4a9e      	ldr	r2, [pc, #632]	; (8002044 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001dcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					- an_y[an_exact_ir_valley_locs[k]])
 8001dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001dda:	443b      	add	r3, r7
 8001ddc:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001de0:	4998      	ldr	r1, [pc, #608]	; (8002044 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001de2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001de6:	1ad2      	subs	r2, r2, r3
					* (n_y_dc_max_idx - an_exact_ir_valley_locs[k]); //red
 8001de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001df2:	443b      	add	r3, r7
 8001df4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001df8:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001dfc:	1acb      	subs	r3, r1, r3
			n_y_ac = (an_y[an_exact_ir_valley_locs[k + 1]]
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			n_y_ac = an_y[an_exact_ir_valley_locs[k]]
 8001e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e10:	443b      	add	r3, r7
 8001e12:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001e16:	4a8b      	ldr	r2, [pc, #556]	; (8002044 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001e18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					+ n_y_ac
							/ (an_exact_ir_valley_locs[k + 1]
 8001e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e20:	3301      	adds	r3, #1
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e28:	443b      	add	r3, r7
 8001e2a:	f853 1cd8 	ldr.w	r1, [r3, #-216]
									- an_exact_ir_valley_locs[k]);
 8001e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e38:	443b      	add	r3, r7
 8001e3a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001e3e:	1acb      	subs	r3, r1, r3
							/ (an_exact_ir_valley_locs[k + 1]
 8001e40:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001e44:	fb91 f3f3 	sdiv	r3, r1, r3
			n_y_ac = an_y[an_exact_ir_valley_locs[k]]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

			n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac; // subracting linear DC compoenents from raw 
 8001e4e:	4a7d      	ldr	r2, [pc, #500]	; (8002044 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8001e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001e54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			n_x_ac = (an_x[an_exact_ir_valley_locs[k + 1]]
 8001e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e66:	3301      	adds	r3, #1
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e6e:	443b      	add	r3, r7
 8001e70:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001e74:	4a72      	ldr	r2, [pc, #456]	; (8002040 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001e76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					- an_x[an_exact_ir_valley_locs[k]])
 8001e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e84:	443b      	add	r3, r7
 8001e86:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001e8a:	496d      	ldr	r1, [pc, #436]	; (8002040 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001e8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e90:	1ad2      	subs	r2, r2, r3
					* (n_x_dc_max_idx - an_exact_ir_valley_locs[k]); // ir
 8001e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e9c:	443b      	add	r3, r7
 8001e9e:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001ea2:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001ea6:	1acb      	subs	r3, r1, r3
			n_x_ac = (an_x[an_exact_ir_valley_locs[k + 1]]
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			n_x_ac = an_x[an_exact_ir_valley_locs[k]]
 8001eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001eba:	443b      	add	r3, r7
 8001ebc:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001ec0:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001ec2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					+ n_x_ac
							/ (an_exact_ir_valley_locs[k + 1]
 8001ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001eca:	3301      	adds	r3, #1
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ed2:	443b      	add	r3, r7
 8001ed4:	f853 1cd8 	ldr.w	r1, [r3, #-216]
									- an_exact_ir_valley_locs[k]);
 8001ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ee2:	443b      	add	r3, r7
 8001ee4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8001ee8:	1acb      	subs	r3, r1, r3
							/ (an_exact_ir_valley_locs[k + 1]
 8001eea:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001eee:	fb91 f3f3 	sdiv	r3, r1, r3
			n_x_ac = an_x[an_exact_ir_valley_locs[k]]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subracting linear DC compoenents from raw 
 8001ef8:	4a51      	ldr	r2, [pc, #324]	; (8002040 <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8001efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			n_nume = (n_y_ac * n_x_dc_max) >> 7; //prepare X100 to preserve floating value
 8001f0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f10:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	11db      	asrs	r3, r3, #7
 8001f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			n_denom = (n_x_ac * n_y_dc_max) >> 7;
 8001f1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001f22:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	11db      	asrs	r3, r3, #7
 8001f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0) {
 8001f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	dd1d      	ble.n	8001f74 <maxim_heart_rate_and_oxygen_saturation+0x958>
 8001f38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	dc19      	bgt.n	8001f74 <maxim_heart_rate_and_oxygen_saturation+0x958>
 8001f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <maxim_heart_rate_and_oxygen_saturation+0x958>
				an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8001f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f4c:	2264      	movs	r2, #100	; 0x64
 8001f4e:	fb03 f202 	mul.w	r2, r3, r2
 8001f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f56:	fb92 f1f3 	sdiv	r1, r2, r3
 8001f5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001f5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f62:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				n_i_ratio_count++;
 8001f6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++) {
 8001f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f6ff aeaa 	blt.w	8001ce2 <maxim_heart_rate_and_oxygen_saturation+0x6c6>
			}
		}
	}

	maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f94f 	bl	800223a <maxim_sort_ascend>
	n_middle_idx = n_i_ratio_count / 2;
 8001f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fa0:	0fda      	lsrs	r2, r3, #31
 8001fa2:	4413      	add	r3, r2
 8001fa4:	105b      	asrs	r3, r3, #1
 8001fa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	if (n_middle_idx > 1)
 8001faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	dd17      	ble.n	8001fe2 <maxim_heart_rate_and_oxygen_saturation+0x9c6>
		n_ratio_average = (an_ratio[n_middle_idx - 1] + an_ratio[n_middle_idx])
 8001fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb6:	1e5a      	subs	r2, r3, #1
 8001fb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001fbc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001fc8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fcc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001fd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	0fda      	lsrs	r2, r3, #31
 8001fd8:	4413      	add	r3, r2
 8001fda:	105b      	asrs	r3, r3, #1
 8001fdc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001fe0:	e009      	b.n	8001ff6 <maxim_heart_rate_and_oxygen_saturation+0x9da>
				/ 2; // use median
	else
		n_ratio_average = an_ratio[n_middle_idx];
 8001fe2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001fe6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	if (n_ratio_average > 2 && n_ratio_average < 184) {
 8001ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	dd14      	ble.n	8002028 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
 8001ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002002:	2bb7      	cmp	r3, #183	; 0xb7
 8002004:	dc10      	bgt.n	8002028 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
		n_spo2_calc = uch_spo2_table[n_ratio_average];
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <maxim_heart_rate_and_oxygen_saturation+0xa2c>)
 8002008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800200c:	4413      	add	r3, r2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		*pn_spo2 = n_spo2_calc;
 8002014:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002018:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800201c:	601a      	str	r2, [r3, #0]
		*pch_spo2_valid = 1; //  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 800201e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e007      	b.n	8002038 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
	} else {
		*pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
 8002028:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <maxim_heart_rate_and_oxygen_saturation+0xa30>)
 800202e:	601a      	str	r2, [r3, #0]
		*pch_spo2_valid = 0;
 8002030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
	}
}
 8002038:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	20001b38 	.word	0x20001b38
 8002044:	20002308 	.word	0x20002308
 8002048:	0800bc04 	.word	0x0800bc04
 800204c:	fffffc19 	.word	0xfffffc19

08002050 <maxim_find_peaks>:
 * \par          Details
 *               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
 *
 * \retval       None
 */
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
	maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f812 	bl	8002092 <maxim_peaks_above_min_height>
	maxim_remove_close_peaks(pn_locs, pn_npks, pn_x, n_min_distance);
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f880 	bl	800217a <maxim_remove_close_peaks>
	*pn_npks = min(*pn_npks, n_max_num);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	429a      	cmp	r2, r3
 8002082:	bfa8      	it	ge
 8002084:	461a      	movge	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <maxim_peaks_above_min_height>:
 * \par          Details
 *               Find all peaks above MIN_HEIGHT
 *
 * \retval       None
 */
{
 8002092:	b480      	push	{r7}
 8002094:	b087      	sub	sp, #28
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
	int32_t i = 1, n_width;
 80020a0:	2301      	movs	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
	*pn_npks = 0;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

	while (i < n_size - 1) {
 80020aa:	e05a      	b.n	8002162 <maxim_peaks_above_min_height+0xd0>
		if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i - 1]) { // find left edge of potential peaks
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a3a      	ldr	r2, [r7, #32]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	da4f      	bge.n	800215c <maxim_peaks_above_min_height+0xca>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020cc:	3b01      	subs	r3, #1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	440b      	add	r3, r1
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dd40      	ble.n	800215c <maxim_peaks_above_min_height+0xca>
			n_width = 1;
 80020da:	2301      	movs	r3, #1
 80020dc:	613b      	str	r3, [r7, #16]
			while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width]) // find flat peaks
 80020de:	e002      	b.n	80020e6 <maxim_peaks_above_min_height+0x54>
				n_width++;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3301      	adds	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
			while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width]) // find flat peaks
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dd0d      	ble.n	800210e <maxim_peaks_above_min_height+0x7c>
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	6979      	ldr	r1, [r7, #20]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	440b      	add	r3, r1
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	440b      	add	r3, r1
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d0e8      	beq.n	80020e0 <maxim_peaks_above_min_height+0x4e>
			if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15) { // find right edge of peaks
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	6979      	ldr	r1, [r7, #20]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	440b      	add	r3, r1
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	440b      	add	r3, r1
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	dd13      	ble.n	8002152 <maxim_peaks_above_min_height+0xc0>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b0e      	cmp	r3, #14
 8002130:	dc0f      	bgt.n	8002152 <maxim_peaks_above_min_height+0xc0>
				pn_locs[(*pn_npks)++] = i;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1c59      	adds	r1, r3, #1
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	6011      	str	r1, [r2, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4413      	add	r3, r2
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	601a      	str	r2, [r3, #0]
				// for flat peaks, peak location is left edge
				i += n_width + 1;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	3301      	adds	r3, #1
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4413      	add	r3, r2
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e003      	b.n	800215a <maxim_peaks_above_min_height+0xc8>
			} else
				i += n_width;
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
			if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15) { // find right edge of peaks
 800215a:	e002      	b.n	8002162 <maxim_peaks_above_min_height+0xd0>
		} else
			i++;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3301      	adds	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
	while (i < n_size - 1) {
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	3b01      	subs	r3, #1
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	db9f      	blt.n	80020ac <maxim_peaks_above_min_height+0x1a>
	}
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <maxim_remove_close_peaks>:
 * \par          Details
 *               Remove peaks separated by less than MIN_DISTANCE
 *
 * \retval       None
 */
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b088      	sub	sp, #32
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]

	int32_t i, j, n_old_npks, n_dist;

	/* Order peaks from large to small */
	maxim_sort_indices_descend(pn_x, pn_locs, *pn_npks);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f895 	bl	80022c0 <maxim_sort_indices_descend>

	for (i = -1; i < *pn_npks; i++) {
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	e03e      	b.n	800221c <maxim_remove_close_peaks+0xa2>
		n_old_npks = *pn_npks;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]
		*pn_npks = i + 1;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	601a      	str	r2, [r3, #0]
		for (j = i + 1; j < n_old_npks; j++) {
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	3301      	adds	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	e02c      	b.n	800220e <maxim_remove_close_peaks+0x94>
			n_dist = pn_locs[j] - (i == -1 ? -1 : pn_locs[i]); // lag-zero peak of autocorr is at index -1
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d005      	beq.n	80021d2 <maxim_remove_close_peaks+0x58>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	440b      	add	r3, r1
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	e001      	b.n	80021d6 <maxim_remove_close_peaks+0x5c>
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	613b      	str	r3, [r7, #16]
			if (n_dist > n_min_distance || n_dist < -n_min_distance)
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	dc04      	bgt.n	80021ec <maxim_remove_close_peaks+0x72>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	425b      	negs	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	da0d      	bge.n	8002208 <maxim_remove_close_peaks+0x8e>
				pn_locs[(*pn_npks)++] = pn_locs[j];
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	441a      	add	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	1c58      	adds	r0, r3, #1
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	6008      	str	r0, [r1, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	68f9      	ldr	r1, [r7, #12]
 8002202:	440b      	add	r3, r1
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	601a      	str	r2, [r3, #0]
		for (j = i + 1; j < n_old_npks; j++) {
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	3301      	adds	r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	429a      	cmp	r2, r3
 8002214:	dbce      	blt.n	80021b4 <maxim_remove_close_peaks+0x3a>
	for (i = -1; i < *pn_npks; i++) {
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	429a      	cmp	r2, r3
 8002224:	dbbb      	blt.n	800219e <maxim_remove_close_peaks+0x24>
		}
	}

	// Resort indices longo ascending order
	maxim_sort_ascend(pn_locs, *pn_npks);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4619      	mov	r1, r3
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f804 	bl	800223a <maxim_sort_ascend>
}
 8002232:	bf00      	nop
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <maxim_sort_ascend>:
 * \par          Details
 *               Sort array in ascending order (insertion sort algorithm)
 *
 * \retval       None
 */
{
 800223a:	b480      	push	{r7}
 800223c:	b087      	sub	sp, #28
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
	int32_t i, j, n_temp;
	for (i = 1; i < n_size; i++) {
 8002244:	2301      	movs	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e02f      	b.n	80022aa <maxim_sort_ascend+0x70>
		n_temp = pn_x[i];
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
		for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e00f      	b.n	800227c <maxim_sort_ascend+0x42>
			pn_x[j] = pn_x[j - 1];
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002262:	3b01      	subs	r3, #1
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	441a      	add	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	440b      	add	r3, r1
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	601a      	str	r2, [r3, #0]
		for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3b01      	subs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	dd0a      	ble.n	8002298 <maxim_sort_ascend+0x5e>
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002288:	3b01      	subs	r3, #1
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbe1      	blt.n	800225c <maxim_sort_ascend+0x22>
		pn_x[j] = n_temp;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]
	for (i = 1; i < n_size; i++) {
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3301      	adds	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	dbcb      	blt.n	800224a <maxim_sort_ascend+0x10>
	}
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <maxim_sort_indices_descend>:
 * \par          Details
 *               Sort indices according to descending order (insertion sort algorithm)
 *
 * \retval       None
 */
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
	int32_t i, j, n_temp;
	for (i = 1; i < n_size; i++) {
 80022cc:	2301      	movs	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	e037      	b.n	8002342 <maxim_sort_indices_descend+0x82>
		n_temp = pn_indx[i];
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	617b      	str	r3, [r7, #20]
		for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	e00f      	b.n	8002304 <maxim_sort_indices_descend+0x44>
			pn_indx[j] = pn_indx[j - 1];
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ea:	3b01      	subs	r3, #1
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	441a      	add	r2, r3
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	440b      	add	r3, r1
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	601a      	str	r2, [r3, #0]
		for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	3b01      	subs	r3, #1
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	dd12      	ble.n	8002330 <maxim_sort_indices_descend+0x70>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4413      	add	r3, r2
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800231a:	3b01      	subs	r3, #1
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	440b      	add	r3, r1
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	440b      	add	r3, r1
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	dcd9      	bgt.n	80022e4 <maxim_sort_indices_descend+0x24>
		pn_indx[j] = n_temp;
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4413      	add	r3, r2
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]
	for (i = 1; i < n_size; i++) {
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	3301      	adds	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	dbc3      	blt.n	80022d2 <maxim_sort_indices_descend+0x12>
	}
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	3724      	adds	r7, #36	; 0x24
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <UART2_SendString>:
float temp_Celsius = 0;
float Humidity = 0;
uint8_t hum_integral, hum_decimal, tempC_integral, tempC_decimal;
uint8_t avgWeatherTemp;

void UART2_SendString(char *s) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7fd ff3d 	bl	80001e0 <strlen>
 8002366:	4603      	mov	r3, r0
 8002368:	b29a      	uxth	r2, r3
 800236a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <UART2_SendString+0x28>)
 8002372:	f005 fb90 	bl	8007a96 <HAL_UART_Transmit>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20002bc8 	.word	0x20002bc8

08002384 <microDelay>:

void microDelay(uint16_t delay) {
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <microDelay+0x30>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < delay)
 8002396:	bf00      	nop
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <microDelay+0x30>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3f9      	bcc.n	8002398 <microDelay+0x14>
		;
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20002b80 	.word	0x20002b80

080023b8 <DHT22_Start>:

uint8_t DHT22_Start(void) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 80023c2:	463b      	mov	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
	GPIO_InitStructPrivate.Pin = DHT22_PIN;
 80023d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023d4:	603b      	str	r3, [r7, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate);
 80023e2:	463b      	mov	r3, r7
 80023e4:	4619      	mov	r1, r3
 80023e6:	482d      	ldr	r0, [pc, #180]	; (800249c <DHT22_Start+0xe4>)
 80023e8:	f001 fb36 	bl	8003a58 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023f2:	482a      	ldr	r0, [pc, #168]	; (800249c <DHT22_Start+0xe4>)
 80023f4:	f001 fccc 	bl	8003d90 <HAL_GPIO_WritePin>
	microDelay(1300);
 80023f8:	f240 5014 	movw	r0, #1300	; 0x514
 80023fc:	f7ff ffc2 	bl	8002384 <microDelay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);
 8002400:	2201      	movs	r2, #1
 8002402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002406:	4825      	ldr	r0, [pc, #148]	; (800249c <DHT22_Start+0xe4>)
 8002408:	f001 fcc2 	bl	8003d90 <HAL_GPIO_WritePin>
	microDelay(30);
 800240c:	201e      	movs	r0, #30
 800240e:	f7ff ffb9 	bl	8002384 <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8002416:	2301      	movs	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate);
 800241a:	463b      	mov	r3, r7
 800241c:	4619      	mov	r1, r3
 800241e:	481f      	ldr	r0, [pc, #124]	; (800249c <DHT22_Start+0xe4>)
 8002420:	f001 fb1a 	bl	8003a58 <HAL_GPIO_Init>
	microDelay(40);
 8002424:	2028      	movs	r0, #40	; 0x28
 8002426:	f7ff ffad 	bl	8002384 <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 800242a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800242e:	481b      	ldr	r0, [pc, #108]	; (800249c <DHT22_Start+0xe4>)
 8002430:	f001 fc96 	bl	8003d60 <HAL_GPIO_ReadPin>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <DHT22_Start+0x9c>
		microDelay(80);
 800243a:	2050      	movs	r0, #80	; 0x50
 800243c:	f7ff ffa2 	bl	8002384 <microDelay>
		if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 8002440:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002444:	4815      	ldr	r0, [pc, #84]	; (800249c <DHT22_Start+0xe4>)
 8002446:	f001 fc8b 	bl	8003d60 <HAL_GPIO_ReadPin>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <DHT22_Start+0x9c>
			Response = 1;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 8002454:	f001 f9be 	bl	80037d4 <HAL_GetTick>
 8002458:	4603      	mov	r3, r0
 800245a:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <DHT22_Start+0xe8>)
 800245c:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 800245e:	f001 f9b9 	bl	80037d4 <HAL_GetTick>
 8002462:	4603      	mov	r3, r0
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <DHT22_Start+0xec>)
 8002466:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8002468:	e004      	b.n	8002474 <DHT22_Start+0xbc>
		cMillis = HAL_GetTick();
 800246a:	f001 f9b3 	bl	80037d4 <HAL_GetTick>
 800246e:	4603      	mov	r3, r0
 8002470:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <DHT22_Start+0xec>)
 8002472:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8002474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <DHT22_Start+0xe4>)
 800247a:	f001 fc71 	bl	8003d60 <HAL_GPIO_ReadPin>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d006      	beq.n	8002492 <DHT22_Start+0xda>
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <DHT22_Start+0xe8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	1c9a      	adds	r2, r3, #2
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <DHT22_Start+0xec>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d8eb      	bhi.n	800246a <DHT22_Start+0xb2>
	}
	return Response;
 8002492:	7dfb      	ldrb	r3, [r7, #23]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40020400 	.word	0x40020400
 80024a0:	20002ce0 	.word	0x20002ce0
 80024a4:	20002ce4 	.word	0x20002ce4

080024a8 <DHT22_Read>:

uint8_t DHT22_Read(void) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
	uint8_t x, y;
	for (x = 0; x < 8; x++) {
 80024ae:	2300      	movs	r3, #0
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	e066      	b.n	8002582 <DHT22_Read+0xda>
		pMillis = HAL_GetTick();
 80024b4:	f001 f98e 	bl	80037d4 <HAL_GetTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a36      	ldr	r2, [pc, #216]	; (8002594 <DHT22_Read+0xec>)
 80024bc:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 80024be:	f001 f989 	bl	80037d4 <HAL_GetTick>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a34      	ldr	r2, [pc, #208]	; (8002598 <DHT22_Read+0xf0>)
 80024c6:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 80024c8:	e004      	b.n	80024d4 <DHT22_Read+0x2c>
				&& pMillis + 2 > cMillis) {
			cMillis = HAL_GetTick();
 80024ca:	f001 f983 	bl	80037d4 <HAL_GetTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a31      	ldr	r2, [pc, #196]	; (8002598 <DHT22_Read+0xf0>)
 80024d2:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 80024d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024d8:	4830      	ldr	r0, [pc, #192]	; (800259c <DHT22_Read+0xf4>)
 80024da:	f001 fc41 	bl	8003d60 <HAL_GPIO_ReadPin>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <DHT22_Read+0x4a>
				&& pMillis + 2 > cMillis) {
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <DHT22_Read+0xec>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	1c9a      	adds	r2, r3, #2
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <DHT22_Read+0xf0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d8eb      	bhi.n	80024ca <DHT22_Read+0x22>
		}
		microDelay(40);
 80024f2:	2028      	movs	r0, #40	; 0x28
 80024f4:	f7ff ff46 	bl	8002384 <microDelay>
		if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80024f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024fc:	4827      	ldr	r0, [pc, #156]	; (800259c <DHT22_Read+0xf4>)
 80024fe:	f001 fc2f 	bl	8003d60 <HAL_GPIO_ReadPin>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10e      	bne.n	8002526 <DHT22_Read+0x7e>
			y &= ~(1 << (7 - x));
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2201      	movs	r2, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	b25b      	sxtb	r3, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	b25a      	sxtb	r2, r3
 800251a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800251e:	4013      	ands	r3, r2
 8002520:	b25b      	sxtb	r3, r3
 8002522:	71bb      	strb	r3, [r7, #6]
 8002524:	e00b      	b.n	800253e <DHT22_Read+0x96>
		else
			y |= (1 << (7 - x));
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f1c3 0307 	rsb	r3, r3, #7
 800252c:	2201      	movs	r2, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	b25a      	sxtb	r2, r3
 8002534:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002538:	4313      	orrs	r3, r2
 800253a:	b25b      	sxtb	r3, r3
 800253c:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 800253e:	f001 f949 	bl	80037d4 <HAL_GetTick>
 8002542:	4603      	mov	r3, r0
 8002544:	4a13      	ldr	r2, [pc, #76]	; (8002594 <DHT22_Read+0xec>)
 8002546:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8002548:	f001 f944 	bl	80037d4 <HAL_GetTick>
 800254c:	4603      	mov	r3, r0
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <DHT22_Read+0xf0>)
 8002550:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8002552:	e004      	b.n	800255e <DHT22_Read+0xb6>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
			cMillis = HAL_GetTick();
 8002554:	f001 f93e 	bl	80037d4 <HAL_GetTick>
 8002558:	4603      	mov	r3, r0
 800255a:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <DHT22_Read+0xf0>)
 800255c:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 800255e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002562:	480e      	ldr	r0, [pc, #56]	; (800259c <DHT22_Read+0xf4>)
 8002564:	f001 fbfc 	bl	8003d60 <HAL_GPIO_ReadPin>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <DHT22_Read+0xd4>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <DHT22_Read+0xec>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	1c9a      	adds	r2, r3, #2
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <DHT22_Read+0xf0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8eb      	bhi.n	8002554 <DHT22_Read+0xac>
	for (x = 0; x < 8; x++) {
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	3301      	adds	r3, #1
 8002580:	71fb      	strb	r3, [r7, #7]
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	2b07      	cmp	r3, #7
 8002586:	d995      	bls.n	80024b4 <DHT22_Read+0xc>
		}
	}
	return y;
 8002588:	79bb      	ldrb	r3, [r7, #6]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20002ce0 	.word	0x20002ce0
 8002598:	20002ce4 	.word	0x20002ce4
 800259c:	40020400 	.word	0x40020400

080025a0 <UART6_SendData>:

void UART6_SendData(char *s) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	switch (state) {
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <UART6_SendData+0x88>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d01f      	beq.n	80025f0 <UART6_SendData+0x50>
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	dc35      	bgt.n	8002620 <UART6_SendData+0x80>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <UART6_SendData+0x1e>
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d00c      	beq.n	80025d6 <UART6_SendData+0x36>
 80025bc:	e030      	b.n	8002620 <UART6_SendData+0x80>
	case BEGIN:
		//osMessageQueuePut(myQueue01Handle,s, 0U, 0U);
		//HAL_UART_Transmit(&huart6, (uint8_t*) UartBuffer, strlen(UartBuffer), 1000);
		//HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
		//UART2_SendString("BEGIN");
		if (GetIsFingerOnScreen())
 80025be:	f7fe faf7 	bl	8000bb0 <GetIsFingerOnScreen>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <UART6_SendData+0x2e>
			state = CALCULATE;
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <UART6_SendData+0x88>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
		timecount = 0;
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <UART6_SendData+0x8c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
		return;
 80025d4:	e024      	b.n	8002620 <UART6_SendData+0x80>
	case CALCULATE:
		timecount += 1;
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <UART6_SendData+0x8c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3301      	adds	r3, #1
 80025dc:	4a13      	ldr	r2, [pc, #76]	; (800262c <UART6_SendData+0x8c>)
 80025de:	6013      	str	r3, [r2, #0]
		if (timecount > 10)
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <UART6_SendData+0x8c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b0a      	cmp	r3, #10
 80025e6:	dd18      	ble.n	800261a <UART6_SendData+0x7a>
			state = SEND;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <UART6_SendData+0x88>)
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
		return;
 80025ee:	e014      	b.n	800261a <UART6_SendData+0x7a>
	case SEND:
		osMessageQueuePut(myQueue01Handle, s, 0U, 0U);
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <UART6_SendData+0x90>)
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	2200      	movs	r2, #0
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	f005 ff6f 	bl	80084dc <osMessageQueuePut>
		//UART2_SendString(s);
		//HAL_UART_Transmit(&huart6, (uint8_t*) UartBuffer, strlen(UartBuffer), 1000);
		timecount += 1;
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <UART6_SendData+0x8c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3301      	adds	r3, #1
 8002604:	4a09      	ldr	r2, [pc, #36]	; (800262c <UART6_SendData+0x8c>)
 8002606:	6013      	str	r3, [r2, #0]
		if (!GetIsFingerOnScreen()) {
 8002608:	f7fe fad2 	bl	8000bb0 <GetIsFingerOnScreen>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <UART6_SendData+0x7e>
			state = BEGIN;
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <UART6_SendData+0x88>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
		}
		//HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), 1000);
		return;
 8002618:	e001      	b.n	800261e <UART6_SendData+0x7e>
		return;
 800261a:	bf00      	nop
 800261c:	e000      	b.n	8002620 <UART6_SendData+0x80>
		return;
 800261e:	bf00      	nop
	}
}
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20002cd8 	.word	0x20002cd8
 800262c:	20002cd4 	.word	0x20002cd4
 8002630:	20002c60 	.word	0x20002c60

08002634 <UART6_SendData_Temp>:

void UART6_SendData_Temp(char *s) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	//UART2_SendString(s);
	osMessageQueuePut(myQueue01Handle, s, 0U, 0U);
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <UART6_SendData_Temp+0x20>)
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	2300      	movs	r3, #0
 8002642:	2200      	movs	r2, #0
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	f005 ff49 	bl	80084dc <osMessageQueuePut>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20002c60 	.word	0x20002c60

08002658 <UART6_SendData_Temp1>:

void UART6_SendData_Temp1(char *s) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	//UART2_SendString(s);
	osMessageQueuePut(myQueue01Handle, s, 0U, 0U);
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <UART6_SendData_Temp1+0x20>)
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	2300      	movs	r3, #0
 8002666:	2200      	movs	r2, #0
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	f005 ff37 	bl	80084dc <osMessageQueuePut>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20002c60 	.word	0x20002c60

0800267c <ReadDHT22>:

void ReadDHT22() {
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
	if (DHT22_Start()) {
 8002682:	f7ff fe99 	bl	80023b8 <DHT22_Start>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8111 	beq.w	80028b0 <ReadDHT22+0x234>
		hum1 = DHT22_Read();
 800268e:	f7ff ff0b 	bl	80024a8 <DHT22_Read>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <ReadDHT22+0x23c>)
 8002698:	701a      	strb	r2, [r3, #0]
		hum2 = DHT22_Read();
 800269a:	f7ff ff05 	bl	80024a8 <DHT22_Read>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b86      	ldr	r3, [pc, #536]	; (80028bc <ReadDHT22+0x240>)
 80026a4:	701a      	strb	r2, [r3, #0]
		tempC1 = DHT22_Read();
 80026a6:	f7ff feff 	bl	80024a8 <DHT22_Read>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b84      	ldr	r3, [pc, #528]	; (80028c0 <ReadDHT22+0x244>)
 80026b0:	701a      	strb	r2, [r3, #0]
		tempC2 = DHT22_Read();
 80026b2:	f7ff fef9 	bl	80024a8 <DHT22_Read>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b82      	ldr	r3, [pc, #520]	; (80028c4 <ReadDHT22+0x248>)
 80026bc:	701a      	strb	r2, [r3, #0]
		SUM = DHT22_Read();
 80026be:	f7ff fef3 	bl	80024a8 <DHT22_Read>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b80      	ldr	r3, [pc, #512]	; (80028c8 <ReadDHT22+0x24c>)
 80026c8:	701a      	strb	r2, [r3, #0]
		CHECK = hum1 + hum2 + tempC1 + tempC2;
 80026ca:	4b7b      	ldr	r3, [pc, #492]	; (80028b8 <ReadDHT22+0x23c>)
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <ReadDHT22+0x240>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b7a      	ldr	r3, [pc, #488]	; (80028c0 <ReadDHT22+0x244>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b79      	ldr	r3, [pc, #484]	; (80028c4 <ReadDHT22+0x248>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b79      	ldr	r3, [pc, #484]	; (80028cc <ReadDHT22+0x250>)
 80026e8:	701a      	strb	r2, [r3, #0]
		if (CHECK == SUM) {
 80026ea:	4b78      	ldr	r3, [pc, #480]	; (80028cc <ReadDHT22+0x250>)
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	4b76      	ldr	r3, [pc, #472]	; (80028c8 <ReadDHT22+0x24c>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	f040 80dc 	bne.w	80028b0 <ReadDHT22+0x234>
			if (tempC1 > 127) {
 80026f8:	4b71      	ldr	r3, [pc, #452]	; (80028c0 <ReadDHT22+0x244>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b25b      	sxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da0f      	bge.n	8002722 <ReadDHT22+0xa6>
				temp_Celsius = (float) tempC2 / 10 * (-1);
 8002702:	4b70      	ldr	r3, [pc, #448]	; (80028c4 <ReadDHT22+0x248>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800270e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002716:	eef1 7a67 	vneg.f32	s15, s15
 800271a:	4b6d      	ldr	r3, [pc, #436]	; (80028d0 <ReadDHT22+0x254>)
 800271c:	edc3 7a00 	vstr	s15, [r3]
 8002720:	e010      	b.n	8002744 <ReadDHT22+0xc8>
			} else {
				temp_Celsius = (float) ((tempC1 << 8) | tempC2) / 10;
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <ReadDHT22+0x244>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <ReadDHT22+0x248>)
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002736:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800273a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800273e:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <ReadDHT22+0x254>)
 8002740:	edc3 7a00 	vstr	s15, [r3]
			}
			if (temp_Celsius < 0) {
 8002744:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <ReadDHT22+0x254>)
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	d529      	bpl.n	80027a8 <ReadDHT22+0x12c>
				tempC_integral = temp_Celsius * (-1);
 8002754:	4b5e      	ldr	r3, [pc, #376]	; (80028d0 <ReadDHT22+0x254>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	eef1 7a67 	vneg.f32	s15, s15
 800275e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002762:	edc7 7a01 	vstr	s15, [r7, #4]
 8002766:	793b      	ldrb	r3, [r7, #4]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <ReadDHT22+0x258>)
 800276c:	701a      	strb	r2, [r3, #0]
				tempC_decimal = temp_Celsius * (-10) - tempC_integral * 10;
 800276e:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <ReadDHT22+0x254>)
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8002778:	ee27 7a87 	vmul.f32	s14, s15, s14
 800277c:	4b55      	ldr	r3, [pc, #340]	; (80028d4 <ReadDHT22+0x258>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800279a:	edc7 7a01 	vstr	s15, [r7, #4]
 800279e:	793b      	ldrb	r3, [r7, #4]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b4d      	ldr	r3, [pc, #308]	; (80028d8 <ReadDHT22+0x25c>)
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e026      	b.n	80027f6 <ReadDHT22+0x17a>
			} else {
				tempC_integral = temp_Celsius;
 80027a8:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <ReadDHT22+0x254>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80027b6:	793b      	ldrb	r3, [r7, #4]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <ReadDHT22+0x258>)
 80027bc:	701a      	strb	r2, [r3, #0]
				tempC_decimal = temp_Celsius * 10 - tempC_integral * 10;
 80027be:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <ReadDHT22+0x254>)
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027cc:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <ReadDHT22+0x258>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80027ee:	793b      	ldrb	r3, [r7, #4]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <ReadDHT22+0x25c>)
 80027f4:	701a      	strb	r2, [r3, #0]
			}
			if (avgWeatherTemp == 0) {
 80027f6:	4b39      	ldr	r3, [pc, #228]	; (80028dc <ReadDHT22+0x260>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <ReadDHT22+0x194>
				avgWeatherTemp += tempC_integral;
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <ReadDHT22+0x260>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <ReadDHT22+0x258>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <ReadDHT22+0x260>)
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e00d      	b.n	800282c <ReadDHT22+0x1b0>
			} else {
				avgWeatherTemp += tempC_integral;
 8002810:	4b32      	ldr	r3, [pc, #200]	; (80028dc <ReadDHT22+0x260>)
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <ReadDHT22+0x258>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	4413      	add	r3, r2
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <ReadDHT22+0x260>)
 800281e:	701a      	strb	r2, [r3, #0]
				avgWeatherTemp /= 2;
 8002820:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <ReadDHT22+0x260>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <ReadDHT22+0x260>)
 800282a:	701a      	strb	r2, [r3, #0]
			}
			Humidity = (float) ((hum1 << 8) | hum2) / 10;
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <ReadDHT22+0x23c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	4a22      	ldr	r2, [pc, #136]	; (80028bc <ReadDHT22+0x240>)
 8002834:	7812      	ldrb	r2, [r2, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002840:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002844:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <ReadDHT22+0x264>)
 800284a:	edc3 7a00 	vstr	s15, [r3]
			hum_integral = Humidity;
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <ReadDHT22+0x264>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002858:	edc7 7a01 	vstr	s15, [r7, #4]
 800285c:	793b      	ldrb	r3, [r7, #4]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <ReadDHT22+0x268>)
 8002862:	701a      	strb	r2, [r3, #0]
			hum_decimal = Humidity * 10 - hum_integral * 10;
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <ReadDHT22+0x264>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800286e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <ReadDHT22+0x268>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002890:	edc7 7a01 	vstr	s15, [r7, #4]
 8002894:	793b      	ldrb	r3, [r7, #4]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <ReadDHT22+0x26c>)
 800289a:	701a      	strb	r2, [r3, #0]
			sprintf(UartBuffer, "humidity: %d\n\r", hum_integral);
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <ReadDHT22+0x268>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4912      	ldr	r1, [pc, #72]	; (80028ec <ReadDHT22+0x270>)
 80028a4:	4812      	ldr	r0, [pc, #72]	; (80028f0 <ReadDHT22+0x274>)
 80028a6:	f008 fd61 	bl	800b36c <siprintf>
			UART6_SendData_Temp(UartBuffer);
 80028aa:	4811      	ldr	r0, [pc, #68]	; (80028f0 <ReadDHT22+0x274>)
 80028ac:	f7ff fec2 	bl	8002634 <UART6_SendData_Temp>
		}
	}
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20002cd9 	.word	0x20002cd9
 80028bc:	20002cda 	.word	0x20002cda
 80028c0:	20002cdb 	.word	0x20002cdb
 80028c4:	20002cdc 	.word	0x20002cdc
 80028c8:	20002cdd 	.word	0x20002cdd
 80028cc:	20002cde 	.word	0x20002cde
 80028d0:	20002ce8 	.word	0x20002ce8
 80028d4:	20002cf2 	.word	0x20002cf2
 80028d8:	20002cf3 	.word	0x20002cf3
 80028dc:	20002cf4 	.word	0x20002cf4
 80028e0:	20002cec 	.word	0x20002cec
 80028e4:	20002cf0 	.word	0x20002cf0
 80028e8:	20002cf1 	.word	0x20002cf1
 80028ec:	0800bb34 	.word	0x0800bb34
 80028f0:	20002c64 	.word	0x20002c64

080028f4 <ReadHR>:
void ReadHR() {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	; 0x30
 80028f8:	af00      	add	r7, sp, #0
	char UartBufferTmp[32];
	Max30102_Task();
 80028fa:	f7fe fd43 	bl	8001384 <Max30102_Task>
	int32_t HeartRate = Max30102_GetHeartRate();
 80028fe:	f7fe fd35 	bl	800136c <Max30102_GetHeartRate>
 8002902:	6278      	str	r0, [r7, #36]	; 0x24
	if (HeartRate < 255 && HeartRate > 20) {
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	2bfe      	cmp	r3, #254	; 0xfe
 8002908:	dc1c      	bgt.n	8002944 <ReadHR+0x50>
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	2b14      	cmp	r3, #20
 800290e:	dd19      	ble.n	8002944 <ReadHR+0x50>
		rates[rateIndex++] = HeartRate;
 8002910:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <ReadHR+0xd4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	492c      	ldr	r1, [pc, #176]	; (80029c8 <ReadHR+0xd4>)
 8002918:	600a      	str	r2, [r1, #0]
 800291a:	492c      	ldr	r1, [pc, #176]	; (80029cc <ReadHR+0xd8>)
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		rateIndex %= RATE_SIZE;
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <ReadHR+0xd4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <ReadHR+0xdc>)
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	fb93 f1f2 	sdiv	r1, r3, r2
 800292e:	fb01 f202 	mul.w	r2, r1, r2
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	4a24      	ldr	r2, [pc, #144]	; (80029c8 <ReadHR+0xd4>)
 8002936:	6013      	str	r3, [r2, #0]
		//UART2_SendString("valid state \n");
		count++;
 8002938:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <ReadHR+0xe0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <ReadHR+0xe0>)
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e007      	b.n	8002954 <ReadHR+0x60>
	} else
		count = MAX(0, count - 1);
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <ReadHR+0xe0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	bfb8      	it	lt
 800294c:	2301      	movlt	r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <ReadHR+0xe0>)
 8002952:	6013      	str	r3, [r2, #0]
	//Average HeartRate
	beatAvg = 0;
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <ReadHR+0xe4>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
	int ratio = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (count <= RATE_SIZE) {
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <ReadHR+0xe0>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <ReadHR+0xdc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	dc03      	bgt.n	8002972 <ReadHR+0x7e>
		ratio = count;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <ReadHR+0xe0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002970:	e002      	b.n	8002978 <ReadHR+0x84>
		//UART2_SendString("Count less than \n");
	} else {
		ratio = RATE_SIZE;
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <ReadHR+0xdc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
		//UART2_SendString("Count more than \n");
	}
	for (int x = 0; x < ratio; x++)
 8002978:	2300      	movs	r3, #0
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
 800297c:	e00b      	b.n	8002996 <ReadHR+0xa2>
		beatAvg += rates[x];
 800297e:	4a13      	ldr	r2, [pc, #76]	; (80029cc <ReadHR+0xd8>)
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <ReadHR+0xe4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4413      	add	r3, r2
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <ReadHR+0xe4>)
 800298e:	6013      	str	r3, [r2, #0]
	for (int x = 0; x < ratio; x++)
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	3301      	adds	r3, #1
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
 8002996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	429a      	cmp	r2, r3
 800299c:	dbef      	blt.n	800297e <ReadHR+0x8a>
	beatAvg /= ratio;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <ReadHR+0xe4>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80029a8:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <ReadHR+0xe4>)
 80029aa:	6013      	str	r3, [r2, #0]
	//sprintf(UartBuffer, "HR(avg): %d\n\rSpO2: %d\n\r", beatAvg, Max30102_GetSpO2Value());
	//UART2_SendString(UartBuffer);
	sprintf(UartBuffer, "HR: %d\n\r", beatAvg);
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <ReadHR+0xe4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	490a      	ldr	r1, [pc, #40]	; (80029dc <ReadHR+0xe8>)
 80029b4:	480a      	ldr	r0, [pc, #40]	; (80029e0 <ReadHR+0xec>)
 80029b6:	f008 fcd9 	bl	800b36c <siprintf>
	UART6_SendData(UartBuffer);
 80029ba:	4809      	ldr	r0, [pc, #36]	; (80029e0 <ReadHR+0xec>)
 80029bc:	f7ff fdf0 	bl	80025a0 <UART6_SendData>
	//HAL_Delay(10);
	//osMessageQueuePut(myQueue01Handle,UartBufferTmp, 0U, 0U);
}
 80029c0:	bf00      	nop
 80029c2:	3730      	adds	r7, #48	; 0x30
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20002c84 	.word	0x20002c84
 80029cc:	20002c88 	.word	0x20002c88
 80029d0:	20000000 	.word	0x20000000
 80029d4:	20002cb4 	.word	0x20002cb4
 80029d8:	20002cb0 	.word	0x20002cb0
 80029dc:	0800bb44 	.word	0x0800bb44
 80029e0:	20002c64 	.word	0x20002c64
 80029e4:	00000000 	.word	0x00000000

080029e8 <ReadTmp>:
void ReadTmp() {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c3, (0x5A << 1), 0x06, 1, (uint8_t*) data_read, 2,100);
 80029ee:	2364      	movs	r3, #100	; 0x64
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	2302      	movs	r3, #2
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <ReadTmp+0x160>)
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	2206      	movs	r2, #6
 80029fe:	21b4      	movs	r1, #180	; 0xb4
 8002a00:	4852      	ldr	r0, [pc, #328]	; (8002b4c <ReadTmp+0x164>)
 8002a02:	f001 fc35 	bl	8004270 <HAL_I2C_Mem_Read>
	aux = (int16_t) ((data_read[1] << 8) | data_read[0]);
 8002a06:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <ReadTmp+0x160>)
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	b21a      	sxth	r2, r3
 8002a0e:	4b4e      	ldr	r3, [pc, #312]	; (8002b48 <ReadTmp+0x160>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	b21b      	sxth	r3, r3
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b4d      	ldr	r3, [pc, #308]	; (8002b50 <ReadTmp+0x168>)
 8002a1c:	601a      	str	r2, [r3, #0]
	ambient_temperature = aux * 0.0202 - 273.15;
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <ReadTmp+0x168>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd feb0 	bl	8000788 <__aeabi_i2d>
 8002a28:	a343      	add	r3, pc, #268	; (adr r3, 8002b38 <ReadTmp+0x150>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f7fd fc2f 	bl	8000290 <__aeabi_dmul>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	a341      	add	r3, pc, #260	; (adr r3, 8002b40 <ReadTmp+0x158>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	f7fd fd54 	bl	80004ec <__aeabi_dsub>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fd ff06 	bl	800085c <__aeabi_d2iz>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a40      	ldr	r2, [pc, #256]	; (8002b54 <ReadTmp+0x16c>)
 8002a54:	6013      	str	r3, [r2, #0]
	HAL_Delay(100);
 8002a56:	2064      	movs	r0, #100	; 0x64
 8002a58:	f000 fec8 	bl	80037ec <HAL_Delay>
	if (avgWeatherTemp == 0) {
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <ReadTmp+0x170>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <ReadTmp+0x90>
		avgWeatherTemp += ambient_temperature;
 8002a64:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <ReadTmp+0x16c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <ReadTmp+0x170>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4b39      	ldr	r3, [pc, #228]	; (8002b58 <ReadTmp+0x170>)
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e00e      	b.n	8002a96 <ReadTmp+0xae>
	} else {
		avgWeatherTemp += ambient_temperature;
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <ReadTmp+0x16c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <ReadTmp+0x170>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <ReadTmp+0x170>)
 8002a88:	701a      	strb	r2, [r3, #0]
		avgWeatherTemp /= 2;
 8002a8a:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <ReadTmp+0x170>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <ReadTmp+0x170>)
 8002a94:	701a      	strb	r2, [r3, #0]
	}
	sprintf(UartBuffer, "WeatherTemp: %d\n\r", avgWeatherTemp);
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <ReadTmp+0x170>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	492f      	ldr	r1, [pc, #188]	; (8002b5c <ReadTmp+0x174>)
 8002a9e:	4830      	ldr	r0, [pc, #192]	; (8002b60 <ReadTmp+0x178>)
 8002aa0:	f008 fc64 	bl	800b36c <siprintf>
	UART6_SendData_Temp1(UartBuffer);
 8002aa4:	482e      	ldr	r0, [pc, #184]	; (8002b60 <ReadTmp+0x178>)
 8002aa6:	f7ff fdd7 	bl	8002658 <UART6_SendData_Temp1>
	HAL_I2C_Mem_Read(&hi2c3, (0x5A << 1), 0x07, 1, (uint8_t*) data_read1, 2,100);
 8002aaa:	2364      	movs	r3, #100	; 0x64
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	2302      	movs	r3, #2
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <ReadTmp+0x17c>)
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	2207      	movs	r2, #7
 8002aba:	21b4      	movs	r1, #180	; 0xb4
 8002abc:	4823      	ldr	r0, [pc, #140]	; (8002b4c <ReadTmp+0x164>)
 8002abe:	f001 fbd7 	bl	8004270 <HAL_I2C_Mem_Read>
	aux1 = (int16_t) ((data_read1[1] << 8) | data_read1[0]);
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <ReadTmp+0x17c>)
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	b21a      	sxth	r2, r3
 8002aca:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <ReadTmp+0x17c>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b21b      	sxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <ReadTmp+0x180>)
 8002ad8:	601a      	str	r2, [r3, #0]
	ambient_temperature1 = aux1 * 0.0202 - 273.15;
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <ReadTmp+0x180>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fe52 	bl	8000788 <__aeabi_i2d>
 8002ae4:	a314      	add	r3, pc, #80	; (adr r3, 8002b38 <ReadTmp+0x150>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fbd1 	bl	8000290 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	a312      	add	r3, pc, #72	; (adr r3, 8002b40 <ReadTmp+0x158>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fd fcf6 	bl	80004ec <__aeabi_dsub>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fd fea8 	bl	800085c <__aeabi_d2iz>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <ReadTmp+0x184>)
 8002b10:	6013      	str	r3, [r2, #0]
	HAL_Delay(100);
 8002b12:	2064      	movs	r0, #100	; 0x64
 8002b14:	f000 fe6a 	bl	80037ec <HAL_Delay>
	//sprintf(UartBuffer,"Ambient: %d\n\r", ambient_temperature);
	//UART2_SendString(UartBuffer);
	sprintf(UartBuffer, "Object: %d\n\r", ambient_temperature1);
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <ReadTmp+0x184>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4914      	ldr	r1, [pc, #80]	; (8002b70 <ReadTmp+0x188>)
 8002b20:	480f      	ldr	r0, [pc, #60]	; (8002b60 <ReadTmp+0x178>)
 8002b22:	f008 fc23 	bl	800b36c <siprintf>
	UART6_SendData_Temp(UartBuffer);
 8002b26:	480e      	ldr	r0, [pc, #56]	; (8002b60 <ReadTmp+0x178>)
 8002b28:	f7ff fd84 	bl	8002634 <UART6_SendData_Temp>
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	f3af 8000 	nop.w
 8002b38:	0d844d01 	.word	0x0d844d01
 8002b3c:	3f94af4f 	.word	0x3f94af4f
 8002b40:	66666666 	.word	0x66666666
 8002b44:	40711266 	.word	0x40711266
 8002b48:	20002cb8 	.word	0x20002cb8
 8002b4c:	20002b2c 	.word	0x20002b2c
 8002b50:	20002cc0 	.word	0x20002cc0
 8002b54:	20002cc8 	.word	0x20002cc8
 8002b58:	20002cf4 	.word	0x20002cf4
 8002b5c:	0800bb50 	.word	0x0800bb50
 8002b60:	20002c64 	.word	0x20002c64
 8002b64:	20002cbc 	.word	0x20002cbc
 8002b68:	20002cc4 	.word	0x20002cc4
 8002b6c:	20002ccc 	.word	0x20002ccc
 8002b70:	0800bb64 	.word	0x0800bb64

08002b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b78:	f000 fdf6 	bl	8003768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b7c:	f000 f864 	bl	8002c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b80:	f000 f9ca 	bl	8002f18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002b84:	f000 f974 	bl	8002e70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002b88:	f000 f8ca 	bl	8002d20 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002b8c:	f000 f8f6 	bl	8002d7c <MX_I2C3_Init>
  MX_USART6_UART_Init();
 8002b90:	f000 f998 	bl	8002ec4 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8002b94:	f000 f920 	bl	8002dd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8002b98:	481a      	ldr	r0, [pc, #104]	; (8002c04 <main+0x90>)
 8002b9a:	f004 fadf 	bl	800715c <HAL_TIM_Base_Start>
	UART2_SendString("START\n\r");
 8002b9e:	481a      	ldr	r0, [pc, #104]	; (8002c08 <main+0x94>)
 8002ba0:	f7ff fbda 	bl	8002358 <UART2_SendString>
	Max30102_Init(&hi2c1);
 8002ba4:	4819      	ldr	r0, [pc, #100]	; (8002c0c <main+0x98>)
 8002ba6:	f7fe fca3 	bl	80014f0 <Max30102_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002baa:	f005 fb2d 	bl	8008208 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (32, sizeof(uint64_t), &myQueue01_attributes);
 8002bae:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <main+0x9c>)
 8002bb0:	2108      	movs	r1, #8
 8002bb2:	2020      	movs	r0, #32
 8002bb4:	f005 fc1f 	bl	80083f6 <osMessageQueueNew>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <main+0xa0>)
 8002bbc:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <main+0xa4>)
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4816      	ldr	r0, [pc, #88]	; (8002c1c <main+0xa8>)
 8002bc4:	f005 fb6a 	bl	800829c <osThreadNew>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <main+0xac>)
 8002bcc:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002bce:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <main+0xb0>)
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4815      	ldr	r0, [pc, #84]	; (8002c28 <main+0xb4>)
 8002bd4:	f005 fb62 	bl	800829c <osThreadNew>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <main+0xb8>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8002bde:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <main+0xbc>)
 8002be0:	2100      	movs	r1, #0
 8002be2:	4814      	ldr	r0, [pc, #80]	; (8002c34 <main+0xc0>)
 8002be4:	f005 fb5a 	bl	800829c <osThreadNew>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <main+0xc4>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8002bee:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <main+0xc8>)
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4813      	ldr	r0, [pc, #76]	; (8002c40 <main+0xcc>)
 8002bf4:	f005 fb52 	bl	800829c <osThreadNew>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <main+0xd0>)
 8002bfc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002bfe:	f005 fb27 	bl	8008250 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002c02:	e7fe      	b.n	8002c02 <main+0x8e>
 8002c04:	20002b80 	.word	0x20002b80
 8002c08:	0800bb74 	.word	0x0800bb74
 8002c0c:	20002ad8 	.word	0x20002ad8
 8002c10:	0800bd4c 	.word	0x0800bd4c
 8002c14:	20002c60 	.word	0x20002c60
 8002c18:	0800bcbc 	.word	0x0800bcbc
 8002c1c:	08003115 	.word	0x08003115
 8002c20:	20002c50 	.word	0x20002c50
 8002c24:	0800bce0 	.word	0x0800bce0
 8002c28:	08003155 	.word	0x08003155
 8002c2c:	20002c54 	.word	0x20002c54
 8002c30:	0800bd04 	.word	0x0800bd04
 8002c34:	080031ad 	.word	0x080031ad
 8002c38:	20002c58 	.word	0x20002c58
 8002c3c:	0800bd28 	.word	0x0800bd28
 8002c40:	080031c3 	.word	0x080031c3
 8002c44:	20002c5c 	.word	0x20002c5c

08002c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b094      	sub	sp, #80	; 0x50
 8002c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4e:	f107 0320 	add.w	r3, r7, #32
 8002c52:	2230      	movs	r2, #48	; 0x30
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f008 fa72 	bl	800b140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <SystemClock_Config+0xd0>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <SystemClock_Config+0xd0>)
 8002c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7c:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <SystemClock_Config+0xd0>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c88:	2300      	movs	r3, #0
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <SystemClock_Config+0xd4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c94:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <SystemClock_Config+0xd4>)
 8002c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <SystemClock_Config+0xd4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002cac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002cc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002cca:	2307      	movs	r3, #7
 8002ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cce:	f107 0320 	add.w	r3, r7, #32
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fd28 	bl	8006728 <HAL_RCC_OscConfig>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002cde:	f000 fa8d 	bl	80031fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 ff8a 	bl	8006c18 <HAL_RCC_ClockConfig>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002d0a:	f000 fa77 	bl	80031fc <Error_Handler>
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3750      	adds	r7, #80	; 0x50
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000

08002d20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d26:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <MX_I2C1_Init+0x54>)
 8002d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d2c:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <MX_I2C1_Init+0x58>)
 8002d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d5c:	4804      	ldr	r0, [pc, #16]	; (8002d70 <MX_I2C1_Init+0x50>)
 8002d5e:	f001 f849 	bl	8003df4 <HAL_I2C_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d68:	f000 fa48 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20002ad8 	.word	0x20002ad8
 8002d74:	40005400 	.word	0x40005400
 8002d78:	00061a80 	.word	0x00061a80

08002d7c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <MX_I2C3_Init+0x54>)
 8002d84:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002d88:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <MX_I2C3_Init+0x58>)
 8002d8a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d9e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002db8:	4804      	ldr	r0, [pc, #16]	; (8002dcc <MX_I2C3_Init+0x50>)
 8002dba:	f001 f81b 	bl	8003df4 <HAL_I2C_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002dc4:	f000 fa1a 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20002b2c 	.word	0x20002b2c
 8002dd0:	40005c00 	.word	0x40005c00
 8002dd4:	000186a0 	.word	0x000186a0

08002dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dec:	463b      	mov	r3, r7
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <MX_TIM2_Init+0x94>)
 8002df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <MX_TIM2_Init+0x94>)
 8002dfe:	2253      	movs	r2, #83	; 0x53
 8002e00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_TIM2_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <MX_TIM2_Init+0x94>)
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <MX_TIM2_Init+0x94>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <MX_TIM2_Init+0x94>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e1c:	4813      	ldr	r0, [pc, #76]	; (8002e6c <MX_TIM2_Init+0x94>)
 8002e1e:	f004 f94d 	bl	80070bc <HAL_TIM_Base_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e28:	f000 f9e8 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e32:	f107 0308 	add.w	r3, r7, #8
 8002e36:	4619      	mov	r1, r3
 8002e38:	480c      	ldr	r0, [pc, #48]	; (8002e6c <MX_TIM2_Init+0x94>)
 8002e3a:	f004 fb53 	bl	80074e4 <HAL_TIM_ConfigClockSource>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e44:	f000 f9da 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e50:	463b      	mov	r3, r7
 8002e52:	4619      	mov	r1, r3
 8002e54:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_TIM2_Init+0x94>)
 8002e56:	f004 fd4f 	bl	80078f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e60:	f000 f9cc 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e64:	bf00      	nop
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20002b80 	.word	0x20002b80

08002e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <MX_USART2_UART_Init+0x50>)
 8002e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e96:	220c      	movs	r2, #12
 8002e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_USART2_UART_Init+0x4c>)
 8002ea8:	f004 fda8 	bl	80079fc <HAL_UART_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002eb2:	f000 f9a3 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20002bc8 	.word	0x20002bc8
 8002ec0:	40004400 	.word	0x40004400

08002ec4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <MX_USART6_UART_Init+0x4c>)
 8002eca:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <MX_USART6_UART_Init+0x50>)
 8002ecc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600 ;
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <MX_USART6_UART_Init+0x4c>)
 8002ed0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ed4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <MX_USART6_UART_Init+0x4c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <MX_USART6_UART_Init+0x4c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <MX_USART6_UART_Init+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <MX_USART6_UART_Init+0x4c>)
 8002eea:	220c      	movs	r2, #12
 8002eec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <MX_USART6_UART_Init+0x4c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <MX_USART6_UART_Init+0x4c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002efa:	4805      	ldr	r0, [pc, #20]	; (8002f10 <MX_USART6_UART_Init+0x4c>)
 8002efc:	f004 fd7e 	bl	80079fc <HAL_UART_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002f06:	f000 f979 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20002c0c 	.word	0x20002c0c
 8002f14:	40011400 	.word	0x40011400

08002f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	4b54      	ldr	r3, [pc, #336]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a53      	ldr	r2, [pc, #332]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b51      	ldr	r3, [pc, #324]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a4c      	ldr	r2, [pc, #304]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b46      	ldr	r3, [pc, #280]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a45      	ldr	r2, [pc, #276]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b43      	ldr	r3, [pc, #268]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a3e      	ldr	r2, [pc, #248]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <MX_GPIO_Init+0x16c>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4839      	ldr	r0, [pc, #228]	; (8003088 <MX_GPIO_Init+0x170>)
 8002fa4:	f000 fef4 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2130      	movs	r1, #48	; 0x30
 8002fac:	4837      	ldr	r0, [pc, #220]	; (800308c <MX_GPIO_Init+0x174>)
 8002fae:	f000 feef 	bl	8003d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	482f      	ldr	r0, [pc, #188]	; (8003088 <MX_GPIO_Init+0x170>)
 8002fca:	f000 fd45 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4828      	ldr	r0, [pc, #160]	; (8003088 <MX_GPIO_Init+0x170>)
 8002fe6:	f000 fd37 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : onFAN_Pin offFAN_Pin */
  GPIO_InitStruct.Pin = onFAN_Pin|offFAN_Pin;
 8002fea:	2303      	movs	r3, #3
 8002fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4823      	ldr	r0, [pc, #140]	; (800308c <MX_GPIO_Init+0x174>)
 8003000:	f000 fd2a 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8003004:	2330      	movs	r3, #48	; 0x30
 8003006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003008:	2301      	movs	r3, #1
 800300a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003010:	2300      	movs	r3, #0
 8003012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	4619      	mov	r1, r3
 800301a:	481c      	ldr	r0, [pc, #112]	; (800308c <MX_GPIO_Init+0x174>)
 800301c:	f000 fd1c 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8003020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003026:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800302a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	4619      	mov	r1, r3
 8003036:	4815      	ldr	r0, [pc, #84]	; (800308c <MX_GPIO_Init+0x174>)
 8003038:	f000 fd0e 	bl	8003a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800303c:	2200      	movs	r2, #0
 800303e:	2105      	movs	r1, #5
 8003040:	2006      	movs	r0, #6
 8003042:	f000 fcaf 	bl	80039a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003046:	2006      	movs	r0, #6
 8003048:	f000 fcc8 	bl	80039dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	2105      	movs	r1, #5
 8003050:	2007      	movs	r0, #7
 8003052:	f000 fca7 	bl	80039a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003056:	2007      	movs	r0, #7
 8003058:	f000 fcc0 	bl	80039dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800305c:	2200      	movs	r2, #0
 800305e:	2105      	movs	r1, #5
 8003060:	2017      	movs	r0, #23
 8003062:	f000 fc9f 	bl	80039a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003066:	2017      	movs	r0, #23
 8003068:	f000 fcb8 	bl	80039dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800306c:	2200      	movs	r2, #0
 800306e:	2105      	movs	r1, #5
 8003070:	2028      	movs	r0, #40	; 0x28
 8003072:	f000 fc97 	bl	80039a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003076:	2028      	movs	r0, #40	; 0x28
 8003078:	f000 fcb0 	bl	80039dc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800307c:	bf00      	nop
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	40020800 	.word	0x40020800
 800308c:	40020000 	.word	0x40020000

08003090 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == INT_Pin) {
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a0:	d102      	bne.n	80030a8 <HAL_GPIO_EXTI_Callback+0x18>
		//UART2_SendString("Interrupt Start\n\r");
		Max30102_InterruptCallback();
 80030a2:	f7fd fee7 	bl	8000e74 <Max30102_InterruptCallback>
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		} else if (!IsFingerOnScreen01) {
			state = BEGIN;
		}
	}
}
 80030a6:	e02b      	b.n	8003100 <HAL_GPIO_EXTI_Callback+0x70>
	} else if (GPIO_Pin == onFAN_Pin) {
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <HAL_GPIO_EXTI_Callback+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80030ae:	2201      	movs	r2, #1
 80030b0:	2101      	movs	r1, #1
 80030b2:	4815      	ldr	r0, [pc, #84]	; (8003108 <HAL_GPIO_EXTI_Callback+0x78>)
 80030b4:	f000 fe6c 	bl	8003d90 <HAL_GPIO_WritePin>
}
 80030b8:	e022      	b.n	8003100 <HAL_GPIO_EXTI_Callback+0x70>
	} else if (GPIO_Pin == offFAN_Pin) {
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d105      	bne.n	80030cc <HAL_GPIO_EXTI_Callback+0x3c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80030c0:	2200      	movs	r2, #0
 80030c2:	2101      	movs	r1, #1
 80030c4:	4810      	ldr	r0, [pc, #64]	; (8003108 <HAL_GPIO_EXTI_Callback+0x78>)
 80030c6:	f000 fe63 	bl	8003d90 <HAL_GPIO_WritePin>
}
 80030ca:	e019      	b.n	8003100 <HAL_GPIO_EXTI_Callback+0x70>
	} else if (GPIO_Pin == GPIO_PIN_5 && state == BEGIN) {
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d116      	bne.n	8003100 <HAL_GPIO_EXTI_Callback+0x70>
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <HAL_GPIO_EXTI_Callback+0x7c>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d112      	bne.n	8003100 <HAL_GPIO_EXTI_Callback+0x70>
		if (state == BEGIN && IsFingerOnScreen01) {
 80030da:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_GPIO_EXTI_Callback+0x7c>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d107      	bne.n	80030f2 <HAL_GPIO_EXTI_Callback+0x62>
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_GPIO_EXTI_Callback+0x80>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_EXTI_Callback+0x62>
			state = CALCULATE;
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <HAL_GPIO_EXTI_Callback+0x7c>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
}
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_EXTI_Callback+0x70>
		} else if (!IsFingerOnScreen01) {
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_GPIO_EXTI_Callback+0x80>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_GPIO_EXTI_Callback+0x70>
			state = BEGIN;
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <HAL_GPIO_EXTI_Callback+0x7c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40020800 	.word	0x40020800
 800310c:	20002cd8 	.word	0x20002cd8
 8003110:	20002cd0 	.word	0x20002cd0

08003114 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
		//UART2_SendString("ReadHR\n\r");
		sprintf(UartBuffer, "%c[2J%c[H", 27, 27);
 800311c:	231b      	movs	r3, #27
 800311e:	221b      	movs	r2, #27
 8003120:	4909      	ldr	r1, [pc, #36]	; (8003148 <StartDefaultTask+0x34>)
 8003122:	480a      	ldr	r0, [pc, #40]	; (800314c <StartDefaultTask+0x38>)
 8003124:	f008 f922 	bl	800b36c <siprintf>
		//UART2_SendString(UartBuffer);

		// DHT11 environment temp
		//osMessageQueuePut(myQueue01Handle, (uint8_t*) UartBuffer, 0U, 0U);

		sprintf(UartBuffer, "State : %d\n\r", UART2_GetState());
 8003128:	f7fd fd4e 	bl	8000bc8 <UART2_GetState>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	4907      	ldr	r1, [pc, #28]	; (8003150 <StartDefaultTask+0x3c>)
 8003132:	4806      	ldr	r0, [pc, #24]	; (800314c <StartDefaultTask+0x38>)
 8003134:	f008 f91a 	bl	800b36c <siprintf>
		//UART2_SendString(UartBuffer);

		ReadHR();
 8003138:	f7ff fbdc 	bl	80028f4 <ReadHR>

		osDelay(1000);
 800313c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003140:	f005 f93e 	bl	80083c0 <osDelay>
	for (;;) {
 8003144:	e7ea      	b.n	800311c <StartDefaultTask+0x8>
 8003146:	bf00      	nop
 8003148:	0800bb7c 	.word	0x0800bb7c
 800314c:	20002c64 	.word	0x20002c64
 8003150:	0800bb88 	.word	0x0800bb88

08003154 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	char buffer[32];
	for (;;) {
		//char buffer[32];
		//IsFingerOnScreen01 = 0;
		if (osMessageQueueGet(myQueue01Handle, UartBuffer, NULL, 0U) == osOK) {
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <StartTask02+0x48>)
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	2200      	movs	r2, #0
 8003164:	490e      	ldr	r1, [pc, #56]	; (80031a0 <StartTask02+0x4c>)
 8003166:	f005 fa19 	bl	800859c <osMessageQueueGet>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d110      	bne.n	8003192 <StartTask02+0x3e>
			//UART2_SendString("Queue\n\r");
			HAL_UART_Transmit(&huart6, (uint8_t*) UartBuffer,strlen(UartBuffer), 1000);
 8003170:	480b      	ldr	r0, [pc, #44]	; (80031a0 <StartTask02+0x4c>)
 8003172:	f7fd f835 	bl	80001e0 <strlen>
 8003176:	4603      	mov	r3, r0
 8003178:	b29a      	uxth	r2, r3
 800317a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317e:	4908      	ldr	r1, [pc, #32]	; (80031a0 <StartTask02+0x4c>)
 8003180:	4808      	ldr	r0, [pc, #32]	; (80031a4 <StartTask02+0x50>)
 8003182:	f004 fc88 	bl	8007a96 <HAL_UART_Transmit>
			UART2_SendString(UartBuffer);
 8003186:	4806      	ldr	r0, [pc, #24]	; (80031a0 <StartTask02+0x4c>)
 8003188:	f7ff f8e6 	bl	8002358 <UART2_SendString>
			UART2_SendString("----------------\n\r");
 800318c:	4806      	ldr	r0, [pc, #24]	; (80031a8 <StartTask02+0x54>)
 800318e:	f7ff f8e3 	bl	8002358 <UART2_SendString>
		}
		osDelay(1);
 8003192:	2001      	movs	r0, #1
 8003194:	f005 f914 	bl	80083c0 <osDelay>
		if (osMessageQueueGet(myQueue01Handle, UartBuffer, NULL, 0U) == osOK) {
 8003198:	e7e0      	b.n	800315c <StartTask02+0x8>
 800319a:	bf00      	nop
 800319c:	20002c60 	.word	0x20002c60
 80031a0:	20002c64 	.word	0x20002c64
 80031a4:	20002c0c 	.word	0x20002c0c
 80031a8:	0800bb98 	.word	0x0800bb98

080031ac <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		//UART2_SendString("ReadObjTemp\n\r");
		ReadTmp();
 80031b4:	f7ff fc18 	bl	80029e8 <ReadTmp>
		osDelay(1000);
 80031b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031bc:	f005 f900 	bl	80083c0 <osDelay>
		ReadTmp();
 80031c0:	e7f8      	b.n	80031b4 <StartTask03+0x8>

080031c2 <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	for (;;) {
		ReadDHT22();
 80031ca:	f7ff fa57 	bl	800267c <ReadDHT22>
		osDelay(1000);
 80031ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031d2:	f005 f8f5 	bl	80083c0 <osDelay>
		ReadDHT22();
 80031d6:	e7f8      	b.n	80031ca <StartTask04+0x8>

080031d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031ea:	f000 fadf 	bl	80037ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40010000 	.word	0x40010000

080031fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003200:	b672      	cpsid	i
}
 8003202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003204:	e7fe      	b.n	8003204 <Error_Handler+0x8>
	...

08003208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_MspInit+0x54>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	4a11      	ldr	r2, [pc, #68]	; (800325c <HAL_MspInit+0x54>)
 8003218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800321c:	6453      	str	r3, [r2, #68]	; 0x44
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_MspInit+0x54>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_MspInit+0x54>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_MspInit+0x54>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_MspInit+0x54>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	210f      	movs	r1, #15
 800324a:	f06f 0001 	mvn.w	r0, #1
 800324e:	f000 fba9 	bl	80039a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800

08003260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 031c 	add.w	r3, r7, #28
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a4a      	ldr	r2, [pc, #296]	; (80033a8 <HAL_I2C_MspInit+0x148>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d13c      	bne.n	80032fc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	4b49      	ldr	r3, [pc, #292]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a48      	ldr	r2, [pc, #288]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b46      	ldr	r3, [pc, #280]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800329e:	23c0      	movs	r3, #192	; 0xc0
 80032a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032a2:	2312      	movs	r3, #18
 80032a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032aa:	2303      	movs	r3, #3
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032ae:	2304      	movs	r3, #4
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b2:	f107 031c 	add.w	r3, r7, #28
 80032b6:	4619      	mov	r1, r3
 80032b8:	483d      	ldr	r0, [pc, #244]	; (80033b0 <HAL_I2C_MspInit+0x150>)
 80032ba:	f000 fbcd 	bl	8003a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4a39      	ldr	r2, [pc, #228]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 80032c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032cc:	6413      	str	r3, [r2, #64]	; 0x40
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	2105      	movs	r1, #5
 80032de:	201f      	movs	r0, #31
 80032e0:	f000 fb60 	bl	80039a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032e4:	201f      	movs	r0, #31
 80032e6:	f000 fb79 	bl	80039dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2105      	movs	r1, #5
 80032ee:	2020      	movs	r0, #32
 80032f0:	f000 fb58 	bl	80039a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032f4:	2020      	movs	r0, #32
 80032f6:	f000 fb71 	bl	80039dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80032fa:	e050      	b.n	800339e <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C3)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <HAL_I2C_MspInit+0x154>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d14b      	bne.n	800339e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	4b28      	ldr	r3, [pc, #160]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b21      	ldr	r3, [pc, #132]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a20      	ldr	r2, [pc, #128]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800333e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003344:	2312      	movs	r3, #18
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003348:	2301      	movs	r3, #1
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003350:	2304      	movs	r3, #4
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	4619      	mov	r1, r3
 800335a:	4817      	ldr	r0, [pc, #92]	; (80033b8 <HAL_I2C_MspInit+0x158>)
 800335c:	f000 fb7c 	bl	8003a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003366:	2312      	movs	r3, #18
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800336a:	2301      	movs	r3, #1
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336e:	2303      	movs	r3, #3
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003372:	2304      	movs	r3, #4
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003376:	f107 031c 	add.w	r3, r7, #28
 800337a:	4619      	mov	r1, r3
 800337c:	480f      	ldr	r0, [pc, #60]	; (80033bc <HAL_I2C_MspInit+0x15c>)
 800337e:	f000 fb6b 	bl	8003a58 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 800338c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_I2C_MspInit+0x14c>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
}
 800339e:	bf00      	nop
 80033a0:	3730      	adds	r7, #48	; 0x30
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40005400 	.word	0x40005400
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020400 	.word	0x40020400
 80033b4:	40005c00 	.word	0x40005c00
 80033b8:	40020800 	.word	0x40020800
 80033bc:	40020000 	.word	0x40020000

080033c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d10d      	bne.n	80033ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_TIM_Base_MspInit+0x3c>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <HAL_TIM_Base_MspInit+0x3c>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_TIM_Base_MspInit+0x3c>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800

08003400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a32      	ldr	r2, [pc, #200]	; (80034e8 <HAL_UART_MspInit+0xe8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d12c      	bne.n	800347c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_UART_MspInit+0xec>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a30      	ldr	r2, [pc, #192]	; (80034ec <HAL_UART_MspInit+0xec>)
 800342c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
 8003432:	4b2e      	ldr	r3, [pc, #184]	; (80034ec <HAL_UART_MspInit+0xec>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	4b2a      	ldr	r3, [pc, #168]	; (80034ec <HAL_UART_MspInit+0xec>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a29      	ldr	r2, [pc, #164]	; (80034ec <HAL_UART_MspInit+0xec>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <HAL_UART_MspInit+0xec>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800345a:	230c      	movs	r3, #12
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800346a:	2307      	movs	r3, #7
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	4619      	mov	r1, r3
 8003474:	481e      	ldr	r0, [pc, #120]	; (80034f0 <HAL_UART_MspInit+0xf0>)
 8003476:	f000 faef 	bl	8003a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800347a:	e030      	b.n	80034de <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <HAL_UART_MspInit+0xf4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d12b      	bne.n	80034de <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_UART_MspInit+0xec>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <HAL_UART_MspInit+0xec>)
 8003490:	f043 0320 	orr.w	r3, r3, #32
 8003494:	6453      	str	r3, [r2, #68]	; 0x44
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_UART_MspInit+0xec>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <HAL_UART_MspInit+0xec>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a10      	ldr	r2, [pc, #64]	; (80034ec <HAL_UART_MspInit+0xec>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <HAL_UART_MspInit+0xec>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034be:	23c0      	movs	r3, #192	; 0xc0
 80034c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80034ce:	2308      	movs	r3, #8
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	4619      	mov	r1, r3
 80034d8:	4807      	ldr	r0, [pc, #28]	; (80034f8 <HAL_UART_MspInit+0xf8>)
 80034da:	f000 fabd 	bl	8003a58 <HAL_GPIO_Init>
}
 80034de:	bf00      	nop
 80034e0:	3730      	adds	r7, #48	; 0x30
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40004400 	.word	0x40004400
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40011400 	.word	0x40011400
 80034f8:	40020800 	.word	0x40020800

080034fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08c      	sub	sp, #48	; 0x30
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	4b2e      	ldr	r3, [pc, #184]	; (80035cc <HAL_InitTick+0xd0>)
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	4a2d      	ldr	r2, [pc, #180]	; (80035cc <HAL_InitTick+0xd0>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6453      	str	r3, [r2, #68]	; 0x44
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_InitTick+0xd0>)
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003528:	f107 020c 	add.w	r2, r7, #12
 800352c:	f107 0310 	add.w	r3, r7, #16
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f003 fd90 	bl	8007058 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003538:	f003 fd7a 	bl	8007030 <HAL_RCC_GetPCLK2Freq>
 800353c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <HAL_InitTick+0xd4>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0c9b      	lsrs	r3, r3, #18
 8003548:	3b01      	subs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <HAL_InitTick+0xd8>)
 800354e:	4a22      	ldr	r2, [pc, #136]	; (80035d8 <HAL_InitTick+0xdc>)
 8003550:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_InitTick+0xd8>)
 8003554:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003558:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_InitTick+0xd8>)
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003560:	4b1c      	ldr	r3, [pc, #112]	; (80035d4 <HAL_InitTick+0xd8>)
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_InitTick+0xd8>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_InitTick+0xd8>)
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003572:	4818      	ldr	r0, [pc, #96]	; (80035d4 <HAL_InitTick+0xd8>)
 8003574:	f003 fda2 	bl	80070bc <HAL_TIM_Base_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800357e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11b      	bne.n	80035be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003586:	4813      	ldr	r0, [pc, #76]	; (80035d4 <HAL_InitTick+0xd8>)
 8003588:	f003 fe42 	bl	8007210 <HAL_TIM_Base_Start_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003596:	2b00      	cmp	r3, #0
 8003598:	d111      	bne.n	80035be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800359a:	2019      	movs	r0, #25
 800359c:	f000 fa1e 	bl	80039dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b0f      	cmp	r3, #15
 80035a4:	d808      	bhi.n	80035b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80035a6:	2200      	movs	r2, #0
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	2019      	movs	r0, #25
 80035ac:	f000 f9fa 	bl	80039a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_InitTick+0xe0>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e002      	b.n	80035be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80035be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3730      	adds	r7, #48	; 0x30
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	431bde83 	.word	0x431bde83
 80035d4:	20002cf8 	.word	0x20002cf8
 80035d8:	40010000 	.word	0x40010000
 80035dc:	20000008 	.word	0x20000008

080035e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80035e4:	e7fe      	b.n	80035e4 <NMI_Handler+0x4>

080035e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ea:	e7fe      	b.n	80035ea <HardFault_Handler+0x4>

080035ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f0:	e7fe      	b.n	80035f0 <MemManage_Handler+0x4>

080035f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f6:	e7fe      	b.n	80035f6 <BusFault_Handler+0x4>

080035f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035fc:	e7fe      	b.n	80035fc <UsageFault_Handler+0x4>

080035fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(onFAN_Pin);
 8003610:	2001      	movs	r0, #1
 8003612:	f000 fbd7 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}

0800361a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(offFAN_Pin);
 800361e:	2002      	movs	r0, #2
 8003620:	f000 fbd0 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}

08003628 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 800362c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003630:	f000 fbc8 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}

08003638 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800363e:	f003 fe49 	bl	80072d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20002cf8 	.word	0x20002cf8

0800364c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <I2C1_EV_IRQHandler+0x10>)
 8003652:	f001 f833 	bl	80046bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20002ad8 	.word	0x20002ad8

08003660 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003664:	4802      	ldr	r0, [pc, #8]	; (8003670 <I2C1_ER_IRQHandler+0x10>)
 8003666:	f001 f99a 	bl	800499e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20002ad8 	.word	0x20002ad8

08003674 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003678:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800367c:	f000 fba2 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003680:	bf00      	nop
 8003682:	bd80      	pop	{r7, pc}

08003684 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <_sbrk+0x64>)
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <_sbrk+0x68>)
 80036a4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <_sbrk+0x64>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d207      	bcs.n	80036c4 <_sbrk+0x40>
		errno = ENOMEM;
 80036b4:	f007 fd0a 	bl	800b0cc <__errno>
 80036b8:	4603      	mov	r3, r0
 80036ba:	220c      	movs	r2, #12
 80036bc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80036be:	f04f 33ff 	mov.w	r3, #4294967295
 80036c2:	e009      	b.n	80036d8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <_sbrk+0x64>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <_sbrk+0x64>)
 80036d4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20018000 	.word	0x20018000
 80036e4:	00000400 	.word	0x00000400
 80036e8:	20002d40 	.word	0x20002d40
 80036ec:	20007768 	.word	0x20007768

080036f0 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <SystemInit+0x20>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	4a05      	ldr	r2, [pc, #20]	; (8003710 <SystemInit+0x20>)
 80036fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800374c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003718:	480d      	ldr	r0, [pc, #52]	; (8003750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800371a:	490e      	ldr	r1, [pc, #56]	; (8003754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800371c:	4a0e      	ldr	r2, [pc, #56]	; (8003758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800371e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003720:	e002      	b.n	8003728 <LoopCopyDataInit>

08003722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003726:	3304      	adds	r3, #4

08003728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800372a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800372c:	d3f9      	bcc.n	8003722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800372e:	4a0b      	ldr	r2, [pc, #44]	; (800375c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003730:	4c0b      	ldr	r4, [pc, #44]	; (8003760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003734:	e001      	b.n	800373a <LoopFillZerobss>

08003736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003738:	3204      	adds	r2, #4

0800373a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800373a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800373c:	d3fb      	bcc.n	8003736 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800373e:	f7ff ffd7 	bl	80036f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003742:	f007 fcc9 	bl	800b0d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003746:	f7ff fa15 	bl	8002b74 <main>
  bx  lr    
 800374a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800374c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003754:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003758:	0800be20 	.word	0x0800be20
  ldr r2, =_sbss
 800375c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003760:	20007768 	.word	0x20007768

08003764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003764:	e7fe      	b.n	8003764 <ADC_IRQHandler>
	...

08003768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_Init+0x40>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <HAL_Init+0x40>)
 8003772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <HAL_Init+0x40>)
 800377e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <HAL_Init+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <HAL_Init+0x40>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003790:	2003      	movs	r0, #3
 8003792:	f000 f8fc 	bl	800398e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003796:	200f      	movs	r0, #15
 8003798:	f7ff feb0 	bl	80034fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800379c:	f7ff fd34 	bl	8003208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023c00 	.word	0x40023c00

080037ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_IncTick+0x20>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_IncTick+0x24>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4413      	add	r3, r2
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <HAL_IncTick+0x24>)
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	2000000c 	.word	0x2000000c
 80037d0:	20002d44 	.word	0x20002d44

080037d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return uwTick;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_GetTick+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20002d44 	.word	0x20002d44

080037ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037f4:	f7ff ffee 	bl	80037d4 <HAL_GetTick>
 80037f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d005      	beq.n	8003812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_Delay+0x44>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003812:	bf00      	nop
 8003814:	f7ff ffde 	bl	80037d4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	429a      	cmp	r2, r3
 8003822:	d8f7      	bhi.n	8003814 <HAL_Delay+0x28>
  {
  }
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	2000000c 	.word	0x2000000c

08003834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800385c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <__NVIC_GetPriorityGrouping+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 0307 	and.w	r3, r3, #7
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0b      	blt.n	80038c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4907      	ldr	r1, [pc, #28]	; (80038d0 <__NVIC_EnableIRQ+0x38>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2001      	movs	r0, #1
 80038ba:	fa00 f202 	lsl.w	r2, r0, r2
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	6039      	str	r1, [r7, #0]
 80038de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db0a      	blt.n	80038fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	490c      	ldr	r1, [pc, #48]	; (8003920 <__NVIC_SetPriority+0x4c>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	440b      	add	r3, r1
 80038f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038fc:	e00a      	b.n	8003914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	4908      	ldr	r1, [pc, #32]	; (8003924 <__NVIC_SetPriority+0x50>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	3b04      	subs	r3, #4
 800390c:	0112      	lsls	r2, r2, #4
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	440b      	add	r3, r1
 8003912:	761a      	strb	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000e100 	.word	0xe000e100
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	; 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f1c3 0307 	rsb	r3, r3, #7
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf28      	it	cs
 8003946:	2304      	movcs	r3, #4
 8003948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3304      	adds	r3, #4
 800394e:	2b06      	cmp	r3, #6
 8003950:	d902      	bls.n	8003958 <NVIC_EncodePriority+0x30>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3b03      	subs	r3, #3
 8003956:	e000      	b.n	800395a <NVIC_EncodePriority+0x32>
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	401a      	ands	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003970:	f04f 31ff 	mov.w	r1, #4294967295
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43d9      	mvns	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	4313      	orrs	r3, r2
         );
}
 8003982:	4618      	mov	r0, r3
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ff4c 	bl	8003834 <__NVIC_SetPriorityGrouping>
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b6:	f7ff ff61 	bl	800387c <__NVIC_GetPriorityGrouping>
 80039ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	6978      	ldr	r0, [r7, #20]
 80039c2:	f7ff ffb1 	bl	8003928 <NVIC_EncodePriority>
 80039c6:	4602      	mov	r2, r0
 80039c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff80 	bl	80038d4 <__NVIC_SetPriority>
}
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff54 	bl	8003898 <__NVIC_EnableIRQ>
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d004      	beq.n	8003a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00c      	b.n	8003a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4a:	b2db      	uxtb	r3, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e159      	b.n	8003d28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a74:	2201      	movs	r2, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	f040 8148 	bne.w	8003d22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d005      	beq.n	8003aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d130      	bne.n	8003b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 0201 	and.w	r2, r3, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d017      	beq.n	8003b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2203      	movs	r2, #3
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d123      	bne.n	8003b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	08da      	lsrs	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3208      	adds	r2, #8
 8003b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	08da      	lsrs	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3208      	adds	r2, #8
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0203 	and.w	r2, r3, #3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a2 	beq.w	8003d22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	4b57      	ldr	r3, [pc, #348]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	4a56      	ldr	r2, [pc, #344]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bec:	6453      	str	r3, [r2, #68]	; 0x44
 8003bee:	4b54      	ldr	r3, [pc, #336]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfa:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_GPIO_Init+0x2ec>)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	3302      	adds	r3, #2
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a49      	ldr	r2, [pc, #292]	; (8003d48 <HAL_GPIO_Init+0x2f0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d019      	beq.n	8003c5a <HAL_GPIO_Init+0x202>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a48      	ldr	r2, [pc, #288]	; (8003d4c <HAL_GPIO_Init+0x2f4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_GPIO_Init+0x1fe>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a47      	ldr	r2, [pc, #284]	; (8003d50 <HAL_GPIO_Init+0x2f8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00d      	beq.n	8003c52 <HAL_GPIO_Init+0x1fa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a46      	ldr	r2, [pc, #280]	; (8003d54 <HAL_GPIO_Init+0x2fc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <HAL_GPIO_Init+0x1f6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a45      	ldr	r2, [pc, #276]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_GPIO_Init+0x1f2>
 8003c46:	2304      	movs	r3, #4
 8003c48:	e008      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	e006      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e004      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e002      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f002 0203 	and.w	r2, r2, #3
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	4093      	lsls	r3, r2
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c6c:	4935      	ldr	r1, [pc, #212]	; (8003d44 <HAL_GPIO_Init+0x2ec>)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	089b      	lsrs	r3, r3, #2
 8003c72:	3302      	adds	r3, #2
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c7a:	4b38      	ldr	r3, [pc, #224]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9e:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca4:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc8:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cce:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf8:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d1c:	4a0f      	ldr	r2, [pc, #60]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	f67f aea2 	bls.w	8003a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40013800 	.word	0x40013800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40020400 	.word	0x40020400
 8003d50:	40020800 	.word	0x40020800
 8003d54:	40020c00 	.word	0x40020c00
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40013c00 	.word	0x40013c00

08003d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	887b      	ldrh	r3, [r7, #2]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	e001      	b.n	8003d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	807b      	strh	r3, [r7, #2]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da0:	787b      	ldrb	r3, [r7, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dac:	e003      	b.n	8003db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	041a      	lsls	r2, r3, #16
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	619a      	str	r2, [r3, #24]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dda:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff f954 	bl	8003090 <HAL_GPIO_EXTI_Callback>
  }
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40013c00 	.word	0x40013c00

08003df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e12b      	b.n	800405e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fa20 	bl	8003260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	; 0x24
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e58:	f003 f8d6 	bl	8007008 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4a81      	ldr	r2, [pc, #516]	; (8004068 <HAL_I2C_Init+0x274>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d807      	bhi.n	8003e78 <HAL_I2C_Init+0x84>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a80      	ldr	r2, [pc, #512]	; (800406c <HAL_I2C_Init+0x278>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	bf94      	ite	ls
 8003e70:	2301      	movls	r3, #1
 8003e72:	2300      	movhi	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e006      	b.n	8003e86 <HAL_I2C_Init+0x92>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a7d      	ldr	r2, [pc, #500]	; (8004070 <HAL_I2C_Init+0x27c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	bf94      	ite	ls
 8003e80:	2301      	movls	r3, #1
 8003e82:	2300      	movhi	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0e7      	b.n	800405e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4a78      	ldr	r2, [pc, #480]	; (8004074 <HAL_I2C_Init+0x280>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0c9b      	lsrs	r3, r3, #18
 8003e98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a6a      	ldr	r2, [pc, #424]	; (8004068 <HAL_I2C_Init+0x274>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d802      	bhi.n	8003ec8 <HAL_I2C_Init+0xd4>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	e009      	b.n	8003edc <HAL_I2C_Init+0xe8>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	4a69      	ldr	r2, [pc, #420]	; (8004078 <HAL_I2C_Init+0x284>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	099b      	lsrs	r3, r3, #6
 8003eda:	3301      	adds	r3, #1
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003eee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	495c      	ldr	r1, [pc, #368]	; (8004068 <HAL_I2C_Init+0x274>)
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	d819      	bhi.n	8003f30 <HAL_I2C_Init+0x13c>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e59      	subs	r1, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f10:	400b      	ands	r3, r1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_I2C_Init+0x138>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1e59      	subs	r1, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f24:	3301      	adds	r3, #1
 8003f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2a:	e051      	b.n	8003fd0 <HAL_I2C_Init+0x1dc>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	e04f      	b.n	8003fd0 <HAL_I2C_Init+0x1dc>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d111      	bne.n	8003f5c <HAL_I2C_Init+0x168>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e58      	subs	r0, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	440b      	add	r3, r1
 8003f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e012      	b.n	8003f82 <HAL_I2C_Init+0x18e>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e58      	subs	r0, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Init+0x196>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e022      	b.n	8003fd0 <HAL_I2C_Init+0x1dc>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10e      	bne.n	8003fb0 <HAL_I2C_Init+0x1bc>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1e58      	subs	r0, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	440b      	add	r3, r1
 8003fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fae:	e00f      	b.n	8003fd0 <HAL_I2C_Init+0x1dc>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	0099      	lsls	r1, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	6809      	ldr	r1, [r1, #0]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69da      	ldr	r2, [r3, #28]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6911      	ldr	r1, [r2, #16]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68d2      	ldr	r2, [r2, #12]
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	430b      	orrs	r3, r1
 8004012:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	000186a0 	.word	0x000186a0
 800406c:	001e847f 	.word	0x001e847f
 8004070:	003d08ff 	.word	0x003d08ff
 8004074:	431bde83 	.word	0x431bde83
 8004078:	10624dd3 	.word	0x10624dd3

0800407c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4603      	mov	r3, r0
 800408c:	817b      	strh	r3, [r7, #10]
 800408e:	460b      	mov	r3, r1
 8004090:	813b      	strh	r3, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004096:	f7ff fb9d 	bl	80037d4 <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	f040 80d9 	bne.w	800425c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2319      	movs	r3, #25
 80040b0:	2201      	movs	r2, #1
 80040b2:	496d      	ldr	r1, [pc, #436]	; (8004268 <HAL_I2C_Mem_Write+0x1ec>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f002 f90d 	bl	80062d4 <I2C_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
 80040c2:	e0cc      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Mem_Write+0x56>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0c5      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d007      	beq.n	80040f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004106:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2221      	movs	r2, #33	; 0x21
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2240      	movs	r2, #64	; 0x40
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a3a      	ldr	r2, [r7, #32]
 8004122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004128:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a4d      	ldr	r2, [pc, #308]	; (800426c <HAL_I2C_Mem_Write+0x1f0>)
 8004138:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800413a:	88f8      	ldrh	r0, [r7, #6]
 800413c:	893a      	ldrh	r2, [r7, #8]
 800413e:	8979      	ldrh	r1, [r7, #10]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4603      	mov	r3, r0
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f001 fe9c 	bl	8005e88 <I2C_RequestMemoryWrite>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d052      	beq.n	80041fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e081      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f002 f98e 	bl	8006480 <I2C_WaitOnTXEFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b04      	cmp	r3, #4
 8004170:	d107      	bne.n	8004182 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06b      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d11b      	bne.n	80041fc <HAL_I2C_Mem_Write+0x180>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1aa      	bne.n	800415a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f002 f97a 	bl	8006502 <I2C_WaitOnBTFFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2b04      	cmp	r3, #4
 800421a:	d107      	bne.n	800422c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e016      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	00100002 	.word	0x00100002
 800426c:	ffff0000 	.word	0xffff0000

08004270 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08c      	sub	sp, #48	; 0x30
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	461a      	mov	r2, r3
 800427e:	4603      	mov	r3, r0
 8004280:	817b      	strh	r3, [r7, #10]
 8004282:	460b      	mov	r3, r1
 8004284:	813b      	strh	r3, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800428a:	f7ff faa3 	bl	80037d4 <HAL_GetTick>
 800428e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b20      	cmp	r3, #32
 800429a:	f040 8208 	bne.w	80046ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	2319      	movs	r3, #25
 80042a4:	2201      	movs	r2, #1
 80042a6:	497b      	ldr	r1, [pc, #492]	; (8004494 <HAL_I2C_Mem_Read+0x224>)
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f002 f813 	bl	80062d4 <I2C_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
 80042b6:	e1fb      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_I2C_Mem_Read+0x56>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e1f4      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d007      	beq.n	80042ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2222      	movs	r2, #34	; 0x22
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2240      	movs	r2, #64	; 0x40
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800431c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a5b      	ldr	r2, [pc, #364]	; (8004498 <HAL_I2C_Mem_Read+0x228>)
 800432c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800432e:	88f8      	ldrh	r0, [r7, #6]
 8004330:	893a      	ldrh	r2, [r7, #8]
 8004332:	8979      	ldrh	r1, [r7, #10]
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4603      	mov	r3, r0
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f001 fe38 	bl	8005fb4 <I2C_RequestMemoryRead>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1b0      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	d113      	bne.n	800437e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004356:	2300      	movs	r3, #0
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e184      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	2b01      	cmp	r3, #1
 8004384:	d11b      	bne.n	80043be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e164      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d11b      	bne.n	80043fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	e144      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004414:	e138      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	2b03      	cmp	r3, #3
 800441c:	f200 80f1 	bhi.w	8004602 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	2b01      	cmp	r3, #1
 8004426:	d123      	bne.n	8004470 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f002 f8db 	bl	80065e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e139      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800446e:	e10b      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	2b02      	cmp	r3, #2
 8004476:	d14e      	bne.n	8004516 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	2200      	movs	r2, #0
 8004480:	4906      	ldr	r1, [pc, #24]	; (800449c <HAL_I2C_Mem_Read+0x22c>)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f001 ff26 	bl	80062d4 <I2C_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e10e      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
 8004492:	bf00      	nop
 8004494:	00100002 	.word	0x00100002
 8004498:	ffff0000 	.word	0xffff0000
 800449c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004514:	e0b8      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	2200      	movs	r2, #0
 800451e:	4966      	ldr	r1, [pc, #408]	; (80046b8 <HAL_I2C_Mem_Read+0x448>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f001 fed7 	bl	80062d4 <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0bf      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	2200      	movs	r2, #0
 800457a:	494f      	ldr	r1, [pc, #316]	; (80046b8 <HAL_I2C_Mem_Read+0x448>)
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f001 fea9 	bl	80062d4 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e091      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004600:	e042      	b.n	8004688 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f001 ffee 	bl	80065e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e04c      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d118      	bne.n	8004688 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f aec2 	bne.w	8004416 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	00010004 	.word	0x00010004

080046bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d003      	beq.n	80046f4 <HAL_I2C_EV_IRQHandler+0x38>
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	f040 80c1 	bne.w	8004876 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <HAL_I2C_EV_IRQHandler+0x6e>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004714:	d003      	beq.n	800471e <HAL_I2C_EV_IRQHandler+0x62>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800471c:	d101      	bne.n	8004722 <HAL_I2C_EV_IRQHandler+0x66>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x68>
 8004722:	2300      	movs	r3, #0
 8004724:	2b01      	cmp	r3, #1
 8004726:	f000 8132 	beq.w	800498e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x92>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	0a5b      	lsrs	r3, r3, #9
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d006      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f001 ffd6 	bl	80066f2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fd83 	bl	8005252 <I2C_Master_SB>
 800474c:	e092      	b.n	8004874 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	08db      	lsrs	r3, r3, #3
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <HAL_I2C_EV_IRQHandler+0xb2>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	0a5b      	lsrs	r3, r3, #9
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fdf9 	bl	800535e <I2C_Master_ADD10>
 800476c:	e082      	b.n	8004874 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_I2C_EV_IRQHandler+0xd2>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	0a5b      	lsrs	r3, r3, #9
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fe13 	bl	80053b2 <I2C_Master_ADDR>
 800478c:	e072      	b.n	8004874 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	089b      	lsrs	r3, r3, #2
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d03b      	beq.n	8004812 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a8:	f000 80f3 	beq.w	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	09db      	lsrs	r3, r3, #7
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00f      	beq.n	80047d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	0a9b      	lsrs	r3, r3, #10
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d103      	bne.n	80047d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f9f3 	bl	8004bbc <I2C_MasterTransmit_TXE>
 80047d6:	e04d      	b.n	8004874 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80d6 	beq.w	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	0a5b      	lsrs	r3, r3, #9
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80cf 	beq.w	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047f4:	7bbb      	ldrb	r3, [r7, #14]
 80047f6:	2b21      	cmp	r3, #33	; 0x21
 80047f8:	d103      	bne.n	8004802 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fa7a 	bl	8004cf4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004800:	e0c7      	b.n	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	f040 80c4 	bne.w	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fae8 	bl	8004de0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004810:	e0bf      	b.n	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004820:	f000 80b7 	beq.w	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	099b      	lsrs	r3, r3, #6
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00f      	beq.n	8004850 <HAL_I2C_EV_IRQHandler+0x194>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <HAL_I2C_EV_IRQHandler+0x194>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fb5d 	bl	8004f08 <I2C_MasterReceive_RXNE>
 800484e:	e011      	b.n	8004874 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 809a 	beq.w	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8093 	beq.w	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fc06 	bl	800507e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004872:	e08e      	b.n	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004874:	e08d      	b.n	8004992 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e007      	b.n	8004898 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d012      	beq.n	80048ca <HAL_I2C_EV_IRQHandler+0x20e>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	0a5b      	lsrs	r3, r3, #9
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00c      	beq.n	80048ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048c0:	69b9      	ldr	r1, [r7, #24]
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 ffc4 	bl	8005850 <I2C_Slave_ADDR>
 80048c8:	e066      	b.n	8004998 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <HAL_I2C_EV_IRQHandler+0x22e>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	0a5b      	lsrs	r3, r3, #9
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fffe 	bl	80058e4 <I2C_Slave_STOPF>
 80048e8:	e056      	b.n	8004998 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048ea:	7bbb      	ldrb	r3, [r7, #14]
 80048ec:	2b21      	cmp	r3, #33	; 0x21
 80048ee:	d002      	beq.n	80048f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80048f0:	7bbb      	ldrb	r3, [r7, #14]
 80048f2:	2b29      	cmp	r3, #41	; 0x29
 80048f4:	d125      	bne.n	8004942 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	09db      	lsrs	r3, r3, #7
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00f      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0x266>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	0a9b      	lsrs	r3, r3, #10
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0x266>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d103      	bne.n	8004922 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 feda 	bl	80056d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004920:	e039      	b.n	8004996 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d033      	beq.n	8004996 <HAL_I2C_EV_IRQHandler+0x2da>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	0a5b      	lsrs	r3, r3, #9
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d02d      	beq.n	8004996 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 ff07 	bl	800574e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004940:	e029      	b.n	8004996 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	099b      	lsrs	r3, r3, #6
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00f      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x2b2>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0a9b      	lsrs	r3, r3, #10
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <HAL_I2C_EV_IRQHandler+0x2b2>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	089b      	lsrs	r3, r3, #2
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 ff12 	bl	8005790 <I2C_SlaveReceive_RXNE>
 800496c:	e014      	b.n	8004998 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	089b      	lsrs	r3, r3, #2
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00e      	beq.n	8004998 <HAL_I2C_EV_IRQHandler+0x2dc>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	0a5b      	lsrs	r3, r3, #9
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 ff40 	bl	800580c <I2C_SlaveReceive_BTF>
 800498c:	e004      	b.n	8004998 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800498e:	bf00      	nop
 8004990:	e002      	b.n	8004998 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004996:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08a      	sub	sp, #40	; 0x28
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <HAL_I2C_ER_IRQHandler+0x4e>
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	0a5b      	lsrs	r3, r3, #9
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00e      	beq.n	8004a16 <HAL_I2C_ER_IRQHandler+0x78>
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f043 0302 	orr.w	r3, r3, #2
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a14:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	0a9b      	lsrs	r3, r3, #10
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d03f      	beq.n	8004aa2 <HAL_I2C_ER_IRQHandler+0x104>
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	0a1b      	lsrs	r3, r3, #8
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d039      	beq.n	8004aa2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004a2e:	7efb      	ldrb	r3, [r7, #27]
 8004a30:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a40:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a48:	7ebb      	ldrb	r3, [r7, #26]
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d112      	bne.n	8004a74 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10f      	bne.n	8004a74 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	2b21      	cmp	r3, #33	; 0x21
 8004a58:	d008      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	2b29      	cmp	r3, #41	; 0x29
 8004a5e:	d005      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0xce>
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b28      	cmp	r3, #40	; 0x28
 8004a64:	d106      	bne.n	8004a74 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b21      	cmp	r3, #33	; 0x21
 8004a6a:	d103      	bne.n	8004a74 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 f869 	bl	8005b44 <I2C_Slave_AF>
 8004a72:	e016      	b.n	8004aa2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a7c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f043 0304 	orr.w	r3, r3, #4
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a86:	7efb      	ldrb	r3, [r7, #27]
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d002      	beq.n	8004a92 <HAL_I2C_ER_IRQHandler+0xf4>
 8004a8c:	7efb      	ldrb	r3, [r7, #27]
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	d107      	bne.n	8004aa2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	0adb      	lsrs	r3, r3, #11
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <HAL_I2C_ER_IRQHandler+0x12e>
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	f043 0308 	orr.w	r3, r3, #8
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004aca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f001 f8a0 	bl	8005c24 <I2C_ITError>
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3728      	adds	r7, #40	; 0x28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d150      	bne.n	8004c84 <I2C_MasterTransmit_TXE+0xc8>
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b21      	cmp	r3, #33	; 0x21
 8004be6:	d14d      	bne.n	8004c84 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d01d      	beq.n	8004c2a <I2C_MasterTransmit_TXE+0x6e>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d01a      	beq.n	8004c2a <I2C_MasterTransmit_TXE+0x6e>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bfa:	d016      	beq.n	8004c2a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c0a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2211      	movs	r2, #17
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff ff62 	bl	8004aec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c28:	e060      	b.n	8004cec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c38:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c48:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d107      	bne.n	8004c74 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ff7d 	bl	8004b6c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c72:	e03b      	b.n	8004cec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff35 	bl	8004aec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c82:	e033      	b.n	8004cec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b21      	cmp	r3, #33	; 0x21
 8004c88:	d005      	beq.n	8004c96 <I2C_MasterTransmit_TXE+0xda>
 8004c8a:	7bbb      	ldrb	r3, [r7, #14]
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d12d      	bne.n	8004cec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b22      	cmp	r3, #34	; 0x22
 8004c94:	d12a      	bne.n	8004cec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d108      	bne.n	8004cb2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004cb0:	e01c      	b.n	8004cec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d103      	bne.n	8004cc6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f88e 	bl	8004de0 <I2C_MemoryTransmit_TXE_BTF>
}
 8004cc4:	e012      	b.n	8004cec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	781a      	ldrb	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cea:	e7ff      	b.n	8004cec <I2C_MasterTransmit_TXE+0x130>
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b21      	cmp	r3, #33	; 0x21
 8004d0c:	d164      	bne.n	8004dd8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d012      	beq.n	8004d3e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d3c:	e04c      	b.n	8004dd8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d01d      	beq.n	8004d80 <I2C_MasterTransmit_BTF+0x8c>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d01a      	beq.n	8004d80 <I2C_MasterTransmit_BTF+0x8c>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d50:	d016      	beq.n	8004d80 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d60:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2211      	movs	r2, #17
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff feb7 	bl	8004aec <HAL_I2C_MasterTxCpltCallback>
}
 8004d7e:	e02b      	b.n	8004dd8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d8e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d107      	bne.n	8004dca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fed2 	bl	8004b6c <HAL_I2C_MemTxCpltCallback>
}
 8004dc8:	e006      	b.n	8004dd8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fe8a 	bl	8004aec <HAL_I2C_MasterTxCpltCallback>
}
 8004dd8:	bf00      	nop
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d11d      	bne.n	8004e34 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d10b      	bne.n	8004e18 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e10:	1c9a      	adds	r2, r3, #2
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e16:	e073      	b.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	121b      	asrs	r3, r3, #8
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e32:	e065      	b.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d10b      	bne.n	8004e54 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e52:	e055      	b.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d151      	bne.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b22      	cmp	r3, #34	; 0x22
 8004e60:	d10d      	bne.n	8004e7e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e7c:	e040      	b.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d015      	beq.n	8004eb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b21      	cmp	r3, #33	; 0x21
 8004e8c:	d112      	bne.n	8004eb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eb2:	e025      	b.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d120      	bne.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b21      	cmp	r3, #33	; 0x21
 8004ec2:	d11d      	bne.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ed2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff fe36 	bl	8004b6c <HAL_I2C_MemTxCpltCallback>
}
 8004f00:	bf00      	nop
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b22      	cmp	r3, #34	; 0x22
 8004f1a:	f040 80ac 	bne.w	8005076 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d921      	bls.n	8004f70 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	f040 808c 	bne.w	8005076 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f6e:	e082      	b.n	8005076 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d075      	beq.n	8005064 <I2C_MasterReceive_RXNE+0x15c>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d002      	beq.n	8004f84 <I2C_MasterReceive_RXNE+0x7c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d16f      	bne.n	8005064 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 fafd 	bl	8006584 <I2C_WaitOnSTOPRequestThroughIT>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d142      	bne.n	8005016 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d10a      	bne.n	8005000 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff fdc1 	bl	8004b80 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ffe:	e03a      	b.n	8005076 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2212      	movs	r2, #18
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fd76 	bl	8004b00 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005014:	e02f      	b.n	8005076 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005024:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fd99 	bl	8004b94 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005062:	e008      	b.n	8005076 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005072:	605a      	str	r2, [r3, #4]
}
 8005074:	e7ff      	b.n	8005076 <I2C_MasterReceive_RXNE+0x16e>
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b084      	sub	sp, #16
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b04      	cmp	r3, #4
 8005094:	d11b      	bne.n	80050ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80050cc:	e0bd      	b.n	800524a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d129      	bne.n	800512c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d00a      	beq.n	8005104 <I2C_MasterReceive_BTF+0x86>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d007      	beq.n	8005104 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005102:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800512a:	e08e      	b.n	800524a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d176      	bne.n	8005224 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d002      	beq.n	8005142 <I2C_MasterReceive_BTF+0xc4>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b10      	cmp	r3, #16
 8005140:	d108      	bne.n	8005154 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e019      	b.n	8005188 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b04      	cmp	r3, #4
 8005158:	d002      	beq.n	8005160 <I2C_MasterReceive_BTF+0xe2>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d108      	bne.n	8005172 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e00a      	b.n	8005188 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b10      	cmp	r3, #16
 8005176:	d007      	beq.n	8005188 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005186:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d10a      	bne.n	800520e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fcba 	bl	8004b80 <HAL_I2C_MemRxCpltCallback>
}
 800520c:	e01d      	b.n	800524a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2212      	movs	r2, #18
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fc6f 	bl	8004b00 <HAL_I2C_MasterRxCpltCallback>
}
 8005222:	e012      	b.n	800524a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b40      	cmp	r3, #64	; 0x40
 8005264:	d117      	bne.n	8005296 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	b2db      	uxtb	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800527e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005280:	e067      	b.n	8005352 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	b2da      	uxtb	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	611a      	str	r2, [r3, #16]
}
 8005294:	e05d      	b.n	8005352 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529e:	d133      	bne.n	8005308 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b21      	cmp	r3, #33	; 0x21
 80052aa:	d109      	bne.n	80052c0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052bc:	611a      	str	r2, [r3, #16]
 80052be:	e008      	b.n	80052d2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <I2C_Master_SB+0x92>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d108      	bne.n	80052f6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d032      	beq.n	8005352 <I2C_Master_SB+0x100>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d02d      	beq.n	8005352 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005304:	605a      	str	r2, [r3, #4]
}
 8005306:	e024      	b.n	8005352 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10e      	bne.n	800532e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	b29b      	uxth	r3, r3
 8005316:	11db      	asrs	r3, r3, #7
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 0306 	and.w	r3, r3, #6
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f063 030f 	orn	r3, r3, #15
 8005324:	b2da      	uxtb	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]
}
 800532c:	e011      	b.n	8005352 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005332:	2b01      	cmp	r3, #1
 8005334:	d10d      	bne.n	8005352 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	b29b      	uxth	r3, r3
 800533c:	11db      	asrs	r3, r3, #7
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f003 0306 	and.w	r3, r3, #6
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f063 030e 	orn	r3, r3, #14
 800534a:	b2da      	uxtb	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	611a      	str	r2, [r3, #16]
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536a:	b2da      	uxtb	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <I2C_Master_ADD10+0x26>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d108      	bne.n	8005396 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00c      	beq.n	80053a6 <I2C_Master_ADD10+0x48>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053a4:	605a      	str	r2, [r3, #4]
  }
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b091      	sub	sp, #68	; 0x44
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b22      	cmp	r3, #34	; 0x22
 80053da:	f040 8169 	bne.w	80056b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10f      	bne.n	8005406 <I2C_Master_ADDR+0x54>
 80053e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d10b      	bne.n	8005406 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ee:	2300      	movs	r3, #0
 80053f0:	633b      	str	r3, [r7, #48]	; 0x30
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	633b      	str	r3, [r7, #48]	; 0x30
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	633b      	str	r3, [r7, #48]	; 0x30
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	e160      	b.n	80056c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	2b00      	cmp	r3, #0
 800540c:	d11d      	bne.n	800544a <I2C_Master_ADDR+0x98>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005416:	d118      	bne.n	800544a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005418:	2300      	movs	r3, #0
 800541a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800543c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	651a      	str	r2, [r3, #80]	; 0x50
 8005448:	e13e      	b.n	80056c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d113      	bne.n	800547c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005454:	2300      	movs	r3, #0
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	e115      	b.n	80056a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	f040 808a 	bne.w	800559c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800548e:	d137      	bne.n	8005500 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ae:	d113      	bne.n	80054d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c0:	2300      	movs	r3, #0
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	627b      	str	r3, [r7, #36]	; 0x24
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	e0e7      	b.n	80056a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d8:	2300      	movs	r3, #0
 80054da:	623b      	str	r3, [r7, #32]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	623b      	str	r3, [r7, #32]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	623b      	str	r3, [r7, #32]
 80054ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e0d3      	b.n	80056a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	2b08      	cmp	r3, #8
 8005504:	d02e      	beq.n	8005564 <I2C_Master_ADDR+0x1b2>
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	2b20      	cmp	r3, #32
 800550a:	d02b      	beq.n	8005564 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	2b12      	cmp	r3, #18
 8005510:	d102      	bne.n	8005518 <I2C_Master_ADDR+0x166>
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	2b01      	cmp	r3, #1
 8005516:	d125      	bne.n	8005564 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	2b04      	cmp	r3, #4
 800551c:	d00e      	beq.n	800553c <I2C_Master_ADDR+0x18a>
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	2b02      	cmp	r3, #2
 8005522:	d00b      	beq.n	800553c <I2C_Master_ADDR+0x18a>
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	2b10      	cmp	r3, #16
 8005528:	d008      	beq.n	800553c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e007      	b.n	800554c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800554a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	e0a1      	b.n	80056a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005572:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005574:	2300      	movs	r3, #0
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e085      	b.n	80056a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d14d      	bne.n	8005642 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d016      	beq.n	80055da <I2C_Master_ADDR+0x228>
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d013      	beq.n	80055da <I2C_Master_ADDR+0x228>
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d010      	beq.n	80055da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	e007      	b.n	80055ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f8:	d117      	bne.n	800562a <I2C_Master_ADDR+0x278>
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005600:	d00b      	beq.n	800561a <I2C_Master_ADDR+0x268>
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	2b01      	cmp	r3, #1
 8005606:	d008      	beq.n	800561a <I2C_Master_ADDR+0x268>
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	2b08      	cmp	r3, #8
 800560c:	d005      	beq.n	800561a <I2C_Master_ADDR+0x268>
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	2b10      	cmp	r3, #16
 8005612:	d002      	beq.n	800561a <I2C_Master_ADDR+0x268>
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	2b20      	cmp	r3, #32
 8005618:	d107      	bne.n	800562a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005628:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	e032      	b.n	80056a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005650:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800565c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005660:	d117      	bne.n	8005692 <I2C_Master_ADDR+0x2e0>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005668:	d00b      	beq.n	8005682 <I2C_Master_ADDR+0x2d0>
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	2b01      	cmp	r3, #1
 800566e:	d008      	beq.n	8005682 <I2C_Master_ADDR+0x2d0>
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	2b08      	cmp	r3, #8
 8005674:	d005      	beq.n	8005682 <I2C_Master_ADDR+0x2d0>
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	2b10      	cmp	r3, #16
 800567a:	d002      	beq.n	8005682 <I2C_Master_ADDR+0x2d0>
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	2b20      	cmp	r3, #32
 8005680:	d107      	bne.n	8005692 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005690:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80056ae:	e00b      	b.n	80056c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
}
 80056c6:	e7ff      	b.n	80056c8 <I2C_Master_ADDR+0x316>
 80056c8:	bf00      	nop
 80056ca:	3744      	adds	r7, #68	; 0x44
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d02b      	beq.n	8005746 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d114      	bne.n	8005746 <I2C_SlaveTransmit_TXE+0x72>
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	2b29      	cmp	r3, #41	; 0x29
 8005720:	d111      	bne.n	8005746 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005730:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2221      	movs	r2, #33	; 0x21
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2228      	movs	r2, #40	; 0x28
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff f9e7 	bl	8004b14 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d011      	beq.n	8005784 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	781a      	ldrb	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d02c      	beq.n	8005804 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d114      	bne.n	8005804 <I2C_SlaveReceive_RXNE+0x74>
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	2b2a      	cmp	r3, #42	; 0x2a
 80057de:	d111      	bne.n	8005804 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2222      	movs	r2, #34	; 0x22
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2228      	movs	r2, #40	; 0x28
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff f992 	bl	8004b28 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d012      	beq.n	8005844 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800586a:	2b28      	cmp	r3, #40	; 0x28
 800586c:	d127      	bne.n	80058be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	089b      	lsrs	r3, r3, #2
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	09db      	lsrs	r3, r3, #7
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	81bb      	strh	r3, [r7, #12]
 80058a0:	e002      	b.n	80058a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80058b0:	89ba      	ldrh	r2, [r7, #12]
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff f940 	bl	8004b3c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058bc:	e00e      	b.n	80058dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058be:	2300      	movs	r3, #0
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005902:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005904:	2300      	movs	r3, #0
 8005906:	60bb      	str	r3, [r7, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	60bb      	str	r3, [r7, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005930:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005940:	d172      	bne.n	8005a28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b22      	cmp	r3, #34	; 0x22
 8005946:	d002      	beq.n	800594e <I2C_Slave_STOPF+0x6a>
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b2a      	cmp	r3, #42	; 0x2a
 800594c:	d135      	bne.n	80059ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b29a      	uxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f043 0204 	orr.w	r2, r3, #4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005980:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe f858 	bl	8003a3c <HAL_DMA_GetState>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d049      	beq.n	8005a26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	4a69      	ldr	r2, [pc, #420]	; (8005b3c <I2C_Slave_STOPF+0x258>)
 8005998:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe f82a 	bl	80039f8 <HAL_DMA_Abort_IT>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d03d      	beq.n	8005a26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059b4:	4610      	mov	r0, r2
 80059b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059b8:	e035      	b.n	8005a26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f043 0204 	orr.w	r2, r3, #4
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe f822 	bl	8003a3c <HAL_DMA_GetState>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d014      	beq.n	8005a28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	4a4e      	ldr	r2, [pc, #312]	; (8005b3c <I2C_Slave_STOPF+0x258>)
 8005a04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd fff4 	bl	80039f8 <HAL_DMA_Abort_IT>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a20:	4610      	mov	r0, r2
 8005a22:	4798      	blx	r3
 8005a24:	e000      	b.n	8005a28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d03e      	beq.n	8005ab0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d112      	bne.n	8005a66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d112      	bne.n	8005a9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	f043 0204 	orr.w	r2, r3, #4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8b3 	bl	8005c24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005abe:	e039      	b.n	8005b34 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ac4:	d109      	bne.n	8005ada <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2228      	movs	r2, #40	; 0x28
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff f827 	bl	8004b28 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b28      	cmp	r3, #40	; 0x28
 8005ae4:	d111      	bne.n	8005b0a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <I2C_Slave_STOPF+0x25c>)
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff f828 	bl	8004b58 <HAL_I2C_ListenCpltCallback>
}
 8005b08:	e014      	b.n	8005b34 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	2b22      	cmp	r3, #34	; 0x22
 8005b10:	d002      	beq.n	8005b18 <I2C_Slave_STOPF+0x234>
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b22      	cmp	r3, #34	; 0x22
 8005b16:	d10d      	bne.n	8005b34 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fe fffa 	bl	8004b28 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	08006185 	.word	0x08006185
 8005b40:	ffff0000 	.word	0xffff0000

08005b44 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d002      	beq.n	8005b66 <I2C_Slave_AF+0x22>
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d129      	bne.n	8005bba <I2C_Slave_AF+0x76>
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	2b28      	cmp	r3, #40	; 0x28
 8005b6a:	d126      	bne.n	8005bba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a2c      	ldr	r2, [pc, #176]	; (8005c20 <I2C_Slave_AF+0xdc>)
 8005b70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b80:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b8a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fe ffd0 	bl	8004b58 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005bb8:	e02e      	b.n	8005c18 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	2b21      	cmp	r3, #33	; 0x21
 8005bbe:	d126      	bne.n	8005c0e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <I2C_Slave_AF+0xdc>)
 8005bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2221      	movs	r2, #33	; 0x21
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bf4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c04:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fe ff84 	bl	8004b14 <HAL_I2C_SlaveTxCpltCallback>
}
 8005c0c:	e004      	b.n	8005c18 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c16:	615a      	str	r2, [r3, #20]
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	ffff0000 	.word	0xffff0000

08005c24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c3c:	7bbb      	ldrb	r3, [r7, #14]
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d002      	beq.n	8005c48 <I2C_ITError+0x24>
 8005c42:	7bbb      	ldrb	r3, [r7, #14]
 8005c44:	2b40      	cmp	r3, #64	; 0x40
 8005c46:	d10a      	bne.n	8005c5e <I2C_ITError+0x3a>
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	2b22      	cmp	r3, #34	; 0x22
 8005c4c:	d107      	bne.n	8005c5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c64:	2b28      	cmp	r3, #40	; 0x28
 8005c66:	d107      	bne.n	8005c78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2228      	movs	r2, #40	; 0x28
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c76:	e015      	b.n	8005ca4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c86:	d00a      	beq.n	8005c9e <I2C_ITError+0x7a>
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	2b60      	cmp	r3, #96	; 0x60
 8005c8c:	d007      	beq.n	8005c9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cb2:	d162      	bne.n	8005d7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cc2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d020      	beq.n	8005d14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	4a6a      	ldr	r2, [pc, #424]	; (8005e80 <I2C_ITError+0x25c>)
 8005cd8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fd fe8a 	bl	80039f8 <HAL_DMA_Abort_IT>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8089 	beq.w	8005dfe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0201 	bic.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4798      	blx	r3
 8005d12:	e074      	b.n	8005dfe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	4a59      	ldr	r2, [pc, #356]	; (8005e80 <I2C_ITError+0x25c>)
 8005d1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fd fe69 	bl	80039f8 <HAL_DMA_Abort_IT>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d068      	beq.n	8005dfe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d10b      	bne.n	8005d52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0201 	bic.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d74:	4610      	mov	r0, r2
 8005d76:	4798      	blx	r3
 8005d78:	e041      	b.n	8005dfe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b60      	cmp	r3, #96	; 0x60
 8005d84:	d125      	bne.n	8005dd2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d10b      	bne.n	8005dba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fe feec 	bl	8004ba8 <HAL_I2C_AbortCpltCallback>
 8005dd0:	e015      	b.n	8005dfe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d10b      	bne.n	8005df8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fe fecb 	bl	8004b94 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10e      	bne.n	8005e2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d109      	bne.n	8005e2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d104      	bne.n	8005e2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d113      	bne.n	8005e78 <I2C_ITError+0x254>
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	2b28      	cmp	r3, #40	; 0x28
 8005e54:	d110      	bne.n	8005e78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a0a      	ldr	r2, [pc, #40]	; (8005e84 <I2C_ITError+0x260>)
 8005e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fe fe70 	bl	8004b58 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	08006185 	.word	0x08006185
 8005e84:	ffff0000 	.word	0xffff0000

08005e88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	4608      	mov	r0, r1
 8005e92:	4611      	mov	r1, r2
 8005e94:	461a      	mov	r2, r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	817b      	strh	r3, [r7, #10]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	813b      	strh	r3, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fa08 	bl	80062d4 <I2C_WaitOnFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00d      	beq.n	8005ee6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed8:	d103      	bne.n	8005ee2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e05f      	b.n	8005fa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ee6:	897b      	ldrh	r3, [r7, #10]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	461a      	mov	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ef4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	6a3a      	ldr	r2, [r7, #32]
 8005efa:	492d      	ldr	r1, [pc, #180]	; (8005fb0 <I2C_RequestMemoryWrite+0x128>)
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fa40 	bl	8006382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e04c      	b.n	8005fa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f24:	6a39      	ldr	r1, [r7, #32]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 faaa 	bl	8006480 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00d      	beq.n	8005f4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d107      	bne.n	8005f4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e02b      	b.n	8005fa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d105      	bne.n	8005f60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f54:	893b      	ldrh	r3, [r7, #8]
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	611a      	str	r2, [r3, #16]
 8005f5e:	e021      	b.n	8005fa4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f60:	893b      	ldrh	r3, [r7, #8]
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f70:	6a39      	ldr	r1, [r7, #32]
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 fa84 	bl	8006480 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00d      	beq.n	8005f9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d107      	bne.n	8005f96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e005      	b.n	8005fa6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f9a:	893b      	ldrh	r3, [r7, #8]
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	00010002 	.word	0x00010002

08005fb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	817b      	strh	r3, [r7, #10]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	813b      	strh	r3, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f96a 	bl	80062d4 <I2C_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00d      	beq.n	8006022 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006014:	d103      	bne.n	800601e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800601c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e0aa      	b.n	8006178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006022:	897b      	ldrh	r3, [r7, #10]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006030:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	4952      	ldr	r1, [pc, #328]	; (8006180 <I2C_RequestMemoryRead+0x1cc>)
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f9a2 	bl	8006382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e097      	b.n	8006178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800605e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006060:	6a39      	ldr	r1, [r7, #32]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fa0c 	bl	8006480 <I2C_WaitOnTXEFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00d      	beq.n	800608a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	2b04      	cmp	r3, #4
 8006074:	d107      	bne.n	8006086 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006084:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e076      	b.n	8006178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d105      	bne.n	800609c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006090:	893b      	ldrh	r3, [r7, #8]
 8006092:	b2da      	uxtb	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	611a      	str	r2, [r3, #16]
 800609a:	e021      	b.n	80060e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800609c:	893b      	ldrh	r3, [r7, #8]
 800609e:	0a1b      	lsrs	r3, r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ac:	6a39      	ldr	r1, [r7, #32]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f9e6 	bl	8006480 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d107      	bne.n	80060d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e050      	b.n	8006178 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060d6:	893b      	ldrh	r3, [r7, #8]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e2:	6a39      	ldr	r1, [r7, #32]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f9cb 	bl	8006480 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d107      	bne.n	8006108 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006106:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e035      	b.n	8006178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	2200      	movs	r2, #0
 8006124:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 f8d3 	bl	80062d4 <I2C_WaitOnFlagUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00d      	beq.n	8006150 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006142:	d103      	bne.n	800614c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e013      	b.n	8006178 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006150:	897b      	ldrh	r3, [r7, #10]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	b2da      	uxtb	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	6a3a      	ldr	r2, [r7, #32]
 8006164:	4906      	ldr	r1, [pc, #24]	; (8006180 <I2C_RequestMemoryRead+0x1cc>)
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 f90b 	bl	8006382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	00010002 	.word	0x00010002

08006184 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800619e:	4b4b      	ldr	r3, [pc, #300]	; (80062cc <I2C_DMAAbort+0x148>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	08db      	lsrs	r3, r3, #3
 80061a4:	4a4a      	ldr	r2, [pc, #296]	; (80062d0 <I2C_DMAAbort+0x14c>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	0a1a      	lsrs	r2, r3, #8
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	00da      	lsls	r2, r3, #3
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	f043 0220 	orr.w	r2, r3, #32
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80061ca:	e00a      	b.n	80061e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e0:	d0ea      	beq.n	80061b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ee:	2200      	movs	r2, #0
 80061f0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	2200      	movs	r2, #0
 8006200:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006210:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2200      	movs	r2, #0
 8006216:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006224:	2200      	movs	r2, #0
 8006226:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	2200      	movs	r2, #0
 8006236:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0201 	bic.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b60      	cmp	r3, #96	; 0x60
 8006252:	d10e      	bne.n	8006272 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800626a:	6978      	ldr	r0, [r7, #20]
 800626c:	f7fe fc9c 	bl	8004ba8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006270:	e027      	b.n	80062c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006272:	7cfb      	ldrb	r3, [r7, #19]
 8006274:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006278:	2b28      	cmp	r3, #40	; 0x28
 800627a:	d117      	bne.n	80062ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800629a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2200      	movs	r2, #0
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2228      	movs	r2, #40	; 0x28
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062aa:	e007      	b.n	80062bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80062bc:	6978      	ldr	r0, [r7, #20]
 80062be:	f7fe fc69 	bl	8004b94 <HAL_I2C_ErrorCallback>
}
 80062c2:	bf00      	nop
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000004 	.word	0x20000004
 80062d0:	14f8b589 	.word	0x14f8b589

080062d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062e4:	e025      	b.n	8006332 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d021      	beq.n	8006332 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ee:	f7fd fa71 	bl	80037d4 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d302      	bcc.n	8006304 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d116      	bne.n	8006332 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e023      	b.n	800637a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d10d      	bne.n	8006358 <I2C_WaitOnFlagUntilTimeout+0x84>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	43da      	mvns	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4013      	ands	r3, r2
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	bf0c      	ite	eq
 800634e:	2301      	moveq	r3, #1
 8006350:	2300      	movne	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	e00c      	b.n	8006372 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	43da      	mvns	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4013      	ands	r3, r2
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf0c      	ite	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	2300      	movne	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	429a      	cmp	r2, r3
 8006376:	d0b6      	beq.n	80062e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006390:	e051      	b.n	8006436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a0:	d123      	bne.n	80063ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f043 0204 	orr.w	r2, r3, #4
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e046      	b.n	8006478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d021      	beq.n	8006436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f2:	f7fd f9ef 	bl	80037d4 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d116      	bne.n	8006436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e020      	b.n	8006478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10c      	bne.n	800645a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	43da      	mvns	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4013      	ands	r3, r2
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	bf14      	ite	ne
 8006452:	2301      	movne	r3, #1
 8006454:	2300      	moveq	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	e00b      	b.n	8006472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	43da      	mvns	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4013      	ands	r3, r2
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d18d      	bne.n	8006392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800648c:	e02d      	b.n	80064ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 f900 	bl	8006694 <I2C_IsAcknowledgeFailed>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e02d      	b.n	80064fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a4:	d021      	beq.n	80064ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a6:	f7fd f995 	bl	80037d4 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d116      	bne.n	80064ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	f043 0220 	orr.w	r2, r3, #32
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e007      	b.n	80064fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f4:	2b80      	cmp	r3, #128	; 0x80
 80064f6:	d1ca      	bne.n	800648e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800650e:	e02d      	b.n	800656c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f8bf 	bl	8006694 <I2C_IsAcknowledgeFailed>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e02d      	b.n	800657c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d021      	beq.n	800656c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006528:	f7fd f954 	bl	80037d4 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d116      	bne.n	800656c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	f043 0220 	orr.w	r2, r3, #32
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e007      	b.n	800657c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b04      	cmp	r3, #4
 8006578:	d1ca      	bne.n	8006510 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006590:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	08db      	lsrs	r3, r3, #3
 8006596:	4a13      	ldr	r2, [pc, #76]	; (80065e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006598:	fba2 2303 	umull	r2, r3, r2, r3
 800659c:	0a1a      	lsrs	r2, r3, #8
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f043 0220 	orr.w	r2, r3, #32
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e008      	b.n	80065d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d0:	d0e9      	beq.n	80065a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	20000004 	.word	0x20000004
 80065e4:	14f8b589 	.word	0x14f8b589

080065e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065f4:	e042      	b.n	800667c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b10      	cmp	r3, #16
 8006602:	d119      	bne.n	8006638 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0210 	mvn.w	r2, #16
 800660c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e029      	b.n	800668c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006638:	f7fd f8cc 	bl	80037d4 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	429a      	cmp	r2, r3
 8006646:	d302      	bcc.n	800664e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d116      	bne.n	800667c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	f043 0220 	orr.w	r2, r3, #32
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e007      	b.n	800668c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d1b5      	bne.n	80065f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066aa:	d11b      	bne.n	80066e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	f043 0204 	orr.w	r2, r3, #4
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006702:	d103      	bne.n	800670c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800670a:	e007      	b.n	800671c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006714:	d102      	bne.n	800671c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2208      	movs	r2, #8
 800671a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e267      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d075      	beq.n	8006832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006746:	4b88      	ldr	r3, [pc, #544]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	2b04      	cmp	r3, #4
 8006750:	d00c      	beq.n	800676c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006752:	4b85      	ldr	r3, [pc, #532]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800675a:	2b08      	cmp	r3, #8
 800675c:	d112      	bne.n	8006784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800675e:	4b82      	ldr	r3, [pc, #520]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800676a:	d10b      	bne.n	8006784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800676c:	4b7e      	ldr	r3, [pc, #504]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d05b      	beq.n	8006830 <HAL_RCC_OscConfig+0x108>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d157      	bne.n	8006830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e242      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d106      	bne.n	800679c <HAL_RCC_OscConfig+0x74>
 800678e:	4b76      	ldr	r3, [pc, #472]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a75      	ldr	r2, [pc, #468]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e01d      	b.n	80067d8 <HAL_RCC_OscConfig+0xb0>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCC_OscConfig+0x98>
 80067a6:	4b70      	ldr	r3, [pc, #448]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a6f      	ldr	r2, [pc, #444]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	4b6d      	ldr	r3, [pc, #436]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a6c      	ldr	r2, [pc, #432]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	e00b      	b.n	80067d8 <HAL_RCC_OscConfig+0xb0>
 80067c0:	4b69      	ldr	r3, [pc, #420]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a68      	ldr	r2, [pc, #416]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	4b66      	ldr	r3, [pc, #408]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a65      	ldr	r2, [pc, #404]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d013      	beq.n	8006808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e0:	f7fc fff8 	bl	80037d4 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067e8:	f7fc fff4 	bl	80037d4 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b64      	cmp	r3, #100	; 0x64
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e207      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fa:	4b5b      	ldr	r3, [pc, #364]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0f0      	beq.n	80067e8 <HAL_RCC_OscConfig+0xc0>
 8006806:	e014      	b.n	8006832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006808:	f7fc ffe4 	bl	80037d4 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006810:	f7fc ffe0 	bl	80037d4 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b64      	cmp	r3, #100	; 0x64
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e1f3      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006822:	4b51      	ldr	r3, [pc, #324]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f0      	bne.n	8006810 <HAL_RCC_OscConfig+0xe8>
 800682e:	e000      	b.n	8006832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d063      	beq.n	8006906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800683e:	4b4a      	ldr	r3, [pc, #296]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684a:	4b47      	ldr	r3, [pc, #284]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006852:	2b08      	cmp	r3, #8
 8006854:	d11c      	bne.n	8006890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006856:	4b44      	ldr	r3, [pc, #272]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d116      	bne.n	8006890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006862:	4b41      	ldr	r3, [pc, #260]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_RCC_OscConfig+0x152>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d001      	beq.n	800687a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e1c7      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687a:	4b3b      	ldr	r3, [pc, #236]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	4937      	ldr	r1, [pc, #220]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800688a:	4313      	orrs	r3, r2
 800688c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688e:	e03a      	b.n	8006906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d020      	beq.n	80068da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006898:	4b34      	ldr	r3, [pc, #208]	; (800696c <HAL_RCC_OscConfig+0x244>)
 800689a:	2201      	movs	r2, #1
 800689c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689e:	f7fc ff99 	bl	80037d4 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068a6:	f7fc ff95 	bl	80037d4 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e1a8      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b8:	4b2b      	ldr	r3, [pc, #172]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0f0      	beq.n	80068a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c4:	4b28      	ldr	r3, [pc, #160]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4925      	ldr	r1, [pc, #148]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	600b      	str	r3, [r1, #0]
 80068d8:	e015      	b.n	8006906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068da:	4b24      	ldr	r3, [pc, #144]	; (800696c <HAL_RCC_OscConfig+0x244>)
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e0:	f7fc ff78 	bl	80037d4 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068e8:	f7fc ff74 	bl	80037d4 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e187      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068fa:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f0      	bne.n	80068e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b00      	cmp	r3, #0
 8006910:	d036      	beq.n	8006980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d016      	beq.n	8006948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800691a:	4b15      	ldr	r3, [pc, #84]	; (8006970 <HAL_RCC_OscConfig+0x248>)
 800691c:	2201      	movs	r2, #1
 800691e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006920:	f7fc ff58 	bl	80037d4 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006928:	f7fc ff54 	bl	80037d4 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e167      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800693a:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800693c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0x200>
 8006946:	e01b      	b.n	8006980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <HAL_RCC_OscConfig+0x248>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694e:	f7fc ff41 	bl	80037d4 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006954:	e00e      	b.n	8006974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006956:	f7fc ff3d 	bl	80037d4 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d907      	bls.n	8006974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e150      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
 8006968:	40023800 	.word	0x40023800
 800696c:	42470000 	.word	0x42470000
 8006970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006974:	4b88      	ldr	r3, [pc, #544]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ea      	bne.n	8006956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 8097 	beq.w	8006abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006992:	4b81      	ldr	r3, [pc, #516]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10f      	bne.n	80069be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	4b7d      	ldr	r3, [pc, #500]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	4a7c      	ldr	r2, [pc, #496]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 80069a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ac:	6413      	str	r3, [r2, #64]	; 0x40
 80069ae:	4b7a      	ldr	r3, [pc, #488]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b6:	60bb      	str	r3, [r7, #8]
 80069b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ba:	2301      	movs	r3, #1
 80069bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069be:	4b77      	ldr	r3, [pc, #476]	; (8006b9c <HAL_RCC_OscConfig+0x474>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d118      	bne.n	80069fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ca:	4b74      	ldr	r3, [pc, #464]	; (8006b9c <HAL_RCC_OscConfig+0x474>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a73      	ldr	r2, [pc, #460]	; (8006b9c <HAL_RCC_OscConfig+0x474>)
 80069d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069d6:	f7fc fefd 	bl	80037d4 <HAL_GetTick>
 80069da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069dc:	e008      	b.n	80069f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069de:	f7fc fef9 	bl	80037d4 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e10c      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f0:	4b6a      	ldr	r3, [pc, #424]	; (8006b9c <HAL_RCC_OscConfig+0x474>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0f0      	beq.n	80069de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d106      	bne.n	8006a12 <HAL_RCC_OscConfig+0x2ea>
 8006a04:	4b64      	ldr	r3, [pc, #400]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a08:	4a63      	ldr	r2, [pc, #396]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a10:	e01c      	b.n	8006a4c <HAL_RCC_OscConfig+0x324>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b05      	cmp	r3, #5
 8006a18:	d10c      	bne.n	8006a34 <HAL_RCC_OscConfig+0x30c>
 8006a1a:	4b5f      	ldr	r3, [pc, #380]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4a5e      	ldr	r2, [pc, #376]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a20:	f043 0304 	orr.w	r3, r3, #4
 8006a24:	6713      	str	r3, [r2, #112]	; 0x70
 8006a26:	4b5c      	ldr	r3, [pc, #368]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	4a5b      	ldr	r2, [pc, #364]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6713      	str	r3, [r2, #112]	; 0x70
 8006a32:	e00b      	b.n	8006a4c <HAL_RCC_OscConfig+0x324>
 8006a34:	4b58      	ldr	r3, [pc, #352]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a38:	4a57      	ldr	r2, [pc, #348]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a40:	4b55      	ldr	r3, [pc, #340]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a44:	4a54      	ldr	r2, [pc, #336]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a46:	f023 0304 	bic.w	r3, r3, #4
 8006a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a54:	f7fc febe 	bl	80037d4 <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a5c:	f7fc feba 	bl	80037d4 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e0cb      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a72:	4b49      	ldr	r3, [pc, #292]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ee      	beq.n	8006a5c <HAL_RCC_OscConfig+0x334>
 8006a7e:	e014      	b.n	8006aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a80:	f7fc fea8 	bl	80037d4 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a88:	f7fc fea4 	bl	80037d4 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e0b5      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a9e:	4b3e      	ldr	r3, [pc, #248]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ee      	bne.n	8006a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aaa:	7dfb      	ldrb	r3, [r7, #23]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d105      	bne.n	8006abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ab0:	4b39      	ldr	r3, [pc, #228]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab4:	4a38      	ldr	r2, [pc, #224]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 80a1 	beq.w	8006c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ac6:	4b34      	ldr	r3, [pc, #208]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d05c      	beq.n	8006b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d141      	bne.n	8006b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ada:	4b31      	ldr	r3, [pc, #196]	; (8006ba0 <HAL_RCC_OscConfig+0x478>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae0:	f7fc fe78 	bl	80037d4 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae8:	f7fc fe74 	bl	80037d4 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e087      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afa:	4b27      	ldr	r3, [pc, #156]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f0      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69da      	ldr	r2, [r3, #28]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	019b      	lsls	r3, r3, #6
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	041b      	lsls	r3, r3, #16
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	061b      	lsls	r3, r3, #24
 8006b2a:	491b      	ldr	r1, [pc, #108]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b30:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <HAL_RCC_OscConfig+0x478>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b36:	f7fc fe4d 	bl	80037d4 <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3e:	f7fc fe49 	bl	80037d4 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e05c      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b50:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCC_OscConfig+0x416>
 8006b5c:	e054      	b.n	8006c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b5e:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <HAL_RCC_OscConfig+0x478>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b64:	f7fc fe36 	bl	80037d4 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b6c:	f7fc fe32 	bl	80037d4 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e045      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7e:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0x444>
 8006b8a:	e03d      	b.n	8006c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e038      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	40007000 	.word	0x40007000
 8006ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ba4:	4b1b      	ldr	r3, [pc, #108]	; (8006c14 <HAL_RCC_OscConfig+0x4ec>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d028      	beq.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d121      	bne.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d11a      	bne.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d111      	bne.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	3b01      	subs	r3, #1
 8006bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d107      	bne.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	40023800 	.word	0x40023800

08006c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e0cc      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c2c:	4b68      	ldr	r3, [pc, #416]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d90c      	bls.n	8006c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3a:	4b65      	ldr	r3, [pc, #404]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b63      	ldr	r3, [pc, #396]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0b8      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d020      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c6c:	4b59      	ldr	r3, [pc, #356]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	4a58      	ldr	r2, [pc, #352]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c84:	4b53      	ldr	r3, [pc, #332]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	4a52      	ldr	r2, [pc, #328]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c90:	4b50      	ldr	r3, [pc, #320]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	494d      	ldr	r1, [pc, #308]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d044      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb6:	4b47      	ldr	r3, [pc, #284]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d119      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e07f      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d003      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d107      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd6:	4b3f      	ldr	r3, [pc, #252]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e06f      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce6:	4b3b      	ldr	r3, [pc, #236]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e067      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cf6:	4b37      	ldr	r3, [pc, #220]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f023 0203 	bic.w	r2, r3, #3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	4934      	ldr	r1, [pc, #208]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d08:	f7fc fd64 	bl	80037d4 <HAL_GetTick>
 8006d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0e:	e00a      	b.n	8006d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d10:	f7fc fd60 	bl	80037d4 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e04f      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d26:	4b2b      	ldr	r3, [pc, #172]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 020c 	and.w	r2, r3, #12
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d1eb      	bne.n	8006d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d38:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d20c      	bcs.n	8006d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d46:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4e:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d001      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e032      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d6c:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4916      	ldr	r1, [pc, #88]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d8a:	4b12      	ldr	r3, [pc, #72]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	490e      	ldr	r1, [pc, #56]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d9e:	f000 f821 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8006da2:	4602      	mov	r2, r0
 8006da4:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	091b      	lsrs	r3, r3, #4
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	490a      	ldr	r1, [pc, #40]	; (8006dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8006db0:	5ccb      	ldrb	r3, [r1, r3]
 8006db2:	fa22 f303 	lsr.w	r3, r2, r3
 8006db6:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <HAL_RCC_ClockConfig+0x1c4>)
 8006db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fc fb9c 	bl	80034fc <HAL_InitTick>

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40023c00 	.word	0x40023c00
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	0800bd64 	.word	0x0800bd64
 8006ddc:	20000004 	.word	0x20000004
 8006de0:	20000008 	.word	0x20000008

08006de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006de8:	b094      	sub	sp, #80	; 0x50
 8006dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	647b      	str	r3, [r7, #68]	; 0x44
 8006df0:	2300      	movs	r3, #0
 8006df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006df4:	2300      	movs	r3, #0
 8006df6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dfc:	4b79      	ldr	r3, [pc, #484]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 030c 	and.w	r3, r3, #12
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d00d      	beq.n	8006e24 <HAL_RCC_GetSysClockFreq+0x40>
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	f200 80e1 	bhi.w	8006fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_RCC_GetSysClockFreq+0x34>
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d003      	beq.n	8006e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8006e16:	e0db      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e18:	4b73      	ldr	r3, [pc, #460]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e1c:	e0db      	b.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e1e:	4b73      	ldr	r3, [pc, #460]	; (8006fec <HAL_RCC_GetSysClockFreq+0x208>)
 8006e20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e22:	e0d8      	b.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e24:	4b6f      	ldr	r3, [pc, #444]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e2e:	4b6d      	ldr	r3, [pc, #436]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d063      	beq.n	8006f02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e3a:	4b6a      	ldr	r3, [pc, #424]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	099b      	lsrs	r3, r3, #6
 8006e40:	2200      	movs	r2, #0
 8006e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e4e:	2300      	movs	r3, #0
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
 8006e52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	f04f 0000 	mov.w	r0, #0
 8006e5e:	f04f 0100 	mov.w	r1, #0
 8006e62:	0159      	lsls	r1, r3, #5
 8006e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e68:	0150      	lsls	r0, r2, #5
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4621      	mov	r1, r4
 8006e70:	1a51      	subs	r1, r2, r1
 8006e72:	6139      	str	r1, [r7, #16]
 8006e74:	4629      	mov	r1, r5
 8006e76:	eb63 0301 	sbc.w	r3, r3, r1
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	f04f 0300 	mov.w	r3, #0
 8006e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e88:	4659      	mov	r1, fp
 8006e8a:	018b      	lsls	r3, r1, #6
 8006e8c:	4651      	mov	r1, sl
 8006e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e92:	4651      	mov	r1, sl
 8006e94:	018a      	lsls	r2, r1, #6
 8006e96:	4651      	mov	r1, sl
 8006e98:	ebb2 0801 	subs.w	r8, r2, r1
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	eb63 0901 	sbc.w	r9, r3, r1
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eb6:	4690      	mov	r8, r2
 8006eb8:	4699      	mov	r9, r3
 8006eba:	4623      	mov	r3, r4
 8006ebc:	eb18 0303 	adds.w	r3, r8, r3
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	eb49 0303 	adc.w	r3, r9, r3
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	024b      	lsls	r3, r1, #9
 8006eda:	4621      	mov	r1, r4
 8006edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	024a      	lsls	r2, r1, #9
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eea:	2200      	movs	r2, #0
 8006eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ef4:	f7f9 fcda 	bl	80008ac <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4613      	mov	r3, r2
 8006efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f00:	e058      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f02:	4b38      	ldr	r3, [pc, #224]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	099b      	lsrs	r3, r3, #6
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f12:	623b      	str	r3, [r7, #32]
 8006f14:	2300      	movs	r3, #0
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
 8006f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	464b      	mov	r3, r9
 8006f20:	f04f 0000 	mov.w	r0, #0
 8006f24:	f04f 0100 	mov.w	r1, #0
 8006f28:	0159      	lsls	r1, r3, #5
 8006f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f2e:	0150      	lsls	r0, r2, #5
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4641      	mov	r1, r8
 8006f36:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f54:	ebb2 040a 	subs.w	r4, r2, sl
 8006f58:	eb63 050b 	sbc.w	r5, r3, fp
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	00eb      	lsls	r3, r5, #3
 8006f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f6a:	00e2      	lsls	r2, r4, #3
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	461d      	mov	r5, r3
 8006f70:	4643      	mov	r3, r8
 8006f72:	18e3      	adds	r3, r4, r3
 8006f74:	603b      	str	r3, [r7, #0]
 8006f76:	464b      	mov	r3, r9
 8006f78:	eb45 0303 	adc.w	r3, r5, r3
 8006f7c:	607b      	str	r3, [r7, #4]
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	028b      	lsls	r3, r1, #10
 8006f8e:	4621      	mov	r1, r4
 8006f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f94:	4621      	mov	r1, r4
 8006f96:	028a      	lsls	r2, r1, #10
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	61fa      	str	r2, [r7, #28]
 8006fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fa8:	f7f9 fc80 	bl	80008ac <__aeabi_uldivmod>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fb4:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fce:	e002      	b.n	8006fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3750      	adds	r7, #80	; 0x50
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	00f42400 	.word	0x00f42400
 8006fec:	007a1200 	.word	0x007a1200

08006ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ff4:	4b03      	ldr	r3, [pc, #12]	; (8007004 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000004 	.word	0x20000004

08007008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800700c:	f7ff fff0 	bl	8006ff0 <HAL_RCC_GetHCLKFreq>
 8007010:	4602      	mov	r2, r0
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	0a9b      	lsrs	r3, r3, #10
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	4903      	ldr	r1, [pc, #12]	; (800702c <HAL_RCC_GetPCLK1Freq+0x24>)
 800701e:	5ccb      	ldrb	r3, [r1, r3]
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007024:	4618      	mov	r0, r3
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40023800 	.word	0x40023800
 800702c:	0800bd74 	.word	0x0800bd74

08007030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007034:	f7ff ffdc 	bl	8006ff0 <HAL_RCC_GetHCLKFreq>
 8007038:	4602      	mov	r2, r0
 800703a:	4b05      	ldr	r3, [pc, #20]	; (8007050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	0b5b      	lsrs	r3, r3, #13
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	4903      	ldr	r1, [pc, #12]	; (8007054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007046:	5ccb      	ldrb	r3, [r1, r3]
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800704c:	4618      	mov	r0, r3
 800704e:	bd80      	pop	{r7, pc}
 8007050:	40023800 	.word	0x40023800
 8007054:	0800bd74 	.word	0x0800bd74

08007058 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	220f      	movs	r2, #15
 8007066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007068:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <HAL_RCC_GetClockConfig+0x5c>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 0203 	and.w	r2, r3, #3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007074:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <HAL_RCC_GetClockConfig+0x5c>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007080:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <HAL_RCC_GetClockConfig+0x5c>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <HAL_RCC_GetClockConfig+0x5c>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	08db      	lsrs	r3, r3, #3
 8007092:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <HAL_RCC_GetClockConfig+0x60>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0207 	and.w	r2, r3, #7
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	601a      	str	r2, [r3, #0]
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40023800 	.word	0x40023800
 80070b8:	40023c00 	.word	0x40023c00

080070bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e041      	b.n	8007152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fc f96c 	bl	80033c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f000 fae2 	bl	80076c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b01      	cmp	r3, #1
 800716e:	d001      	beq.n	8007174 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e03c      	b.n	80071ee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1e      	ldr	r2, [pc, #120]	; (80071fc <HAL_TIM_Base_Start+0xa0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d018      	beq.n	80071b8 <HAL_TIM_Base_Start+0x5c>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718e:	d013      	beq.n	80071b8 <HAL_TIM_Base_Start+0x5c>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a1a      	ldr	r2, [pc, #104]	; (8007200 <HAL_TIM_Base_Start+0xa4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00e      	beq.n	80071b8 <HAL_TIM_Base_Start+0x5c>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a19      	ldr	r2, [pc, #100]	; (8007204 <HAL_TIM_Base_Start+0xa8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d009      	beq.n	80071b8 <HAL_TIM_Base_Start+0x5c>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a17      	ldr	r2, [pc, #92]	; (8007208 <HAL_TIM_Base_Start+0xac>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d004      	beq.n	80071b8 <HAL_TIM_Base_Start+0x5c>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a16      	ldr	r2, [pc, #88]	; (800720c <HAL_TIM_Base_Start+0xb0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d111      	bne.n	80071dc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b06      	cmp	r3, #6
 80071c8:	d010      	beq.n	80071ec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0201 	orr.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071da:	e007      	b.n	80071ec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	40010000 	.word	0x40010000
 8007200:	40000400 	.word	0x40000400
 8007204:	40000800 	.word	0x40000800
 8007208:	40000c00 	.word	0x40000c00
 800720c:	40014000 	.word	0x40014000

08007210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	d001      	beq.n	8007228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e044      	b.n	80072b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1e      	ldr	r2, [pc, #120]	; (80072c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d018      	beq.n	800727c <HAL_TIM_Base_Start_IT+0x6c>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007252:	d013      	beq.n	800727c <HAL_TIM_Base_Start_IT+0x6c>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1a      	ldr	r2, [pc, #104]	; (80072c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d00e      	beq.n	800727c <HAL_TIM_Base_Start_IT+0x6c>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a19      	ldr	r2, [pc, #100]	; (80072c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d009      	beq.n	800727c <HAL_TIM_Base_Start_IT+0x6c>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a17      	ldr	r2, [pc, #92]	; (80072cc <HAL_TIM_Base_Start_IT+0xbc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <HAL_TIM_Base_Start_IT+0x6c>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d111      	bne.n	80072a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b06      	cmp	r3, #6
 800728c:	d010      	beq.n	80072b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729e:	e007      	b.n	80072b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0201 	orr.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40010000 	.word	0x40010000
 80072c4:	40000400 	.word	0x40000400
 80072c8:	40000800 	.word	0x40000800
 80072cc:	40000c00 	.word	0x40000c00
 80072d0:	40014000 	.word	0x40014000

080072d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d122      	bne.n	8007330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d11b      	bne.n	8007330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0202 	mvn.w	r2, #2
 8007300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f9b5 	bl	8007686 <HAL_TIM_IC_CaptureCallback>
 800731c:	e005      	b.n	800732a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9a7 	bl	8007672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f9b8 	bl	800769a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	2b04      	cmp	r3, #4
 800733c:	d122      	bne.n	8007384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b04      	cmp	r3, #4
 800734a:	d11b      	bne.n	8007384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f06f 0204 	mvn.w	r2, #4
 8007354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f98b 	bl	8007686 <HAL_TIM_IC_CaptureCallback>
 8007370:	e005      	b.n	800737e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f97d 	bl	8007672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f98e 	bl	800769a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b08      	cmp	r3, #8
 8007390:	d122      	bne.n	80073d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f003 0308 	and.w	r3, r3, #8
 800739c:	2b08      	cmp	r3, #8
 800739e:	d11b      	bne.n	80073d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f06f 0208 	mvn.w	r2, #8
 80073a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2204      	movs	r2, #4
 80073ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f961 	bl	8007686 <HAL_TIM_IC_CaptureCallback>
 80073c4:	e005      	b.n	80073d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f953 	bl	8007672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f964 	bl	800769a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	f003 0310 	and.w	r3, r3, #16
 80073e2:	2b10      	cmp	r3, #16
 80073e4:	d122      	bne.n	800742c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d11b      	bne.n	800742c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f06f 0210 	mvn.w	r2, #16
 80073fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2208      	movs	r2, #8
 8007402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f937 	bl	8007686 <HAL_TIM_IC_CaptureCallback>
 8007418:	e005      	b.n	8007426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f929 	bl	8007672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f93a 	bl	800769a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b01      	cmp	r3, #1
 8007438:	d10e      	bne.n	8007458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b01      	cmp	r3, #1
 8007446:	d107      	bne.n	8007458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f06f 0201 	mvn.w	r2, #1
 8007450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fb fec0 	bl	80031d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007462:	2b80      	cmp	r3, #128	; 0x80
 8007464:	d10e      	bne.n	8007484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d107      	bne.n	8007484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800747c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fab2 	bl	80079e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d10e      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	d107      	bne.n	80074b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f8ff 	bl	80076ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d10e      	bne.n	80074dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d107      	bne.n	80074dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f06f 0220 	mvn.w	r2, #32
 80074d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa7c 	bl	80079d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_TIM_ConfigClockSource+0x1c>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e0b4      	b.n	800766a <HAL_TIM_ConfigClockSource+0x186>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800751e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007538:	d03e      	beq.n	80075b8 <HAL_TIM_ConfigClockSource+0xd4>
 800753a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800753e:	f200 8087 	bhi.w	8007650 <HAL_TIM_ConfigClockSource+0x16c>
 8007542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007546:	f000 8086 	beq.w	8007656 <HAL_TIM_ConfigClockSource+0x172>
 800754a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800754e:	d87f      	bhi.n	8007650 <HAL_TIM_ConfigClockSource+0x16c>
 8007550:	2b70      	cmp	r3, #112	; 0x70
 8007552:	d01a      	beq.n	800758a <HAL_TIM_ConfigClockSource+0xa6>
 8007554:	2b70      	cmp	r3, #112	; 0x70
 8007556:	d87b      	bhi.n	8007650 <HAL_TIM_ConfigClockSource+0x16c>
 8007558:	2b60      	cmp	r3, #96	; 0x60
 800755a:	d050      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x11a>
 800755c:	2b60      	cmp	r3, #96	; 0x60
 800755e:	d877      	bhi.n	8007650 <HAL_TIM_ConfigClockSource+0x16c>
 8007560:	2b50      	cmp	r3, #80	; 0x50
 8007562:	d03c      	beq.n	80075de <HAL_TIM_ConfigClockSource+0xfa>
 8007564:	2b50      	cmp	r3, #80	; 0x50
 8007566:	d873      	bhi.n	8007650 <HAL_TIM_ConfigClockSource+0x16c>
 8007568:	2b40      	cmp	r3, #64	; 0x40
 800756a:	d058      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x13a>
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	d86f      	bhi.n	8007650 <HAL_TIM_ConfigClockSource+0x16c>
 8007570:	2b30      	cmp	r3, #48	; 0x30
 8007572:	d064      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x15a>
 8007574:	2b30      	cmp	r3, #48	; 0x30
 8007576:	d86b      	bhi.n	8007650 <HAL_TIM_ConfigClockSource+0x16c>
 8007578:	2b20      	cmp	r3, #32
 800757a:	d060      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x15a>
 800757c:	2b20      	cmp	r3, #32
 800757e:	d867      	bhi.n	8007650 <HAL_TIM_ConfigClockSource+0x16c>
 8007580:	2b00      	cmp	r3, #0
 8007582:	d05c      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x15a>
 8007584:	2b10      	cmp	r3, #16
 8007586:	d05a      	beq.n	800763e <HAL_TIM_ConfigClockSource+0x15a>
 8007588:	e062      	b.n	8007650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	6899      	ldr	r1, [r3, #8]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	f000 f98d 	bl	80078b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	609a      	str	r2, [r3, #8]
      break;
 80075b6:	e04f      	b.n	8007658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	6899      	ldr	r1, [r3, #8]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f000 f976 	bl	80078b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075da:	609a      	str	r2, [r3, #8]
      break;
 80075dc:	e03c      	b.n	8007658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	6859      	ldr	r1, [r3, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f000 f8ea 	bl	80077c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2150      	movs	r1, #80	; 0x50
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 f943 	bl	8007882 <TIM_ITRx_SetConfig>
      break;
 80075fc:	e02c      	b.n	8007658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	6859      	ldr	r1, [r3, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	461a      	mov	r2, r3
 800760c:	f000 f909 	bl	8007822 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2160      	movs	r1, #96	; 0x60
 8007616:	4618      	mov	r0, r3
 8007618:	f000 f933 	bl	8007882 <TIM_ITRx_SetConfig>
      break;
 800761c:	e01c      	b.n	8007658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6818      	ldr	r0, [r3, #0]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	6859      	ldr	r1, [r3, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	461a      	mov	r2, r3
 800762c:	f000 f8ca 	bl	80077c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2140      	movs	r1, #64	; 0x40
 8007636:	4618      	mov	r0, r3
 8007638:	f000 f923 	bl	8007882 <TIM_ITRx_SetConfig>
      break;
 800763c:	e00c      	b.n	8007658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f000 f91a 	bl	8007882 <TIM_ITRx_SetConfig>
      break;
 800764e:	e003      	b.n	8007658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	73fb      	strb	r3, [r7, #15]
      break;
 8007654:	e000      	b.n	8007658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007668:	7bfb      	ldrb	r3, [r7, #15]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a34      	ldr	r2, [pc, #208]	; (80077a8 <TIM_Base_SetConfig+0xe4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d00f      	beq.n	80076fc <TIM_Base_SetConfig+0x38>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d00b      	beq.n	80076fc <TIM_Base_SetConfig+0x38>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a31      	ldr	r2, [pc, #196]	; (80077ac <TIM_Base_SetConfig+0xe8>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d007      	beq.n	80076fc <TIM_Base_SetConfig+0x38>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a30      	ldr	r2, [pc, #192]	; (80077b0 <TIM_Base_SetConfig+0xec>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d003      	beq.n	80076fc <TIM_Base_SetConfig+0x38>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a2f      	ldr	r2, [pc, #188]	; (80077b4 <TIM_Base_SetConfig+0xf0>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d108      	bne.n	800770e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a25      	ldr	r2, [pc, #148]	; (80077a8 <TIM_Base_SetConfig+0xe4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d01b      	beq.n	800774e <TIM_Base_SetConfig+0x8a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771c:	d017      	beq.n	800774e <TIM_Base_SetConfig+0x8a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a22      	ldr	r2, [pc, #136]	; (80077ac <TIM_Base_SetConfig+0xe8>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <TIM_Base_SetConfig+0x8a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a21      	ldr	r2, [pc, #132]	; (80077b0 <TIM_Base_SetConfig+0xec>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00f      	beq.n	800774e <TIM_Base_SetConfig+0x8a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a20      	ldr	r2, [pc, #128]	; (80077b4 <TIM_Base_SetConfig+0xf0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00b      	beq.n	800774e <TIM_Base_SetConfig+0x8a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a1f      	ldr	r2, [pc, #124]	; (80077b8 <TIM_Base_SetConfig+0xf4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d007      	beq.n	800774e <TIM_Base_SetConfig+0x8a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <TIM_Base_SetConfig+0xf8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d003      	beq.n	800774e <TIM_Base_SetConfig+0x8a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a1d      	ldr	r2, [pc, #116]	; (80077c0 <TIM_Base_SetConfig+0xfc>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d108      	bne.n	8007760 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <TIM_Base_SetConfig+0xe4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d103      	bne.n	8007794 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	691a      	ldr	r2, [r3, #16]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	615a      	str	r2, [r3, #20]
}
 800779a:	bf00      	nop
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	40010000 	.word	0x40010000
 80077ac:	40000400 	.word	0x40000400
 80077b0:	40000800 	.word	0x40000800
 80077b4:	40000c00 	.word	0x40000c00
 80077b8:	40014000 	.word	0x40014000
 80077bc:	40014400 	.word	0x40014400
 80077c0:	40014800 	.word	0x40014800

080077c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f023 0201 	bic.w	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f023 030a 	bic.w	r3, r3, #10
 8007800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007822:	b480      	push	{r7}
 8007824:	b087      	sub	sp, #28
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0210 	bic.w	r2, r3, #16
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800784c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	031b      	lsls	r3, r3, #12
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800785e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	4313      	orrs	r3, r2
 8007868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	621a      	str	r2, [r3, #32]
}
 8007876:	bf00      	nop
 8007878:	371c      	adds	r7, #28
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	f043 0307 	orr.w	r3, r3, #7
 80078a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	609a      	str	r2, [r3, #8]
}
 80078ac:	bf00      	nop
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	021a      	lsls	r2, r3, #8
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	431a      	orrs	r2, r3
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4313      	orrs	r3, r2
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	609a      	str	r2, [r3, #8]
}
 80078ec:	bf00      	nop
 80078ee:	371c      	adds	r7, #28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800790c:	2302      	movs	r3, #2
 800790e:	e050      	b.n	80079b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a1c      	ldr	r2, [pc, #112]	; (80079c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d018      	beq.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795c:	d013      	beq.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a18      	ldr	r2, [pc, #96]	; (80079c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00e      	beq.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a16      	ldr	r2, [pc, #88]	; (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d009      	beq.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a15      	ldr	r2, [pc, #84]	; (80079cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d004      	beq.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a13      	ldr	r2, [pc, #76]	; (80079d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d10c      	bne.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800798c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	4313      	orrs	r3, r2
 8007996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40010000 	.word	0x40010000
 80079c4:	40000400 	.word	0x40000400
 80079c8:	40000800 	.word	0x40000800
 80079cc:	40000c00 	.word	0x40000c00
 80079d0:	40014000 	.word	0x40014000

080079d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e03f      	b.n	8007a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7fb fcec 	bl	8003400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2224      	movs	r2, #36	; 0x24
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f929 	bl	8007c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695a      	ldr	r2, [r3, #20]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b08a      	sub	sp, #40	; 0x28
 8007a9a:	af02      	add	r7, sp, #8
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	603b      	str	r3, [r7, #0]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d17c      	bne.n	8007bb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_UART_Transmit+0x2c>
 8007abc:	88fb      	ldrh	r3, [r7, #6]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e075      	b.n	8007bb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_UART_Transmit+0x3e>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e06e      	b.n	8007bb2 <HAL_UART_Transmit+0x11c>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2221      	movs	r2, #33	; 0x21
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007aea:	f7fb fe73 	bl	80037d4 <HAL_GetTick>
 8007aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	88fa      	ldrh	r2, [r7, #6]
 8007af4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	88fa      	ldrh	r2, [r7, #6]
 8007afa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b04:	d108      	bne.n	8007b18 <HAL_UART_Transmit+0x82>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d104      	bne.n	8007b18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	e003      	b.n	8007b20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b28:	e02a      	b.n	8007b80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2200      	movs	r2, #0
 8007b32:	2180      	movs	r1, #128	; 0x80
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f840 	bl	8007bba <UART_WaitOnFlagUntilTimeout>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e036      	b.n	8007bb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10b      	bne.n	8007b62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	61bb      	str	r3, [r7, #24]
 8007b60:	e007      	b.n	8007b72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1cf      	bne.n	8007b2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2200      	movs	r2, #0
 8007b92:	2140      	movs	r1, #64	; 0x40
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f810 	bl	8007bba <UART_WaitOnFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e006      	b.n	8007bb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e000      	b.n	8007bb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007bb0:	2302      	movs	r3, #2
  }
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b090      	sub	sp, #64	; 0x40
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	603b      	str	r3, [r7, #0]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bca:	e050      	b.n	8007c6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd2:	d04c      	beq.n	8007c6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <UART_WaitOnFlagUntilTimeout+0x30>
 8007bda:	f7fb fdfb 	bl	80037d4 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d241      	bcs.n	8007c6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	330c      	adds	r3, #12
 8007bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c0a:	637a      	str	r2, [r7, #52]	; 0x34
 8007c0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e5      	bne.n	8007bea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3314      	adds	r3, #20
 8007c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3314      	adds	r3, #20
 8007c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3e:	623a      	str	r2, [r7, #32]
 8007c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	69f9      	ldr	r1, [r7, #28]
 8007c44:	6a3a      	ldr	r2, [r7, #32]
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e5      	bne.n	8007c1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e00f      	b.n	8007c8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4013      	ands	r3, r2
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	bf0c      	ite	eq
 8007c7e:	2301      	moveq	r3, #1
 8007c80:	2300      	movne	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d09f      	beq.n	8007bcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3740      	adds	r7, #64	; 0x40
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c9c:	b0c0      	sub	sp, #256	; 0x100
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb4:	68d9      	ldr	r1, [r3, #12]
 8007cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	ea40 0301 	orr.w	r3, r0, r1
 8007cc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cf0:	f021 010c 	bic.w	r1, r1, #12
 8007cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d12:	6999      	ldr	r1, [r3, #24]
 8007d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	ea40 0301 	orr.w	r3, r0, r1
 8007d1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4b8f      	ldr	r3, [pc, #572]	; (8007f64 <UART_SetConfig+0x2cc>)
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d005      	beq.n	8007d38 <UART_SetConfig+0xa0>
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b8d      	ldr	r3, [pc, #564]	; (8007f68 <UART_SetConfig+0x2d0>)
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d104      	bne.n	8007d42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d38:	f7ff f97a 	bl	8007030 <HAL_RCC_GetPCLK2Freq>
 8007d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d40:	e003      	b.n	8007d4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d42:	f7ff f961 	bl	8007008 <HAL_RCC_GetPCLK1Freq>
 8007d46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d54:	f040 810c 	bne.w	8007f70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	1891      	adds	r1, r2, r2
 8007d70:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d72:	415b      	adcs	r3, r3
 8007d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	eb12 0801 	adds.w	r8, r2, r1
 8007d80:	4629      	mov	r1, r5
 8007d82:	eb43 0901 	adc.w	r9, r3, r1
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d9a:	4690      	mov	r8, r2
 8007d9c:	4699      	mov	r9, r3
 8007d9e:	4623      	mov	r3, r4
 8007da0:	eb18 0303 	adds.w	r3, r8, r3
 8007da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007da8:	462b      	mov	r3, r5
 8007daa:	eb49 0303 	adc.w	r3, r9, r3
 8007dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	18db      	adds	r3, r3, r3
 8007dca:	653b      	str	r3, [r7, #80]	; 0x50
 8007dcc:	4613      	mov	r3, r2
 8007dce:	eb42 0303 	adc.w	r3, r2, r3
 8007dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8007dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007dd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ddc:	f7f8 fd66 	bl	80008ac <__aeabi_uldivmod>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4b61      	ldr	r3, [pc, #388]	; (8007f6c <UART_SetConfig+0x2d4>)
 8007de6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	011c      	lsls	r4, r3, #4
 8007dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007df8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007dfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	1891      	adds	r1, r2, r2
 8007e06:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e08:	415b      	adcs	r3, r3
 8007e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e10:	4641      	mov	r1, r8
 8007e12:	eb12 0a01 	adds.w	sl, r2, r1
 8007e16:	4649      	mov	r1, r9
 8007e18:	eb43 0b01 	adc.w	fp, r3, r1
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e30:	4692      	mov	sl, r2
 8007e32:	469b      	mov	fp, r3
 8007e34:	4643      	mov	r3, r8
 8007e36:	eb1a 0303 	adds.w	r3, sl, r3
 8007e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	eb4b 0303 	adc.w	r3, fp, r3
 8007e44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	18db      	adds	r3, r3, r3
 8007e60:	643b      	str	r3, [r7, #64]	; 0x40
 8007e62:	4613      	mov	r3, r2
 8007e64:	eb42 0303 	adc.w	r3, r2, r3
 8007e68:	647b      	str	r3, [r7, #68]	; 0x44
 8007e6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e72:	f7f8 fd1b 	bl	80008ac <__aeabi_uldivmod>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4b3b      	ldr	r3, [pc, #236]	; (8007f6c <UART_SetConfig+0x2d4>)
 8007e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e82:	095b      	lsrs	r3, r3, #5
 8007e84:	2264      	movs	r2, #100	; 0x64
 8007e86:	fb02 f303 	mul.w	r3, r2, r3
 8007e8a:	1acb      	subs	r3, r1, r3
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e92:	4b36      	ldr	r3, [pc, #216]	; (8007f6c <UART_SetConfig+0x2d4>)
 8007e94:	fba3 2302 	umull	r2, r3, r3, r2
 8007e98:	095b      	lsrs	r3, r3, #5
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ea0:	441c      	add	r4, r3
 8007ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007eac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007eb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007eb4:	4642      	mov	r2, r8
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	1891      	adds	r1, r2, r2
 8007eba:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ebc:	415b      	adcs	r3, r3
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	1851      	adds	r1, r2, r1
 8007ec8:	6339      	str	r1, [r7, #48]	; 0x30
 8007eca:	4649      	mov	r1, r9
 8007ecc:	414b      	adcs	r3, r1
 8007ece:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed0:	f04f 0200 	mov.w	r2, #0
 8007ed4:	f04f 0300 	mov.w	r3, #0
 8007ed8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007edc:	4659      	mov	r1, fp
 8007ede:	00cb      	lsls	r3, r1, #3
 8007ee0:	4651      	mov	r1, sl
 8007ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ee6:	4651      	mov	r1, sl
 8007ee8:	00ca      	lsls	r2, r1, #3
 8007eea:	4610      	mov	r0, r2
 8007eec:	4619      	mov	r1, r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	189b      	adds	r3, r3, r2
 8007ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ef8:	464b      	mov	r3, r9
 8007efa:	460a      	mov	r2, r1
 8007efc:	eb42 0303 	adc.w	r3, r2, r3
 8007f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f18:	460b      	mov	r3, r1
 8007f1a:	18db      	adds	r3, r3, r3
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f1e:	4613      	mov	r3, r2
 8007f20:	eb42 0303 	adc.w	r3, r2, r3
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f2e:	f7f8 fcbd 	bl	80008ac <__aeabi_uldivmod>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <UART_SetConfig+0x2d4>)
 8007f38:	fba3 1302 	umull	r1, r3, r3, r2
 8007f3c:	095b      	lsrs	r3, r3, #5
 8007f3e:	2164      	movs	r1, #100	; 0x64
 8007f40:	fb01 f303 	mul.w	r3, r1, r3
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	3332      	adds	r3, #50	; 0x32
 8007f4a:	4a08      	ldr	r2, [pc, #32]	; (8007f6c <UART_SetConfig+0x2d4>)
 8007f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f50:	095b      	lsrs	r3, r3, #5
 8007f52:	f003 0207 	and.w	r2, r3, #7
 8007f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4422      	add	r2, r4
 8007f5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f60:	e105      	b.n	800816e <UART_SetConfig+0x4d6>
 8007f62:	bf00      	nop
 8007f64:	40011000 	.word	0x40011000
 8007f68:	40011400 	.word	0x40011400
 8007f6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f82:	4642      	mov	r2, r8
 8007f84:	464b      	mov	r3, r9
 8007f86:	1891      	adds	r1, r2, r2
 8007f88:	6239      	str	r1, [r7, #32]
 8007f8a:	415b      	adcs	r3, r3
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f92:	4641      	mov	r1, r8
 8007f94:	1854      	adds	r4, r2, r1
 8007f96:	4649      	mov	r1, r9
 8007f98:	eb43 0501 	adc.w	r5, r3, r1
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	00eb      	lsls	r3, r5, #3
 8007fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007faa:	00e2      	lsls	r2, r4, #3
 8007fac:	4614      	mov	r4, r2
 8007fae:	461d      	mov	r5, r3
 8007fb0:	4643      	mov	r3, r8
 8007fb2:	18e3      	adds	r3, r4, r3
 8007fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fb8:	464b      	mov	r3, r9
 8007fba:	eb45 0303 	adc.w	r3, r5, r3
 8007fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007fde:	4629      	mov	r1, r5
 8007fe0:	008b      	lsls	r3, r1, #2
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fe8:	4621      	mov	r1, r4
 8007fea:	008a      	lsls	r2, r1, #2
 8007fec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ff0:	f7f8 fc5c 	bl	80008ac <__aeabi_uldivmod>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4b60      	ldr	r3, [pc, #384]	; (800817c <UART_SetConfig+0x4e4>)
 8007ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8007ffe:	095b      	lsrs	r3, r3, #5
 8008000:	011c      	lsls	r4, r3, #4
 8008002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008006:	2200      	movs	r2, #0
 8008008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800800c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008010:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008014:	4642      	mov	r2, r8
 8008016:	464b      	mov	r3, r9
 8008018:	1891      	adds	r1, r2, r2
 800801a:	61b9      	str	r1, [r7, #24]
 800801c:	415b      	adcs	r3, r3
 800801e:	61fb      	str	r3, [r7, #28]
 8008020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008024:	4641      	mov	r1, r8
 8008026:	1851      	adds	r1, r2, r1
 8008028:	6139      	str	r1, [r7, #16]
 800802a:	4649      	mov	r1, r9
 800802c:	414b      	adcs	r3, r1
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	f04f 0200 	mov.w	r2, #0
 8008034:	f04f 0300 	mov.w	r3, #0
 8008038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800803c:	4659      	mov	r1, fp
 800803e:	00cb      	lsls	r3, r1, #3
 8008040:	4651      	mov	r1, sl
 8008042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008046:	4651      	mov	r1, sl
 8008048:	00ca      	lsls	r2, r1, #3
 800804a:	4610      	mov	r0, r2
 800804c:	4619      	mov	r1, r3
 800804e:	4603      	mov	r3, r0
 8008050:	4642      	mov	r2, r8
 8008052:	189b      	adds	r3, r3, r2
 8008054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008058:	464b      	mov	r3, r9
 800805a:	460a      	mov	r2, r1
 800805c:	eb42 0303 	adc.w	r3, r2, r3
 8008060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	67bb      	str	r3, [r7, #120]	; 0x78
 800806e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	f04f 0300 	mov.w	r3, #0
 8008078:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800807c:	4649      	mov	r1, r9
 800807e:	008b      	lsls	r3, r1, #2
 8008080:	4641      	mov	r1, r8
 8008082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008086:	4641      	mov	r1, r8
 8008088:	008a      	lsls	r2, r1, #2
 800808a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800808e:	f7f8 fc0d 	bl	80008ac <__aeabi_uldivmod>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4b39      	ldr	r3, [pc, #228]	; (800817c <UART_SetConfig+0x4e4>)
 8008098:	fba3 1302 	umull	r1, r3, r3, r2
 800809c:	095b      	lsrs	r3, r3, #5
 800809e:	2164      	movs	r1, #100	; 0x64
 80080a0:	fb01 f303 	mul.w	r3, r1, r3
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	3332      	adds	r3, #50	; 0x32
 80080aa:	4a34      	ldr	r2, [pc, #208]	; (800817c <UART_SetConfig+0x4e4>)
 80080ac:	fba2 2303 	umull	r2, r3, r2, r3
 80080b0:	095b      	lsrs	r3, r3, #5
 80080b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080b6:	441c      	add	r4, r3
 80080b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080bc:	2200      	movs	r2, #0
 80080be:	673b      	str	r3, [r7, #112]	; 0x70
 80080c0:	677a      	str	r2, [r7, #116]	; 0x74
 80080c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080c6:	4642      	mov	r2, r8
 80080c8:	464b      	mov	r3, r9
 80080ca:	1891      	adds	r1, r2, r2
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	415b      	adcs	r3, r3
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080d6:	4641      	mov	r1, r8
 80080d8:	1851      	adds	r1, r2, r1
 80080da:	6039      	str	r1, [r7, #0]
 80080dc:	4649      	mov	r1, r9
 80080de:	414b      	adcs	r3, r1
 80080e0:	607b      	str	r3, [r7, #4]
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080ee:	4659      	mov	r1, fp
 80080f0:	00cb      	lsls	r3, r1, #3
 80080f2:	4651      	mov	r1, sl
 80080f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080f8:	4651      	mov	r1, sl
 80080fa:	00ca      	lsls	r2, r1, #3
 80080fc:	4610      	mov	r0, r2
 80080fe:	4619      	mov	r1, r3
 8008100:	4603      	mov	r3, r0
 8008102:	4642      	mov	r2, r8
 8008104:	189b      	adds	r3, r3, r2
 8008106:	66bb      	str	r3, [r7, #104]	; 0x68
 8008108:	464b      	mov	r3, r9
 800810a:	460a      	mov	r2, r1
 800810c:	eb42 0303 	adc.w	r3, r2, r3
 8008110:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	663b      	str	r3, [r7, #96]	; 0x60
 800811c:	667a      	str	r2, [r7, #100]	; 0x64
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800812a:	4649      	mov	r1, r9
 800812c:	008b      	lsls	r3, r1, #2
 800812e:	4641      	mov	r1, r8
 8008130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008134:	4641      	mov	r1, r8
 8008136:	008a      	lsls	r2, r1, #2
 8008138:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800813c:	f7f8 fbb6 	bl	80008ac <__aeabi_uldivmod>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4b0d      	ldr	r3, [pc, #52]	; (800817c <UART_SetConfig+0x4e4>)
 8008146:	fba3 1302 	umull	r1, r3, r3, r2
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	2164      	movs	r1, #100	; 0x64
 800814e:	fb01 f303 	mul.w	r3, r1, r3
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	3332      	adds	r3, #50	; 0x32
 8008158:	4a08      	ldr	r2, [pc, #32]	; (800817c <UART_SetConfig+0x4e4>)
 800815a:	fba2 2303 	umull	r2, r3, r2, r3
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	f003 020f 	and.w	r2, r3, #15
 8008164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4422      	add	r2, r4
 800816c:	609a      	str	r2, [r3, #8]
}
 800816e:	bf00      	nop
 8008170:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008174:	46bd      	mov	sp, r7
 8008176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800817a:	bf00      	nop
 800817c:	51eb851f 	.word	0x51eb851f

08008180 <__NVIC_SetPriority>:
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800818c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008190:	2b00      	cmp	r3, #0
 8008192:	db0a      	blt.n	80081aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	b2da      	uxtb	r2, r3
 8008198:	490c      	ldr	r1, [pc, #48]	; (80081cc <__NVIC_SetPriority+0x4c>)
 800819a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800819e:	0112      	lsls	r2, r2, #4
 80081a0:	b2d2      	uxtb	r2, r2
 80081a2:	440b      	add	r3, r1
 80081a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081a8:	e00a      	b.n	80081c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	4908      	ldr	r1, [pc, #32]	; (80081d0 <__NVIC_SetPriority+0x50>)
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	3b04      	subs	r3, #4
 80081b8:	0112      	lsls	r2, r2, #4
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	440b      	add	r3, r1
 80081be:	761a      	strb	r2, [r3, #24]
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	e000e100 	.word	0xe000e100
 80081d0:	e000ed00 	.word	0xe000ed00

080081d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081d8:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <SysTick_Handler+0x1c>)
 80081da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081dc:	f001 ff12 	bl	800a004 <xTaskGetSchedulerState>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d001      	beq.n	80081ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081e6:	f002 fcf7 	bl	800abd8 <xPortSysTickHandler>
  }
}
 80081ea:	bf00      	nop
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	e000e010 	.word	0xe000e010

080081f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081f8:	2100      	movs	r1, #0
 80081fa:	f06f 0004 	mvn.w	r0, #4
 80081fe:	f7ff ffbf 	bl	8008180 <__NVIC_SetPriority>
#endif
}
 8008202:	bf00      	nop
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800820e:	f3ef 8305 	mrs	r3, IPSR
 8008212:	603b      	str	r3, [r7, #0]
  return(result);
 8008214:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800821a:	f06f 0305 	mvn.w	r3, #5
 800821e:	607b      	str	r3, [r7, #4]
 8008220:	e00c      	b.n	800823c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008222:	4b0a      	ldr	r3, [pc, #40]	; (800824c <osKernelInitialize+0x44>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d105      	bne.n	8008236 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800822a:	4b08      	ldr	r3, [pc, #32]	; (800824c <osKernelInitialize+0x44>)
 800822c:	2201      	movs	r2, #1
 800822e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008230:	2300      	movs	r3, #0
 8008232:	607b      	str	r3, [r7, #4]
 8008234:	e002      	b.n	800823c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008236:	f04f 33ff 	mov.w	r3, #4294967295
 800823a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800823c:	687b      	ldr	r3, [r7, #4]
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20002d48 	.word	0x20002d48

08008250 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008256:	f3ef 8305 	mrs	r3, IPSR
 800825a:	603b      	str	r3, [r7, #0]
  return(result);
 800825c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008262:	f06f 0305 	mvn.w	r3, #5
 8008266:	607b      	str	r3, [r7, #4]
 8008268:	e010      	b.n	800828c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800826a:	4b0b      	ldr	r3, [pc, #44]	; (8008298 <osKernelStart+0x48>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d109      	bne.n	8008286 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008272:	f7ff ffbf 	bl	80081f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008276:	4b08      	ldr	r3, [pc, #32]	; (8008298 <osKernelStart+0x48>)
 8008278:	2202      	movs	r2, #2
 800827a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800827c:	f001 fa66 	bl	800974c <vTaskStartScheduler>
      stat = osOK;
 8008280:	2300      	movs	r3, #0
 8008282:	607b      	str	r3, [r7, #4]
 8008284:	e002      	b.n	800828c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008286:	f04f 33ff 	mov.w	r3, #4294967295
 800828a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800828c:	687b      	ldr	r3, [r7, #4]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20002d48 	.word	0x20002d48

0800829c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800829c:	b580      	push	{r7, lr}
 800829e:	b08e      	sub	sp, #56	; 0x38
 80082a0:	af04      	add	r7, sp, #16
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ac:	f3ef 8305 	mrs	r3, IPSR
 80082b0:	617b      	str	r3, [r7, #20]
  return(result);
 80082b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d17e      	bne.n	80083b6 <osThreadNew+0x11a>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d07b      	beq.n	80083b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80082be:	2380      	movs	r3, #128	; 0x80
 80082c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082c2:	2318      	movs	r3, #24
 80082c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80082ca:	f04f 33ff 	mov.w	r3, #4294967295
 80082ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d045      	beq.n	8008362 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <osThreadNew+0x48>
        name = attr->name;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <osThreadNew+0x6e>
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b38      	cmp	r3, #56	; 0x38
 80082fc:	d805      	bhi.n	800830a <osThreadNew+0x6e>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <osThreadNew+0x72>
        return (NULL);
 800830a:	2300      	movs	r3, #0
 800830c:	e054      	b.n	80083b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	089b      	lsrs	r3, r3, #2
 800831c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00e      	beq.n	8008344 <osThreadNew+0xa8>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	2bbb      	cmp	r3, #187	; 0xbb
 800832c:	d90a      	bls.n	8008344 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008332:	2b00      	cmp	r3, #0
 8008334:	d006      	beq.n	8008344 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <osThreadNew+0xa8>
        mem = 1;
 800833e:	2301      	movs	r3, #1
 8008340:	61bb      	str	r3, [r7, #24]
 8008342:	e010      	b.n	8008366 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10c      	bne.n	8008366 <osThreadNew+0xca>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d108      	bne.n	8008366 <osThreadNew+0xca>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <osThreadNew+0xca>
          mem = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	e001      	b.n	8008366 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d110      	bne.n	800838e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008374:	9202      	str	r2, [sp, #8]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6a3a      	ldr	r2, [r7, #32]
 8008380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 fff6 	bl	8009374 <xTaskCreateStatic>
 8008388:	4603      	mov	r3, r0
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	e013      	b.n	80083b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d110      	bne.n	80083b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	b29a      	uxth	r2, r3
 8008398:	f107 0310 	add.w	r3, r7, #16
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f001 f841 	bl	800942e <xTaskCreate>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d001      	beq.n	80083b6 <osThreadNew+0x11a>
            hTask = NULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083b6:	693b      	ldr	r3, [r7, #16]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3728      	adds	r7, #40	; 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c8:	f3ef 8305 	mrs	r3, IPSR
 80083cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80083ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d003      	beq.n	80083dc <osDelay+0x1c>
    stat = osErrorISR;
 80083d4:	f06f 0305 	mvn.w	r3, #5
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e007      	b.n	80083ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 f97c 	bl	80096e4 <vTaskDelay>
    }
  }

  return (stat);
 80083ec:	68fb      	ldr	r3, [r7, #12]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b08a      	sub	sp, #40	; 0x28
 80083fa:	af02      	add	r7, sp, #8
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008406:	f3ef 8305 	mrs	r3, IPSR
 800840a:	613b      	str	r3, [r7, #16]
  return(result);
 800840c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800840e:	2b00      	cmp	r3, #0
 8008410:	d15f      	bne.n	80084d2 <osMessageQueueNew+0xdc>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d05c      	beq.n	80084d2 <osMessageQueueNew+0xdc>
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d059      	beq.n	80084d2 <osMessageQueueNew+0xdc>
    mem = -1;
 800841e:	f04f 33ff 	mov.w	r3, #4294967295
 8008422:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d029      	beq.n	800847e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d012      	beq.n	8008458 <osMessageQueueNew+0x62>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	2b4f      	cmp	r3, #79	; 0x4f
 8008438:	d90e      	bls.n	8008458 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695a      	ldr	r2, [r3, #20]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	fb01 f303 	mul.w	r3, r1, r3
 800844e:	429a      	cmp	r2, r3
 8008450:	d302      	bcc.n	8008458 <osMessageQueueNew+0x62>
        mem = 1;
 8008452:	2301      	movs	r3, #1
 8008454:	61bb      	str	r3, [r7, #24]
 8008456:	e014      	b.n	8008482 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d110      	bne.n	8008482 <osMessageQueueNew+0x8c>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10c      	bne.n	8008482 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800846c:	2b00      	cmp	r3, #0
 800846e:	d108      	bne.n	8008482 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <osMessageQueueNew+0x8c>
          mem = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	61bb      	str	r3, [r7, #24]
 800847c:	e001      	b.n	8008482 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d10b      	bne.n	80084a0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691a      	ldr	r2, [r3, #16]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	2100      	movs	r1, #0
 8008492:	9100      	str	r1, [sp, #0]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fa2e 	bl	80088f8 <xQueueGenericCreateStatic>
 800849c:	61f8      	str	r0, [r7, #28]
 800849e:	e008      	b.n	80084b2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80084a6:	2200      	movs	r2, #0
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 fa9c 	bl	80089e8 <xQueueGenericCreate>
 80084b0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00c      	beq.n	80084d2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e001      	b.n	80084ca <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80084ca:	6979      	ldr	r1, [r7, #20]
 80084cc:	69f8      	ldr	r0, [r7, #28]
 80084ce:	f000 fef3 	bl	80092b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80084d2:	69fb      	ldr	r3, [r7, #28]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084f4:	f3ef 8305 	mrs	r3, IPSR
 80084f8:	617b      	str	r3, [r7, #20]
  return(result);
 80084fa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d028      	beq.n	8008552 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <osMessageQueuePut+0x36>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <osMessageQueuePut+0x36>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008512:	f06f 0303 	mvn.w	r3, #3
 8008516:	61fb      	str	r3, [r7, #28]
 8008518:	e038      	b.n	800858c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800851a:	2300      	movs	r3, #0
 800851c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800851e:	f107 0210 	add.w	r2, r7, #16
 8008522:	2300      	movs	r3, #0
 8008524:	68b9      	ldr	r1, [r7, #8]
 8008526:	69b8      	ldr	r0, [r7, #24]
 8008528:	f000 fbba 	bl	8008ca0 <xQueueGenericSendFromISR>
 800852c:	4603      	mov	r3, r0
 800852e:	2b01      	cmp	r3, #1
 8008530:	d003      	beq.n	800853a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008532:	f06f 0302 	mvn.w	r3, #2
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	e028      	b.n	800858c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d025      	beq.n	800858c <osMessageQueuePut+0xb0>
 8008540:	4b15      	ldr	r3, [pc, #84]	; (8008598 <osMessageQueuePut+0xbc>)
 8008542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	e01c      	b.n	800858c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <osMessageQueuePut+0x82>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d103      	bne.n	8008566 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800855e:	f06f 0303 	mvn.w	r3, #3
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	e012      	b.n	800858c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008566:	2300      	movs	r3, #0
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	68b9      	ldr	r1, [r7, #8]
 800856c:	69b8      	ldr	r0, [r7, #24]
 800856e:	f000 fa99 	bl	8008aa4 <xQueueGenericSend>
 8008572:	4603      	mov	r3, r0
 8008574:	2b01      	cmp	r3, #1
 8008576:	d009      	beq.n	800858c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800857e:	f06f 0301 	mvn.w	r3, #1
 8008582:	61fb      	str	r3, [r7, #28]
 8008584:	e002      	b.n	800858c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008586:	f06f 0302 	mvn.w	r3, #2
 800858a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800858c:	69fb      	ldr	r3, [r7, #28]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3720      	adds	r7, #32
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085b2:	f3ef 8305 	mrs	r3, IPSR
 80085b6:	617b      	str	r3, [r7, #20]
  return(result);
 80085b8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d028      	beq.n	8008610 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <osMessageQueueGet+0x34>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <osMessageQueueGet+0x34>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80085d0:	f06f 0303 	mvn.w	r3, #3
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	e037      	b.n	8008648 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80085dc:	f107 0310 	add.w	r3, r7, #16
 80085e0:	461a      	mov	r2, r3
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	69b8      	ldr	r0, [r7, #24]
 80085e6:	f000 fcd7 	bl	8008f98 <xQueueReceiveFromISR>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d003      	beq.n	80085f8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80085f0:	f06f 0302 	mvn.w	r3, #2
 80085f4:	61fb      	str	r3, [r7, #28]
 80085f6:	e027      	b.n	8008648 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d024      	beq.n	8008648 <osMessageQueueGet+0xac>
 80085fe:	4b15      	ldr	r3, [pc, #84]	; (8008654 <osMessageQueueGet+0xb8>)
 8008600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	e01b      	b.n	8008648 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <osMessageQueueGet+0x80>
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d103      	bne.n	8008624 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800861c:	f06f 0303 	mvn.w	r3, #3
 8008620:	61fb      	str	r3, [r7, #28]
 8008622:	e011      	b.n	8008648 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	68b9      	ldr	r1, [r7, #8]
 8008628:	69b8      	ldr	r0, [r7, #24]
 800862a:	f000 fbd5 	bl	8008dd8 <xQueueReceive>
 800862e:	4603      	mov	r3, r0
 8008630:	2b01      	cmp	r3, #1
 8008632:	d009      	beq.n	8008648 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800863a:	f06f 0301 	mvn.w	r3, #1
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	e002      	b.n	8008648 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008642:	f06f 0302 	mvn.w	r3, #2
 8008646:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008648:	69fb      	ldr	r3, [r7, #28]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3720      	adds	r7, #32
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	e000ed04 	.word	0xe000ed04

08008658 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4a07      	ldr	r2, [pc, #28]	; (8008684 <vApplicationGetIdleTaskMemory+0x2c>)
 8008668:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	4a06      	ldr	r2, [pc, #24]	; (8008688 <vApplicationGetIdleTaskMemory+0x30>)
 800866e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2280      	movs	r2, #128	; 0x80
 8008674:	601a      	str	r2, [r3, #0]
}
 8008676:	bf00      	nop
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	20002d4c 	.word	0x20002d4c
 8008688:	20002e08 	.word	0x20002e08

0800868c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4a07      	ldr	r2, [pc, #28]	; (80086b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800869c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	4a06      	ldr	r2, [pc, #24]	; (80086bc <vApplicationGetTimerTaskMemory+0x30>)
 80086a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086aa:	601a      	str	r2, [r3, #0]
}
 80086ac:	bf00      	nop
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	20003008 	.word	0x20003008
 80086bc:	200030c4 	.word	0x200030c4

080086c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f103 0208 	add.w	r2, r3, #8
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f04f 32ff 	mov.w	r2, #4294967295
 80086d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f103 0208 	add.w	r2, r3, #8
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f103 0208 	add.w	r2, r3, #8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	601a      	str	r2, [r3, #0]
}
 8008756:	bf00      	nop
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008762:	b480      	push	{r7}
 8008764:	b085      	sub	sp, #20
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d103      	bne.n	8008782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	e00c      	b.n	800879c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3308      	adds	r3, #8
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	e002      	b.n	8008790 <vListInsert+0x2e>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	d2f6      	bcs.n	800878a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	601a      	str	r2, [r3, #0]
}
 80087c8:	bf00      	nop
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6892      	ldr	r2, [r2, #8]
 80087ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6852      	ldr	r2, [r2, #4]
 80087f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d103      	bne.n	8008808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	1e5a      	subs	r2, r3, #1
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10a      	bne.n	8008852 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008852:	f002 f92f 	bl	800aab4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885e:	68f9      	ldr	r1, [r7, #12]
 8008860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008862:	fb01 f303 	mul.w	r3, r1, r3
 8008866:	441a      	add	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008882:	3b01      	subs	r3, #1
 8008884:	68f9      	ldr	r1, [r7, #12]
 8008886:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	441a      	add	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	22ff      	movs	r2, #255	; 0xff
 8008896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	22ff      	movs	r2, #255	; 0xff
 800889e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d114      	bne.n	80088d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01a      	beq.n	80088e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3310      	adds	r3, #16
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 f9e3 	bl	8009c80 <xTaskRemoveFromEventList>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d012      	beq.n	80088e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088c0:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <xQueueGenericReset+0xcc>)
 80088c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	e009      	b.n	80088e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3310      	adds	r3, #16
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fef2 	bl	80086c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3324      	adds	r3, #36	; 0x24
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff feed 	bl	80086c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088e6:	f002 f915 	bl	800ab14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088ea:	2301      	movs	r3, #1
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	e000ed04 	.word	0xe000ed04

080088f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08e      	sub	sp, #56	; 0x38
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
}
 800893a:	bf00      	nop
 800893c:	e7fe      	b.n	800893c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <xQueueGenericCreateStatic+0x52>
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <xQueueGenericCreateStatic+0x56>
 800894a:	2301      	movs	r3, #1
 800894c:	e000      	b.n	8008950 <xQueueGenericCreateStatic+0x58>
 800894e:	2300      	movs	r3, #0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	623b      	str	r3, [r7, #32]
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <xQueueGenericCreateStatic+0x7e>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <xQueueGenericCreateStatic+0x82>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueGenericCreateStatic+0x84>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	61fb      	str	r3, [r7, #28]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008996:	2350      	movs	r3, #80	; 0x50
 8008998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b50      	cmp	r3, #80	; 0x50
 800899e:	d00a      	beq.n	80089b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	61bb      	str	r3, [r7, #24]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00d      	beq.n	80089de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	4613      	mov	r3, r2
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	68b9      	ldr	r1, [r7, #8]
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 f83f 	bl	8008a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3730      	adds	r7, #48	; 0x30
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	; 0x28
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <xQueueGenericCreate+0x2a>
	__asm volatile
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	613b      	str	r3, [r7, #16]
}
 8008a0e:	bf00      	nop
 8008a10:	e7fe      	b.n	8008a10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	fb02 f303 	mul.w	r3, r2, r3
 8008a1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	3350      	adds	r3, #80	; 0x50
 8008a20:	4618      	mov	r0, r3
 8008a22:	f002 f969 	bl	800acf8 <pvPortMalloc>
 8008a26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d011      	beq.n	8008a52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	3350      	adds	r3, #80	; 0x50
 8008a36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a40:	79fa      	ldrb	r2, [r7, #7]
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	4613      	mov	r3, r2
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f805 	bl	8008a5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a52:	69bb      	ldr	r3, [r7, #24]
	}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3720      	adds	r7, #32
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	e002      	b.n	8008a7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	69b8      	ldr	r0, [r7, #24]
 8008a8e:	f7ff fecb 	bl	8008828 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	78fa      	ldrb	r2, [r7, #3]
 8008a96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08e      	sub	sp, #56	; 0x38
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10a      	bne.n	8008ad6 <xQueueGenericSend+0x32>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ad2:	bf00      	nop
 8008ad4:	e7fe      	b.n	8008ad4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d103      	bne.n	8008ae4 <xQueueGenericSend+0x40>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <xQueueGenericSend+0x44>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e000      	b.n	8008aea <xQueueGenericSend+0x46>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10a      	bne.n	8008b04 <xQueueGenericSend+0x60>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b00:	bf00      	nop
 8008b02:	e7fe      	b.n	8008b02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d103      	bne.n	8008b12 <xQueueGenericSend+0x6e>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <xQueueGenericSend+0x72>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e000      	b.n	8008b18 <xQueueGenericSend+0x74>
 8008b16:	2300      	movs	r3, #0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10a      	bne.n	8008b32 <xQueueGenericSend+0x8e>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	623b      	str	r3, [r7, #32]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b32:	f001 fa67 	bl	800a004 <xTaskGetSchedulerState>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <xQueueGenericSend+0x9e>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <xQueueGenericSend+0xa2>
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <xQueueGenericSend+0xa4>
 8008b46:	2300      	movs	r3, #0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10a      	bne.n	8008b62 <xQueueGenericSend+0xbe>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	61fb      	str	r3, [r7, #28]
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b62:	f001 ffa7 	bl	800aab4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d302      	bcc.n	8008b78 <xQueueGenericSend+0xd4>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d129      	bne.n	8008bcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b7e:	f000 fa8b 	bl	8009098 <prvCopyDataToQueue>
 8008b82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d010      	beq.n	8008bae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	3324      	adds	r3, #36	; 0x24
 8008b90:	4618      	mov	r0, r3
 8008b92:	f001 f875 	bl	8009c80 <xTaskRemoveFromEventList>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d013      	beq.n	8008bc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b9c:	4b3f      	ldr	r3, [pc, #252]	; (8008c9c <xQueueGenericSend+0x1f8>)
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	e00a      	b.n	8008bc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d007      	beq.n	8008bc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bb4:	4b39      	ldr	r3, [pc, #228]	; (8008c9c <xQueueGenericSend+0x1f8>)
 8008bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bc4:	f001 ffa6 	bl	800ab14 <vPortExitCritical>
				return pdPASS;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e063      	b.n	8008c94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d103      	bne.n	8008bda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bd2:	f001 ff9f 	bl	800ab14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e05c      	b.n	8008c94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d106      	bne.n	8008bee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008be0:	f107 0314 	add.w	r3, r7, #20
 8008be4:	4618      	mov	r0, r3
 8008be6:	f001 f8af 	bl	8009d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bea:	2301      	movs	r3, #1
 8008bec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bee:	f001 ff91 	bl	800ab14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bf2:	f000 fe1b 	bl	800982c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bf6:	f001 ff5d 	bl	800aab4 <vPortEnterCritical>
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c00:	b25b      	sxtb	r3, r3
 8008c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c06:	d103      	bne.n	8008c10 <xQueueGenericSend+0x16c>
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c16:	b25b      	sxtb	r3, r3
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d103      	bne.n	8008c26 <xQueueGenericSend+0x182>
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c26:	f001 ff75 	bl	800ab14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c2a:	1d3a      	adds	r2, r7, #4
 8008c2c:	f107 0314 	add.w	r3, r7, #20
 8008c30:	4611      	mov	r1, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f001 f89e 	bl	8009d74 <xTaskCheckForTimeOut>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d124      	bne.n	8008c88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c40:	f000 fb22 	bl	8009288 <prvIsQueueFull>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d018      	beq.n	8008c7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	3310      	adds	r3, #16
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	4611      	mov	r1, r2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 ffc4 	bl	8009be0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c5a:	f000 faad 	bl	80091b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c5e:	f000 fdf3 	bl	8009848 <xTaskResumeAll>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f47f af7c 	bne.w	8008b62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <xQueueGenericSend+0x1f8>)
 8008c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	e772      	b.n	8008b62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c7e:	f000 fa9b 	bl	80091b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c82:	f000 fde1 	bl	8009848 <xTaskResumeAll>
 8008c86:	e76c      	b.n	8008b62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c8a:	f000 fa95 	bl	80091b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c8e:	f000 fddb 	bl	8009848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3738      	adds	r7, #56	; 0x38
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b090      	sub	sp, #64	; 0x40
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cca:	bf00      	nop
 8008ccc:	e7fe      	b.n	8008ccc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d103      	bne.n	8008cdc <xQueueGenericSendFromISR+0x3c>
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <xQueueGenericSendFromISR+0x40>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e000      	b.n	8008ce2 <xQueueGenericSendFromISR+0x42>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cea:	f383 8811 	msr	BASEPRI, r3
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	f3bf 8f4f 	dsb	sy
 8008cf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cf8:	bf00      	nop
 8008cfa:	e7fe      	b.n	8008cfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d103      	bne.n	8008d0a <xQueueGenericSendFromISR+0x6a>
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <xQueueGenericSendFromISR+0x6e>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e000      	b.n	8008d10 <xQueueGenericSendFromISR+0x70>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	623b      	str	r3, [r7, #32]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d2a:	f001 ffa5 	bl	800ac78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d2e:	f3ef 8211 	mrs	r2, BASEPRI
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	61fa      	str	r2, [r7, #28]
 8008d44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d302      	bcc.n	8008d5c <xQueueGenericSendFromISR+0xbc>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d12f      	bne.n	8008dbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d72:	f000 f991 	bl	8009098 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d112      	bne.n	8008da6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d016      	beq.n	8008db6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	3324      	adds	r3, #36	; 0x24
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 ff77 	bl	8009c80 <xTaskRemoveFromEventList>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00e      	beq.n	8008db6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00b      	beq.n	8008db6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e007      	b.n	8008db6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008da6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008daa:	3301      	adds	r3, #1
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	b25a      	sxtb	r2, r3
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008db6:	2301      	movs	r3, #1
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008dba:	e001      	b.n	8008dc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008dca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3740      	adds	r7, #64	; 0x40
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08c      	sub	sp, #48	; 0x30
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008de4:	2300      	movs	r3, #0
 8008de6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10a      	bne.n	8008e08 <xQueueReceive+0x30>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	623b      	str	r3, [r7, #32]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d103      	bne.n	8008e16 <xQueueReceive+0x3e>
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <xQueueReceive+0x42>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e000      	b.n	8008e1c <xQueueReceive+0x44>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <xQueueReceive+0x5e>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	61fb      	str	r3, [r7, #28]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e36:	f001 f8e5 	bl	800a004 <xTaskGetSchedulerState>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d102      	bne.n	8008e46 <xQueueReceive+0x6e>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <xQueueReceive+0x72>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e000      	b.n	8008e4c <xQueueReceive+0x74>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <xQueueReceive+0x8e>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	61bb      	str	r3, [r7, #24]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e66:	f001 fe25 	bl	800aab4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d01f      	beq.n	8008eb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e76:	68b9      	ldr	r1, [r7, #8]
 8008e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e7a:	f000 f977 	bl	800916c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	1e5a      	subs	r2, r3, #1
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00f      	beq.n	8008eae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	3310      	adds	r3, #16
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fef4 	bl	8009c80 <xTaskRemoveFromEventList>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d007      	beq.n	8008eae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e9e:	4b3d      	ldr	r3, [pc, #244]	; (8008f94 <xQueueReceive+0x1bc>)
 8008ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008eae:	f001 fe31 	bl	800ab14 <vPortExitCritical>
				return pdPASS;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e069      	b.n	8008f8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d103      	bne.n	8008ec4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ebc:	f001 fe2a 	bl	800ab14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	e062      	b.n	8008f8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d106      	bne.n	8008ed8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eca:	f107 0310 	add.w	r3, r7, #16
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 ff3a 	bl	8009d48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ed8:	f001 fe1c 	bl	800ab14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008edc:	f000 fca6 	bl	800982c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ee0:	f001 fde8 	bl	800aab4 <vPortEnterCritical>
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eea:	b25b      	sxtb	r3, r3
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d103      	bne.n	8008efa <xQueueReceive+0x122>
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f00:	b25b      	sxtb	r3, r3
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f06:	d103      	bne.n	8008f10 <xQueueReceive+0x138>
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f10:	f001 fe00 	bl	800ab14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f14:	1d3a      	adds	r2, r7, #4
 8008f16:	f107 0310 	add.w	r3, r7, #16
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 ff29 	bl	8009d74 <xTaskCheckForTimeOut>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d123      	bne.n	8008f70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f2a:	f000 f997 	bl	800925c <prvIsQueueEmpty>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d017      	beq.n	8008f64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	3324      	adds	r3, #36	; 0x24
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fe4f 	bl	8009be0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f44:	f000 f938 	bl	80091b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f48:	f000 fc7e 	bl	8009848 <xTaskResumeAll>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d189      	bne.n	8008e66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008f52:	4b10      	ldr	r3, [pc, #64]	; (8008f94 <xQueueReceive+0x1bc>)
 8008f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	e780      	b.n	8008e66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f66:	f000 f927 	bl	80091b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f6a:	f000 fc6d 	bl	8009848 <xTaskResumeAll>
 8008f6e:	e77a      	b.n	8008e66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f72:	f000 f921 	bl	80091b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f76:	f000 fc67 	bl	8009848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f7c:	f000 f96e 	bl	800925c <prvIsQueueEmpty>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f43f af6f 	beq.w	8008e66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3730      	adds	r7, #48	; 0x30
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	e000ed04 	.word	0xe000ed04

08008f98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08e      	sub	sp, #56	; 0x38
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10a      	bne.n	8008fc4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	623b      	str	r3, [r7, #32]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d103      	bne.n	8008fd2 <xQueueReceiveFromISR+0x3a>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <xQueueReceiveFromISR+0x3e>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <xQueueReceiveFromISR+0x40>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10a      	bne.n	8008ff2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	61fb      	str	r3, [r7, #28]
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ff2:	f001 fe41 	bl	800ac78 <vPortValidateInterruptPriority>
	__asm volatile
 8008ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	61ba      	str	r2, [r7, #24]
 800900c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800900e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009010:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	2b00      	cmp	r3, #0
 800901c:	d02f      	beq.n	800907e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009028:	68b9      	ldr	r1, [r7, #8]
 800902a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800902c:	f000 f89e 	bl	800916c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	1e5a      	subs	r2, r3, #1
 8009034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009036:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009038:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d112      	bne.n	8009068 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d016      	beq.n	8009078 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	3310      	adds	r3, #16
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fe16 	bl	8009c80 <xTaskRemoveFromEventList>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00e      	beq.n	8009078 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	e007      	b.n	8009078 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800906c:	3301      	adds	r3, #1
 800906e:	b2db      	uxtb	r3, r3
 8009070:	b25a      	sxtb	r2, r3
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009078:	2301      	movs	r3, #1
 800907a:	637b      	str	r3, [r7, #52]	; 0x34
 800907c:	e001      	b.n	8009082 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800907e:	2300      	movs	r3, #0
 8009080:	637b      	str	r3, [r7, #52]	; 0x34
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f383 8811 	msr	BASEPRI, r3
}
 800908c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009090:	4618      	mov	r0, r3
 8009092:	3738      	adds	r7, #56	; 0x38
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10d      	bne.n	80090d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d14d      	bne.n	800915a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 ffbc 	bl	800a040 <xTaskPriorityDisinherit>
 80090c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	609a      	str	r2, [r3, #8]
 80090d0:	e043      	b.n	800915a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d119      	bne.n	800910c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6858      	ldr	r0, [r3, #4]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	461a      	mov	r2, r3
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	f002 f81e 	bl	800b124 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	441a      	add	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d32b      	bcc.n	800915a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	605a      	str	r2, [r3, #4]
 800910a:	e026      	b.n	800915a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	68d8      	ldr	r0, [r3, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009114:	461a      	mov	r2, r3
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	f002 f804 	bl	800b124 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	68da      	ldr	r2, [r3, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009124:	425b      	negs	r3, r3
 8009126:	441a      	add	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d207      	bcs.n	8009148 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009140:	425b      	negs	r3, r3
 8009142:	441a      	add	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d105      	bne.n	800915a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	3b01      	subs	r3, #1
 8009158:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009162:	697b      	ldr	r3, [r7, #20]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d018      	beq.n	80091b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	441a      	add	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	429a      	cmp	r2, r3
 8009196:	d303      	bcc.n	80091a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	68d9      	ldr	r1, [r3, #12]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a8:	461a      	mov	r2, r3
 80091aa:	6838      	ldr	r0, [r7, #0]
 80091ac:	f001 ffba 	bl	800b124 <memcpy>
	}
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091c0:	f001 fc78 	bl	800aab4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091cc:	e011      	b.n	80091f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d012      	beq.n	80091fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3324      	adds	r3, #36	; 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fd50 	bl	8009c80 <xTaskRemoveFromEventList>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80091e6:	f000 fe27 	bl	8009e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dce9      	bgt.n	80091ce <prvUnlockQueue+0x16>
 80091fa:	e000      	b.n	80091fe <prvUnlockQueue+0x46>
					break;
 80091fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	22ff      	movs	r2, #255	; 0xff
 8009202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009206:	f001 fc85 	bl	800ab14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800920a:	f001 fc53 	bl	800aab4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009214:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009216:	e011      	b.n	800923c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d012      	beq.n	8009246 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3310      	adds	r3, #16
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fd2b 	bl	8009c80 <xTaskRemoveFromEventList>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009230:	f000 fe02 	bl	8009e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	3b01      	subs	r3, #1
 8009238:	b2db      	uxtb	r3, r3
 800923a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800923c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009240:	2b00      	cmp	r3, #0
 8009242:	dce9      	bgt.n	8009218 <prvUnlockQueue+0x60>
 8009244:	e000      	b.n	8009248 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009246:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	22ff      	movs	r2, #255	; 0xff
 800924c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009250:	f001 fc60 	bl	800ab14 <vPortExitCritical>
}
 8009254:	bf00      	nop
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009264:	f001 fc26 	bl	800aab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009270:	2301      	movs	r3, #1
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	e001      	b.n	800927a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800927a:	f001 fc4b 	bl	800ab14 <vPortExitCritical>

	return xReturn;
 800927e:	68fb      	ldr	r3, [r7, #12]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009290:	f001 fc10 	bl	800aab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929c:	429a      	cmp	r2, r3
 800929e:	d102      	bne.n	80092a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092a0:	2301      	movs	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	e001      	b.n	80092aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092a6:	2300      	movs	r3, #0
 80092a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092aa:	f001 fc33 	bl	800ab14 <vPortExitCritical>

	return xReturn;
 80092ae:	68fb      	ldr	r3, [r7, #12]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]
 80092c6:	e014      	b.n	80092f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80092c8:	4a0f      	ldr	r2, [pc, #60]	; (8009308 <vQueueAddToRegistry+0x50>)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10b      	bne.n	80092ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80092d4:	490c      	ldr	r1, [pc, #48]	; (8009308 <vQueueAddToRegistry+0x50>)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80092de:	4a0a      	ldr	r2, [pc, #40]	; (8009308 <vQueueAddToRegistry+0x50>)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4413      	add	r3, r2
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80092ea:	e006      	b.n	80092fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b07      	cmp	r3, #7
 80092f6:	d9e7      	bls.n	80092c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092f8:	bf00      	nop
 80092fa:	bf00      	nop
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	200034c4 	.word	0x200034c4

0800930c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800931c:	f001 fbca 	bl	800aab4 <vPortEnterCritical>
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009326:	b25b      	sxtb	r3, r3
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d103      	bne.n	8009336 <vQueueWaitForMessageRestricted+0x2a>
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800933c:	b25b      	sxtb	r3, r3
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d103      	bne.n	800934c <vQueueWaitForMessageRestricted+0x40>
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800934c:	f001 fbe2 	bl	800ab14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009354:	2b00      	cmp	r3, #0
 8009356:	d106      	bne.n	8009366 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	3324      	adds	r3, #36	; 0x24
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fc61 	bl	8009c28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009366:	6978      	ldr	r0, [r7, #20]
 8009368:	f7ff ff26 	bl	80091b8 <prvUnlockQueue>
	}
 800936c:	bf00      	nop
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08e      	sub	sp, #56	; 0x38
 8009378:	af04      	add	r7, sp, #16
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	623b      	str	r3, [r7, #32]
}
 800939a:	bf00      	nop
 800939c:	e7fe      	b.n	800939c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800939e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xTaskCreateStatic+0x46>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	61fb      	str	r3, [r7, #28]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80093ba:	23bc      	movs	r3, #188	; 0xbc
 80093bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2bbc      	cmp	r3, #188	; 0xbc
 80093c2:	d00a      	beq.n	80093da <xTaskCreateStatic+0x66>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	61bb      	str	r3, [r7, #24]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80093da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d01e      	beq.n	8009420 <xTaskCreateStatic+0xac>
 80093e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01b      	beq.n	8009420 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	2202      	movs	r2, #2
 80093f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093fa:	2300      	movs	r3, #0
 80093fc:	9303      	str	r3, [sp, #12]
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	9302      	str	r3, [sp, #8]
 8009402:	f107 0314 	add.w	r3, r7, #20
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 f850 	bl	80094b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800941a:	f000 f8f3 	bl	8009604 <prvAddNewTaskToReadyList>
 800941e:	e001      	b.n	8009424 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009420:	2300      	movs	r3, #0
 8009422:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009424:	697b      	ldr	r3, [r7, #20]
	}
 8009426:	4618      	mov	r0, r3
 8009428:	3728      	adds	r7, #40	; 0x28
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800942e:	b580      	push	{r7, lr}
 8009430:	b08c      	sub	sp, #48	; 0x30
 8009432:	af04      	add	r7, sp, #16
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	603b      	str	r3, [r7, #0]
 800943a:	4613      	mov	r3, r2
 800943c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4618      	mov	r0, r3
 8009444:	f001 fc58 	bl	800acf8 <pvPortMalloc>
 8009448:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00e      	beq.n	800946e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009450:	20bc      	movs	r0, #188	; 0xbc
 8009452:	f001 fc51 	bl	800acf8 <pvPortMalloc>
 8009456:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d003      	beq.n	8009466 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	631a      	str	r2, [r3, #48]	; 0x30
 8009464:	e005      	b.n	8009472 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009466:	6978      	ldr	r0, [r7, #20]
 8009468:	f001 fd12 	bl	800ae90 <vPortFree>
 800946c:	e001      	b.n	8009472 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800946e:	2300      	movs	r3, #0
 8009470:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d017      	beq.n	80094a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009480:	88fa      	ldrh	r2, [r7, #6]
 8009482:	2300      	movs	r3, #0
 8009484:	9303      	str	r3, [sp, #12]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	9302      	str	r3, [sp, #8]
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 f80e 	bl	80094b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800949c:	69f8      	ldr	r0, [r7, #28]
 800949e:	f000 f8b1 	bl	8009604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094a2:	2301      	movs	r3, #1
 80094a4:	61bb      	str	r3, [r7, #24]
 80094a6:	e002      	b.n	80094ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094a8:	f04f 33ff 	mov.w	r3, #4294967295
 80094ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094ae:	69bb      	ldr	r3, [r7, #24]
	}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3720      	adds	r7, #32
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	461a      	mov	r2, r3
 80094d0:	21a5      	movs	r1, #165	; 0xa5
 80094d2:	f001 fe35 	bl	800b140 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80094e0:	3b01      	subs	r3, #1
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	f023 0307 	bic.w	r3, r3, #7
 80094ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <prvInitialiseNewTask+0x58>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	617b      	str	r3, [r7, #20]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d01f      	beq.n	8009556 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009516:	2300      	movs	r3, #0
 8009518:	61fb      	str	r3, [r7, #28]
 800951a:	e012      	b.n	8009542 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	4413      	add	r3, r2
 8009522:	7819      	ldrb	r1, [r3, #0]
 8009524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	4413      	add	r3, r2
 800952a:	3334      	adds	r3, #52	; 0x34
 800952c:	460a      	mov	r2, r1
 800952e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	4413      	add	r3, r2
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d006      	beq.n	800954a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	3301      	adds	r3, #1
 8009540:	61fb      	str	r3, [r7, #28]
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	2b0f      	cmp	r3, #15
 8009546:	d9e9      	bls.n	800951c <prvInitialiseNewTask+0x64>
 8009548:	e000      	b.n	800954c <prvInitialiseNewTask+0x94>
			{
				break;
 800954a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009554:	e003      	b.n	800955e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	2200      	movs	r2, #0
 800955a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	2b37      	cmp	r3, #55	; 0x37
 8009562:	d901      	bls.n	8009568 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009564:	2337      	movs	r3, #55	; 0x37
 8009566:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800956c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009572:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	2200      	movs	r2, #0
 8009578:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	3304      	adds	r3, #4
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff f8be 	bl	8008700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	3318      	adds	r3, #24
 8009588:	4618      	mov	r0, r3
 800958a:	f7ff f8b9 	bl	8008700 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009592:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	3354      	adds	r3, #84	; 0x54
 80095b8:	2260      	movs	r2, #96	; 0x60
 80095ba:	2100      	movs	r1, #0
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 fdbf 	bl	800b140 <memset>
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	4a0c      	ldr	r2, [pc, #48]	; (80095f8 <prvInitialiseNewTask+0x140>)
 80095c6:	659a      	str	r2, [r3, #88]	; 0x58
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	4a0c      	ldr	r2, [pc, #48]	; (80095fc <prvInitialiseNewTask+0x144>)
 80095cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80095ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d0:	4a0b      	ldr	r2, [pc, #44]	; (8009600 <prvInitialiseNewTask+0x148>)
 80095d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	69b8      	ldr	r0, [r7, #24]
 80095da:	f001 f941 	bl	800a860 <pxPortInitialiseStack>
 80095de:	4602      	mov	r2, r0
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f0:	bf00      	nop
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	0800bd9c 	.word	0x0800bd9c
 80095fc:	0800bdbc 	.word	0x0800bdbc
 8009600:	0800bd7c 	.word	0x0800bd7c

08009604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800960c:	f001 fa52 	bl	800aab4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009610:	4b2d      	ldr	r3, [pc, #180]	; (80096c8 <prvAddNewTaskToReadyList+0xc4>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3301      	adds	r3, #1
 8009616:	4a2c      	ldr	r2, [pc, #176]	; (80096c8 <prvAddNewTaskToReadyList+0xc4>)
 8009618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800961a:	4b2c      	ldr	r3, [pc, #176]	; (80096cc <prvAddNewTaskToReadyList+0xc8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d109      	bne.n	8009636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009622:	4a2a      	ldr	r2, [pc, #168]	; (80096cc <prvAddNewTaskToReadyList+0xc8>)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009628:	4b27      	ldr	r3, [pc, #156]	; (80096c8 <prvAddNewTaskToReadyList+0xc4>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d110      	bne.n	8009652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009630:	f000 fc26 	bl	8009e80 <prvInitialiseTaskLists>
 8009634:	e00d      	b.n	8009652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009636:	4b26      	ldr	r3, [pc, #152]	; (80096d0 <prvAddNewTaskToReadyList+0xcc>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800963e:	4b23      	ldr	r3, [pc, #140]	; (80096cc <prvAddNewTaskToReadyList+0xc8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009648:	429a      	cmp	r2, r3
 800964a:	d802      	bhi.n	8009652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800964c:	4a1f      	ldr	r2, [pc, #124]	; (80096cc <prvAddNewTaskToReadyList+0xc8>)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009652:	4b20      	ldr	r3, [pc, #128]	; (80096d4 <prvAddNewTaskToReadyList+0xd0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3301      	adds	r3, #1
 8009658:	4a1e      	ldr	r2, [pc, #120]	; (80096d4 <prvAddNewTaskToReadyList+0xd0>)
 800965a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800965c:	4b1d      	ldr	r3, [pc, #116]	; (80096d4 <prvAddNewTaskToReadyList+0xd0>)
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009668:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <prvAddNewTaskToReadyList+0xd4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	429a      	cmp	r2, r3
 800966e:	d903      	bls.n	8009678 <prvAddNewTaskToReadyList+0x74>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <prvAddNewTaskToReadyList+0xd4>)
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967c:	4613      	mov	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4a15      	ldr	r2, [pc, #84]	; (80096dc <prvAddNewTaskToReadyList+0xd8>)
 8009686:	441a      	add	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3304      	adds	r3, #4
 800968c:	4619      	mov	r1, r3
 800968e:	4610      	mov	r0, r2
 8009690:	f7ff f843 	bl	800871a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009694:	f001 fa3e 	bl	800ab14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009698:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <prvAddNewTaskToReadyList+0xcc>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00e      	beq.n	80096be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096a0:	4b0a      	ldr	r3, [pc, #40]	; (80096cc <prvAddNewTaskToReadyList+0xc8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d207      	bcs.n	80096be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096ae:	4b0c      	ldr	r3, [pc, #48]	; (80096e0 <prvAddNewTaskToReadyList+0xdc>)
 80096b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096be:	bf00      	nop
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	200039d8 	.word	0x200039d8
 80096cc:	20003504 	.word	0x20003504
 80096d0:	200039e4 	.word	0x200039e4
 80096d4:	200039f4 	.word	0x200039f4
 80096d8:	200039e0 	.word	0x200039e0
 80096dc:	20003508 	.word	0x20003508
 80096e0:	e000ed04 	.word	0xe000ed04

080096e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d017      	beq.n	8009726 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096f6:	4b13      	ldr	r3, [pc, #76]	; (8009744 <vTaskDelay+0x60>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <vTaskDelay+0x30>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	60bb      	str	r3, [r7, #8]
}
 8009710:	bf00      	nop
 8009712:	e7fe      	b.n	8009712 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009714:	f000 f88a 	bl	800982c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009718:	2100      	movs	r1, #0
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fcfe 	bl	800a11c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009720:	f000 f892 	bl	8009848 <xTaskResumeAll>
 8009724:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d107      	bne.n	800973c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800972c:	4b06      	ldr	r3, [pc, #24]	; (8009748 <vTaskDelay+0x64>)
 800972e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800973c:	bf00      	nop
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20003a00 	.word	0x20003a00
 8009748:	e000ed04 	.word	0xe000ed04

0800974c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08a      	sub	sp, #40	; 0x28
 8009750:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009752:	2300      	movs	r3, #0
 8009754:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800975a:	463a      	mov	r2, r7
 800975c:	1d39      	adds	r1, r7, #4
 800975e:	f107 0308 	add.w	r3, r7, #8
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe ff78 	bl	8008658 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	9202      	str	r2, [sp, #8]
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	2300      	movs	r3, #0
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	2300      	movs	r3, #0
 8009778:	460a      	mov	r2, r1
 800977a:	4924      	ldr	r1, [pc, #144]	; (800980c <vTaskStartScheduler+0xc0>)
 800977c:	4824      	ldr	r0, [pc, #144]	; (8009810 <vTaskStartScheduler+0xc4>)
 800977e:	f7ff fdf9 	bl	8009374 <xTaskCreateStatic>
 8009782:	4603      	mov	r3, r0
 8009784:	4a23      	ldr	r2, [pc, #140]	; (8009814 <vTaskStartScheduler+0xc8>)
 8009786:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009788:	4b22      	ldr	r3, [pc, #136]	; (8009814 <vTaskStartScheduler+0xc8>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009790:	2301      	movs	r3, #1
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	e001      	b.n	800979a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d102      	bne.n	80097a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80097a0:	f000 fd10 	bl	800a1c4 <xTimerCreateTimerTask>
 80097a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d11b      	bne.n	80097e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	613b      	str	r3, [r7, #16]
}
 80097be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097c0:	4b15      	ldr	r3, [pc, #84]	; (8009818 <vTaskStartScheduler+0xcc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3354      	adds	r3, #84	; 0x54
 80097c6:	4a15      	ldr	r2, [pc, #84]	; (800981c <vTaskStartScheduler+0xd0>)
 80097c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097ca:	4b15      	ldr	r3, [pc, #84]	; (8009820 <vTaskStartScheduler+0xd4>)
 80097cc:	f04f 32ff 	mov.w	r2, #4294967295
 80097d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097d2:	4b14      	ldr	r3, [pc, #80]	; (8009824 <vTaskStartScheduler+0xd8>)
 80097d4:	2201      	movs	r2, #1
 80097d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097d8:	4b13      	ldr	r3, [pc, #76]	; (8009828 <vTaskStartScheduler+0xdc>)
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097de:	f001 f8c7 	bl	800a970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097e2:	e00e      	b.n	8009802 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d10a      	bne.n	8009802 <vTaskStartScheduler+0xb6>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	60fb      	str	r3, [r7, #12]
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <vTaskStartScheduler+0xb4>
}
 8009802:	bf00      	nop
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	0800bbac 	.word	0x0800bbac
 8009810:	08009e51 	.word	0x08009e51
 8009814:	200039fc 	.word	0x200039fc
 8009818:	20003504 	.word	0x20003504
 800981c:	20000014 	.word	0x20000014
 8009820:	200039f8 	.word	0x200039f8
 8009824:	200039e4 	.word	0x200039e4
 8009828:	200039dc 	.word	0x200039dc

0800982c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009830:	4b04      	ldr	r3, [pc, #16]	; (8009844 <vTaskSuspendAll+0x18>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3301      	adds	r3, #1
 8009836:	4a03      	ldr	r2, [pc, #12]	; (8009844 <vTaskSuspendAll+0x18>)
 8009838:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800983a:	bf00      	nop
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	20003a00 	.word	0x20003a00

08009848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009852:	2300      	movs	r3, #0
 8009854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009856:	4b42      	ldr	r3, [pc, #264]	; (8009960 <xTaskResumeAll+0x118>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10a      	bne.n	8009874 <xTaskResumeAll+0x2c>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	603b      	str	r3, [r7, #0]
}
 8009870:	bf00      	nop
 8009872:	e7fe      	b.n	8009872 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009874:	f001 f91e 	bl	800aab4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009878:	4b39      	ldr	r3, [pc, #228]	; (8009960 <xTaskResumeAll+0x118>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3b01      	subs	r3, #1
 800987e:	4a38      	ldr	r2, [pc, #224]	; (8009960 <xTaskResumeAll+0x118>)
 8009880:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009882:	4b37      	ldr	r3, [pc, #220]	; (8009960 <xTaskResumeAll+0x118>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d162      	bne.n	8009950 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800988a:	4b36      	ldr	r3, [pc, #216]	; (8009964 <xTaskResumeAll+0x11c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d05e      	beq.n	8009950 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009892:	e02f      	b.n	80098f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009894:	4b34      	ldr	r3, [pc, #208]	; (8009968 <xTaskResumeAll+0x120>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	3318      	adds	r3, #24
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe ff97 	bl	80087d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3304      	adds	r3, #4
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe ff92 	bl	80087d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b4:	4b2d      	ldr	r3, [pc, #180]	; (800996c <xTaskResumeAll+0x124>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d903      	bls.n	80098c4 <xTaskResumeAll+0x7c>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	4a2a      	ldr	r2, [pc, #168]	; (800996c <xTaskResumeAll+0x124>)
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c8:	4613      	mov	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4a27      	ldr	r2, [pc, #156]	; (8009970 <xTaskResumeAll+0x128>)
 80098d2:	441a      	add	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	3304      	adds	r3, #4
 80098d8:	4619      	mov	r1, r3
 80098da:	4610      	mov	r0, r2
 80098dc:	f7fe ff1d 	bl	800871a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e4:	4b23      	ldr	r3, [pc, #140]	; (8009974 <xTaskResumeAll+0x12c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d302      	bcc.n	80098f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80098ee:	4b22      	ldr	r3, [pc, #136]	; (8009978 <xTaskResumeAll+0x130>)
 80098f0:	2201      	movs	r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098f4:	4b1c      	ldr	r3, [pc, #112]	; (8009968 <xTaskResumeAll+0x120>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1cb      	bne.n	8009894 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009902:	f000 fb5f 	bl	8009fc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009906:	4b1d      	ldr	r3, [pc, #116]	; (800997c <xTaskResumeAll+0x134>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d010      	beq.n	8009934 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009912:	f000 f847 	bl	80099a4 <xTaskIncrementTick>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800991c:	4b16      	ldr	r3, [pc, #88]	; (8009978 <xTaskResumeAll+0x130>)
 800991e:	2201      	movs	r2, #1
 8009920:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	3b01      	subs	r3, #1
 8009926:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1f1      	bne.n	8009912 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800992e:	4b13      	ldr	r3, [pc, #76]	; (800997c <xTaskResumeAll+0x134>)
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009934:	4b10      	ldr	r3, [pc, #64]	; (8009978 <xTaskResumeAll+0x130>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d009      	beq.n	8009950 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009940:	4b0f      	ldr	r3, [pc, #60]	; (8009980 <xTaskResumeAll+0x138>)
 8009942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009950:	f001 f8e0 	bl	800ab14 <vPortExitCritical>

	return xAlreadyYielded;
 8009954:	68bb      	ldr	r3, [r7, #8]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20003a00 	.word	0x20003a00
 8009964:	200039d8 	.word	0x200039d8
 8009968:	20003998 	.word	0x20003998
 800996c:	200039e0 	.word	0x200039e0
 8009970:	20003508 	.word	0x20003508
 8009974:	20003504 	.word	0x20003504
 8009978:	200039ec 	.word	0x200039ec
 800997c:	200039e8 	.word	0x200039e8
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <xTaskGetTickCount+0x1c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009990:	687b      	ldr	r3, [r7, #4]
}
 8009992:	4618      	mov	r0, r3
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	200039dc 	.word	0x200039dc

080099a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ae:	4b4f      	ldr	r3, [pc, #316]	; (8009aec <xTaskIncrementTick+0x148>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f040 808f 	bne.w	8009ad6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099b8:	4b4d      	ldr	r3, [pc, #308]	; (8009af0 <xTaskIncrementTick+0x14c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	3301      	adds	r3, #1
 80099be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099c0:	4a4b      	ldr	r2, [pc, #300]	; (8009af0 <xTaskIncrementTick+0x14c>)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d120      	bne.n	8009a0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80099cc:	4b49      	ldr	r3, [pc, #292]	; (8009af4 <xTaskIncrementTick+0x150>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00a      	beq.n	80099ec <xTaskIncrementTick+0x48>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	603b      	str	r3, [r7, #0]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <xTaskIncrementTick+0x46>
 80099ec:	4b41      	ldr	r3, [pc, #260]	; (8009af4 <xTaskIncrementTick+0x150>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	60fb      	str	r3, [r7, #12]
 80099f2:	4b41      	ldr	r3, [pc, #260]	; (8009af8 <xTaskIncrementTick+0x154>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a3f      	ldr	r2, [pc, #252]	; (8009af4 <xTaskIncrementTick+0x150>)
 80099f8:	6013      	str	r3, [r2, #0]
 80099fa:	4a3f      	ldr	r2, [pc, #252]	; (8009af8 <xTaskIncrementTick+0x154>)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	4b3e      	ldr	r3, [pc, #248]	; (8009afc <xTaskIncrementTick+0x158>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3301      	adds	r3, #1
 8009a06:	4a3d      	ldr	r2, [pc, #244]	; (8009afc <xTaskIncrementTick+0x158>)
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	f000 fadb 	bl	8009fc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a0e:	4b3c      	ldr	r3, [pc, #240]	; (8009b00 <xTaskIncrementTick+0x15c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d349      	bcc.n	8009aac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a18:	4b36      	ldr	r3, [pc, #216]	; (8009af4 <xTaskIncrementTick+0x150>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a22:	4b37      	ldr	r3, [pc, #220]	; (8009b00 <xTaskIncrementTick+0x15c>)
 8009a24:	f04f 32ff 	mov.w	r2, #4294967295
 8009a28:	601a      	str	r2, [r3, #0]
					break;
 8009a2a:	e03f      	b.n	8009aac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2c:	4b31      	ldr	r3, [pc, #196]	; (8009af4 <xTaskIncrementTick+0x150>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d203      	bcs.n	8009a4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a44:	4a2e      	ldr	r2, [pc, #184]	; (8009b00 <xTaskIncrementTick+0x15c>)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a4a:	e02f      	b.n	8009aac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe febf 	bl	80087d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d004      	beq.n	8009a68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	3318      	adds	r3, #24
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe feb6 	bl	80087d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6c:	4b25      	ldr	r3, [pc, #148]	; (8009b04 <xTaskIncrementTick+0x160>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d903      	bls.n	8009a7c <xTaskIncrementTick+0xd8>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	4a22      	ldr	r2, [pc, #136]	; (8009b04 <xTaskIncrementTick+0x160>)
 8009a7a:	6013      	str	r3, [r2, #0]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4a1f      	ldr	r2, [pc, #124]	; (8009b08 <xTaskIncrementTick+0x164>)
 8009a8a:	441a      	add	r2, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4619      	mov	r1, r3
 8009a92:	4610      	mov	r0, r2
 8009a94:	f7fe fe41 	bl	800871a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9c:	4b1b      	ldr	r3, [pc, #108]	; (8009b0c <xTaskIncrementTick+0x168>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d3b8      	bcc.n	8009a18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aaa:	e7b5      	b.n	8009a18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009aac:	4b17      	ldr	r3, [pc, #92]	; (8009b0c <xTaskIncrementTick+0x168>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab2:	4915      	ldr	r1, [pc, #84]	; (8009b08 <xTaskIncrementTick+0x164>)
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	440b      	add	r3, r1
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d901      	bls.n	8009ac8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ac8:	4b11      	ldr	r3, [pc, #68]	; (8009b10 <xTaskIncrementTick+0x16c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d007      	beq.n	8009ae0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	e004      	b.n	8009ae0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ad6:	4b0f      	ldr	r3, [pc, #60]	; (8009b14 <xTaskIncrementTick+0x170>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3301      	adds	r3, #1
 8009adc:	4a0d      	ldr	r2, [pc, #52]	; (8009b14 <xTaskIncrementTick+0x170>)
 8009ade:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ae0:	697b      	ldr	r3, [r7, #20]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20003a00 	.word	0x20003a00
 8009af0:	200039dc 	.word	0x200039dc
 8009af4:	20003990 	.word	0x20003990
 8009af8:	20003994 	.word	0x20003994
 8009afc:	200039f0 	.word	0x200039f0
 8009b00:	200039f8 	.word	0x200039f8
 8009b04:	200039e0 	.word	0x200039e0
 8009b08:	20003508 	.word	0x20003508
 8009b0c:	20003504 	.word	0x20003504
 8009b10:	200039ec 	.word	0x200039ec
 8009b14:	200039e8 	.word	0x200039e8

08009b18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b1e:	4b2a      	ldr	r3, [pc, #168]	; (8009bc8 <vTaskSwitchContext+0xb0>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b26:	4b29      	ldr	r3, [pc, #164]	; (8009bcc <vTaskSwitchContext+0xb4>)
 8009b28:	2201      	movs	r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b2c:	e046      	b.n	8009bbc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009b2e:	4b27      	ldr	r3, [pc, #156]	; (8009bcc <vTaskSwitchContext+0xb4>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b34:	4b26      	ldr	r3, [pc, #152]	; (8009bd0 <vTaskSwitchContext+0xb8>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	e010      	b.n	8009b5e <vTaskSwitchContext+0x46>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10a      	bne.n	8009b58 <vTaskSwitchContext+0x40>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	607b      	str	r3, [r7, #4]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <vTaskSwitchContext+0x3e>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]
 8009b5e:	491d      	ldr	r1, [pc, #116]	; (8009bd4 <vTaskSwitchContext+0xbc>)
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	4613      	mov	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0e4      	beq.n	8009b3c <vTaskSwitchContext+0x24>
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4a15      	ldr	r2, [pc, #84]	; (8009bd4 <vTaskSwitchContext+0xbc>)
 8009b7e:	4413      	add	r3, r2
 8009b80:	60bb      	str	r3, [r7, #8]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	605a      	str	r2, [r3, #4]
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	3308      	adds	r3, #8
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d104      	bne.n	8009ba2 <vTaskSwitchContext+0x8a>
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	605a      	str	r2, [r3, #4]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	4a0b      	ldr	r2, [pc, #44]	; (8009bd8 <vTaskSwitchContext+0xc0>)
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <vTaskSwitchContext+0xb8>)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bb2:	4b09      	ldr	r3, [pc, #36]	; (8009bd8 <vTaskSwitchContext+0xc0>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3354      	adds	r3, #84	; 0x54
 8009bb8:	4a08      	ldr	r2, [pc, #32]	; (8009bdc <vTaskSwitchContext+0xc4>)
 8009bba:	6013      	str	r3, [r2, #0]
}
 8009bbc:	bf00      	nop
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	20003a00 	.word	0x20003a00
 8009bcc:	200039ec 	.word	0x200039ec
 8009bd0:	200039e0 	.word	0x200039e0
 8009bd4:	20003508 	.word	0x20003508
 8009bd8:	20003504 	.word	0x20003504
 8009bdc:	20000014 	.word	0x20000014

08009be0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	60fb      	str	r3, [r7, #12]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c06:	4b07      	ldr	r3, [pc, #28]	; (8009c24 <vTaskPlaceOnEventList+0x44>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3318      	adds	r3, #24
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7fe fda7 	bl	8008762 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c14:	2101      	movs	r1, #1
 8009c16:	6838      	ldr	r0, [r7, #0]
 8009c18:	f000 fa80 	bl	800a11c <prvAddCurrentTaskToDelayedList>
}
 8009c1c:	bf00      	nop
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20003504 	.word	0x20003504

08009c28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10a      	bne.n	8009c50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	617b      	str	r3, [r7, #20]
}
 8009c4c:	bf00      	nop
 8009c4e:	e7fe      	b.n	8009c4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <vTaskPlaceOnEventListRestricted+0x54>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3318      	adds	r3, #24
 8009c56:	4619      	mov	r1, r3
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7fe fd5e 	bl	800871a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009c64:	f04f 33ff 	mov.w	r3, #4294967295
 8009c68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c6a:	6879      	ldr	r1, [r7, #4]
 8009c6c:	68b8      	ldr	r0, [r7, #8]
 8009c6e:	f000 fa55 	bl	800a11c <prvAddCurrentTaskToDelayedList>
	}
 8009c72:	bf00      	nop
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20003504 	.word	0x20003504

08009c80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10a      	bne.n	8009cac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	60fb      	str	r3, [r7, #12]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	3318      	adds	r3, #24
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe fd8f 	bl	80087d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cb6:	4b1e      	ldr	r3, [pc, #120]	; (8009d30 <xTaskRemoveFromEventList+0xb0>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d11d      	bne.n	8009cfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fd86 	bl	80087d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ccc:	4b19      	ldr	r3, [pc, #100]	; (8009d34 <xTaskRemoveFromEventList+0xb4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d903      	bls.n	8009cdc <xTaskRemoveFromEventList+0x5c>
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd8:	4a16      	ldr	r2, [pc, #88]	; (8009d34 <xTaskRemoveFromEventList+0xb4>)
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4a13      	ldr	r2, [pc, #76]	; (8009d38 <xTaskRemoveFromEventList+0xb8>)
 8009cea:	441a      	add	r2, r3
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f7fe fd11 	bl	800871a <vListInsertEnd>
 8009cf8:	e005      	b.n	8009d06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	3318      	adds	r3, #24
 8009cfe:	4619      	mov	r1, r3
 8009d00:	480e      	ldr	r0, [pc, #56]	; (8009d3c <xTaskRemoveFromEventList+0xbc>)
 8009d02:	f7fe fd0a 	bl	800871a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <xTaskRemoveFromEventList+0xc0>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d905      	bls.n	8009d20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d14:	2301      	movs	r3, #1
 8009d16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d18:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <xTaskRemoveFromEventList+0xc4>)
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	e001      	b.n	8009d24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009d20:	2300      	movs	r3, #0
 8009d22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d24:	697b      	ldr	r3, [r7, #20]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20003a00 	.word	0x20003a00
 8009d34:	200039e0 	.word	0x200039e0
 8009d38:	20003508 	.word	0x20003508
 8009d3c:	20003998 	.word	0x20003998
 8009d40:	20003504 	.word	0x20003504
 8009d44:	200039ec 	.word	0x200039ec

08009d48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d50:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <vTaskInternalSetTimeOutState+0x24>)
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d58:	4b05      	ldr	r3, [pc, #20]	; (8009d70 <vTaskInternalSetTimeOutState+0x28>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	605a      	str	r2, [r3, #4]
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	200039f0 	.word	0x200039f0
 8009d70:	200039dc 	.word	0x200039dc

08009d74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	613b      	str	r3, [r7, #16]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10a      	bne.n	8009db6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	60fb      	str	r3, [r7, #12]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009db6:	f000 fe7d 	bl	800aab4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009dba:	4b1d      	ldr	r3, [pc, #116]	; (8009e30 <xTaskCheckForTimeOut+0xbc>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	69ba      	ldr	r2, [r7, #24]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd2:	d102      	bne.n	8009dda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	61fb      	str	r3, [r7, #28]
 8009dd8:	e023      	b.n	8009e22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <xTaskCheckForTimeOut+0xc0>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d007      	beq.n	8009df6 <xTaskCheckForTimeOut+0x82>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	69ba      	ldr	r2, [r7, #24]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d302      	bcc.n	8009df6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009df0:	2301      	movs	r3, #1
 8009df2:	61fb      	str	r3, [r7, #28]
 8009df4:	e015      	b.n	8009e22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d20b      	bcs.n	8009e18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	1ad2      	subs	r2, r2, r3
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff ff9b 	bl	8009d48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e12:	2300      	movs	r3, #0
 8009e14:	61fb      	str	r3, [r7, #28]
 8009e16:	e004      	b.n	8009e22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e22:	f000 fe77 	bl	800ab14 <vPortExitCritical>

	return xReturn;
 8009e26:	69fb      	ldr	r3, [r7, #28]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3720      	adds	r7, #32
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	200039dc 	.word	0x200039dc
 8009e34:	200039f0 	.word	0x200039f0

08009e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e3c:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <vTaskMissedYield+0x14>)
 8009e3e:	2201      	movs	r2, #1
 8009e40:	601a      	str	r2, [r3, #0]
}
 8009e42:	bf00      	nop
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	200039ec 	.word	0x200039ec

08009e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e58:	f000 f852 	bl	8009f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <prvIdleTask+0x28>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d9f9      	bls.n	8009e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e64:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <prvIdleTask+0x2c>)
 8009e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e74:	e7f0      	b.n	8009e58 <prvIdleTask+0x8>
 8009e76:	bf00      	nop
 8009e78:	20003508 	.word	0x20003508
 8009e7c:	e000ed04 	.word	0xe000ed04

08009e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e86:	2300      	movs	r3, #0
 8009e88:	607b      	str	r3, [r7, #4]
 8009e8a:	e00c      	b.n	8009ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4a12      	ldr	r2, [pc, #72]	; (8009ee0 <prvInitialiseTaskLists+0x60>)
 8009e98:	4413      	add	r3, r2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe fc10 	bl	80086c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	607b      	str	r3, [r7, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b37      	cmp	r3, #55	; 0x37
 8009eaa:	d9ef      	bls.n	8009e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009eac:	480d      	ldr	r0, [pc, #52]	; (8009ee4 <prvInitialiseTaskLists+0x64>)
 8009eae:	f7fe fc07 	bl	80086c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009eb2:	480d      	ldr	r0, [pc, #52]	; (8009ee8 <prvInitialiseTaskLists+0x68>)
 8009eb4:	f7fe fc04 	bl	80086c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009eb8:	480c      	ldr	r0, [pc, #48]	; (8009eec <prvInitialiseTaskLists+0x6c>)
 8009eba:	f7fe fc01 	bl	80086c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ebe:	480c      	ldr	r0, [pc, #48]	; (8009ef0 <prvInitialiseTaskLists+0x70>)
 8009ec0:	f7fe fbfe 	bl	80086c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ec4:	480b      	ldr	r0, [pc, #44]	; (8009ef4 <prvInitialiseTaskLists+0x74>)
 8009ec6:	f7fe fbfb 	bl	80086c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009eca:	4b0b      	ldr	r3, [pc, #44]	; (8009ef8 <prvInitialiseTaskLists+0x78>)
 8009ecc:	4a05      	ldr	r2, [pc, #20]	; (8009ee4 <prvInitialiseTaskLists+0x64>)
 8009ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ed0:	4b0a      	ldr	r3, [pc, #40]	; (8009efc <prvInitialiseTaskLists+0x7c>)
 8009ed2:	4a05      	ldr	r2, [pc, #20]	; (8009ee8 <prvInitialiseTaskLists+0x68>)
 8009ed4:	601a      	str	r2, [r3, #0]
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20003508 	.word	0x20003508
 8009ee4:	20003968 	.word	0x20003968
 8009ee8:	2000397c 	.word	0x2000397c
 8009eec:	20003998 	.word	0x20003998
 8009ef0:	200039ac 	.word	0x200039ac
 8009ef4:	200039c4 	.word	0x200039c4
 8009ef8:	20003990 	.word	0x20003990
 8009efc:	20003994 	.word	0x20003994

08009f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f06:	e019      	b.n	8009f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f08:	f000 fdd4 	bl	800aab4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f0c:	4b10      	ldr	r3, [pc, #64]	; (8009f50 <prvCheckTasksWaitingTermination+0x50>)
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	3304      	adds	r3, #4
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe fc5b 	bl	80087d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f1e:	4b0d      	ldr	r3, [pc, #52]	; (8009f54 <prvCheckTasksWaitingTermination+0x54>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	4a0b      	ldr	r2, [pc, #44]	; (8009f54 <prvCheckTasksWaitingTermination+0x54>)
 8009f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f28:	4b0b      	ldr	r3, [pc, #44]	; (8009f58 <prvCheckTasksWaitingTermination+0x58>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	4a0a      	ldr	r2, [pc, #40]	; (8009f58 <prvCheckTasksWaitingTermination+0x58>)
 8009f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f32:	f000 fdef 	bl	800ab14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f810 	bl	8009f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f3c:	4b06      	ldr	r3, [pc, #24]	; (8009f58 <prvCheckTasksWaitingTermination+0x58>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e1      	bne.n	8009f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	200039ac 	.word	0x200039ac
 8009f54:	200039d8 	.word	0x200039d8
 8009f58:	200039c0 	.word	0x200039c0

08009f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3354      	adds	r3, #84	; 0x54
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f001 f993 	bl	800b294 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d108      	bne.n	8009f8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 ff87 	bl	800ae90 <vPortFree>
				vPortFree( pxTCB );
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 ff84 	bl	800ae90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f88:	e018      	b.n	8009fbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d103      	bne.n	8009f9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 ff7b 	bl	800ae90 <vPortFree>
	}
 8009f9a:	e00f      	b.n	8009fbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d00a      	beq.n	8009fbc <prvDeleteTCB+0x60>
	__asm volatile
 8009fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	60fb      	str	r3, [r7, #12]
}
 8009fb8:	bf00      	nop
 8009fba:	e7fe      	b.n	8009fba <prvDeleteTCB+0x5e>
	}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <prvResetNextTaskUnblockTime+0x38>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d104      	bne.n	8009fde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <prvResetNextTaskUnblockTime+0x3c>)
 8009fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fdc:	e008      	b.n	8009ff0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fde:	4b07      	ldr	r3, [pc, #28]	; (8009ffc <prvResetNextTaskUnblockTime+0x38>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	4a04      	ldr	r2, [pc, #16]	; (800a000 <prvResetNextTaskUnblockTime+0x3c>)
 8009fee:	6013      	str	r3, [r2, #0]
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	20003990 	.word	0x20003990
 800a000:	200039f8 	.word	0x200039f8

0800a004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <xTaskGetSchedulerState+0x34>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d102      	bne.n	800a018 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a012:	2301      	movs	r3, #1
 800a014:	607b      	str	r3, [r7, #4]
 800a016:	e008      	b.n	800a02a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a018:	4b08      	ldr	r3, [pc, #32]	; (800a03c <xTaskGetSchedulerState+0x38>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a020:	2302      	movs	r3, #2
 800a022:	607b      	str	r3, [r7, #4]
 800a024:	e001      	b.n	800a02a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a026:	2300      	movs	r3, #0
 800a028:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a02a:	687b      	ldr	r3, [r7, #4]
	}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	200039e4 	.word	0x200039e4
 800a03c:	20003a00 	.word	0x20003a00

0800a040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d056      	beq.n	800a104 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a056:	4b2e      	ldr	r3, [pc, #184]	; (800a110 <xTaskPriorityDisinherit+0xd0>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d00a      	beq.n	800a076 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	60fb      	str	r3, [r7, #12]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10a      	bne.n	800a094 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	60bb      	str	r3, [r7, #8]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a098:	1e5a      	subs	r2, r3, #1
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d02c      	beq.n	800a104 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d128      	bne.n	800a104 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe fb8c 	bl	80087d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d4:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <xTaskPriorityDisinherit+0xd4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d903      	bls.n	800a0e4 <xTaskPriorityDisinherit+0xa4>
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	4a0c      	ldr	r2, [pc, #48]	; (800a114 <xTaskPriorityDisinherit+0xd4>)
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4a09      	ldr	r2, [pc, #36]	; (800a118 <xTaskPriorityDisinherit+0xd8>)
 800a0f2:	441a      	add	r2, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fe fb0d 	bl	800871a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a100:	2301      	movs	r3, #1
 800a102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a104:	697b      	ldr	r3, [r7, #20]
	}
 800a106:	4618      	mov	r0, r3
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20003504 	.word	0x20003504
 800a114:	200039e0 	.word	0x200039e0
 800a118:	20003508 	.word	0x20003508

0800a11c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a126:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <prvAddCurrentTaskToDelayedList+0x90>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a12c:	4b20      	ldr	r3, [pc, #128]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3304      	adds	r3, #4
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fb4e 	bl	80087d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d10a      	bne.n	800a156 <prvAddCurrentTaskToDelayedList+0x3a>
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d007      	beq.n	800a156 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a146:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4619      	mov	r1, r3
 800a14e:	4819      	ldr	r0, [pc, #100]	; (800a1b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a150:	f7fe fae3 	bl	800871a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a154:	e026      	b.n	800a1a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4413      	add	r3, r2
 800a15c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a15e:	4b14      	ldr	r3, [pc, #80]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d209      	bcs.n	800a182 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a16e:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3304      	adds	r3, #4
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f7fe faf1 	bl	8008762 <vListInsert>
}
 800a180:	e010      	b.n	800a1a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a182:	4b0e      	ldr	r3, [pc, #56]	; (800a1bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4619      	mov	r1, r3
 800a18e:	4610      	mov	r0, r2
 800a190:	f7fe fae7 	bl	8008762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d202      	bcs.n	800a1a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a19e:	4a08      	ldr	r2, [pc, #32]	; (800a1c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	6013      	str	r3, [r2, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	200039dc 	.word	0x200039dc
 800a1b0:	20003504 	.word	0x20003504
 800a1b4:	200039c4 	.word	0x200039c4
 800a1b8:	20003994 	.word	0x20003994
 800a1bc:	20003990 	.word	0x20003990
 800a1c0:	200039f8 	.word	0x200039f8

0800a1c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08a      	sub	sp, #40	; 0x28
 800a1c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a1ce:	f000 fb07 	bl	800a7e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a1d2:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <xTimerCreateTimerTask+0x80>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d021      	beq.n	800a21e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a1e2:	1d3a      	adds	r2, r7, #4
 800a1e4:	f107 0108 	add.w	r1, r7, #8
 800a1e8:	f107 030c 	add.w	r3, r7, #12
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fe fa4d 	bl	800868c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	9202      	str	r2, [sp, #8]
 800a1fa:	9301      	str	r3, [sp, #4]
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	2300      	movs	r3, #0
 800a202:	460a      	mov	r2, r1
 800a204:	4910      	ldr	r1, [pc, #64]	; (800a248 <xTimerCreateTimerTask+0x84>)
 800a206:	4811      	ldr	r0, [pc, #68]	; (800a24c <xTimerCreateTimerTask+0x88>)
 800a208:	f7ff f8b4 	bl	8009374 <xTaskCreateStatic>
 800a20c:	4603      	mov	r3, r0
 800a20e:	4a10      	ldr	r2, [pc, #64]	; (800a250 <xTimerCreateTimerTask+0x8c>)
 800a210:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a212:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <xTimerCreateTimerTask+0x8c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a21a:	2301      	movs	r3, #1
 800a21c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	613b      	str	r3, [r7, #16]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a23a:	697b      	ldr	r3, [r7, #20]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20003a34 	.word	0x20003a34
 800a248:	0800bbb4 	.word	0x0800bbb4
 800a24c:	0800a389 	.word	0x0800a389
 800a250:	20003a38 	.word	0x20003a38

0800a254 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08a      	sub	sp, #40	; 0x28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a262:	2300      	movs	r3, #0
 800a264:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	623b      	str	r3, [r7, #32]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a282:	4b1a      	ldr	r3, [pc, #104]	; (800a2ec <xTimerGenericCommand+0x98>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d02a      	beq.n	800a2e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b05      	cmp	r3, #5
 800a29a:	dc18      	bgt.n	800a2ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a29c:	f7ff feb2 	bl	800a004 <xTaskGetSchedulerState>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d109      	bne.n	800a2ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a2a6:	4b11      	ldr	r3, [pc, #68]	; (800a2ec <xTimerGenericCommand+0x98>)
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f107 0110 	add.w	r1, r7, #16
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b2:	f7fe fbf7 	bl	8008aa4 <xQueueGenericSend>
 800a2b6:	6278      	str	r0, [r7, #36]	; 0x24
 800a2b8:	e012      	b.n	800a2e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a2ba:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <xTimerGenericCommand+0x98>)
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	f107 0110 	add.w	r1, r7, #16
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f7fe fbed 	bl	8008aa4 <xQueueGenericSend>
 800a2ca:	6278      	str	r0, [r7, #36]	; 0x24
 800a2cc:	e008      	b.n	800a2e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a2ce:	4b07      	ldr	r3, [pc, #28]	; (800a2ec <xTimerGenericCommand+0x98>)
 800a2d0:	6818      	ldr	r0, [r3, #0]
 800a2d2:	f107 0110 	add.w	r1, r7, #16
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	f7fe fce1 	bl	8008ca0 <xQueueGenericSendFromISR>
 800a2de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3728      	adds	r7, #40	; 0x28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20003a34 	.word	0x20003a34

0800a2f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2fa:	4b22      	ldr	r3, [pc, #136]	; (800a384 <prvProcessExpiredTimer+0x94>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	3304      	adds	r3, #4
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fe fa63 	bl	80087d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a314:	f003 0304 	and.w	r3, r3, #4
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d022      	beq.n	800a362 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	699a      	ldr	r2, [r3, #24]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	18d1      	adds	r1, r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	6978      	ldr	r0, [r7, #20]
 800a32a:	f000 f8d1 	bl	800a4d0 <prvInsertTimerInActiveList>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01f      	beq.n	800a374 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a334:	2300      	movs	r3, #0
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	2300      	movs	r3, #0
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	2100      	movs	r1, #0
 800a33e:	6978      	ldr	r0, [r7, #20]
 800a340:	f7ff ff88 	bl	800a254 <xTimerGenericCommand>
 800a344:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d113      	bne.n	800a374 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	60fb      	str	r3, [r7, #12]
}
 800a35e:	bf00      	nop
 800a360:	e7fe      	b.n	800a360 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a368:	f023 0301 	bic.w	r3, r3, #1
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	6978      	ldr	r0, [r7, #20]
 800a37a:	4798      	blx	r3
}
 800a37c:	bf00      	nop
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	20003a2c 	.word	0x20003a2c

0800a388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a390:	f107 0308 	add.w	r3, r7, #8
 800a394:	4618      	mov	r0, r3
 800a396:	f000 f857 	bl	800a448 <prvGetNextExpireTime>
 800a39a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 f803 	bl	800a3ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a3a6:	f000 f8d5 	bl	800a554 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3aa:	e7f1      	b.n	800a390 <prvTimerTask+0x8>

0800a3ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a3b6:	f7ff fa39 	bl	800982c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ba:	f107 0308 	add.w	r3, r7, #8
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f866 	bl	800a490 <prvSampleTimeNow>
 800a3c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d130      	bne.n	800a42e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <prvProcessTimerOrBlockTask+0x3c>
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d806      	bhi.n	800a3e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a3da:	f7ff fa35 	bl	8009848 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a3de:	68f9      	ldr	r1, [r7, #12]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff ff85 	bl	800a2f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a3e6:	e024      	b.n	800a432 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d008      	beq.n	800a400 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a3ee:	4b13      	ldr	r3, [pc, #76]	; (800a43c <prvProcessTimerOrBlockTask+0x90>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <prvProcessTimerOrBlockTask+0x50>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <prvProcessTimerOrBlockTask+0x52>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a400:	4b0f      	ldr	r3, [pc, #60]	; (800a440 <prvProcessTimerOrBlockTask+0x94>)
 800a402:	6818      	ldr	r0, [r3, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	4619      	mov	r1, r3
 800a40e:	f7fe ff7d 	bl	800930c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a412:	f7ff fa19 	bl	8009848 <xTaskResumeAll>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a41c:	4b09      	ldr	r3, [pc, #36]	; (800a444 <prvProcessTimerOrBlockTask+0x98>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
}
 800a42c:	e001      	b.n	800a432 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a42e:	f7ff fa0b 	bl	8009848 <xTaskResumeAll>
}
 800a432:	bf00      	nop
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	20003a30 	.word	0x20003a30
 800a440:	20003a34 	.word	0x20003a34
 800a444:	e000ed04 	.word	0xe000ed04

0800a448 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a450:	4b0e      	ldr	r3, [pc, #56]	; (800a48c <prvGetNextExpireTime+0x44>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <prvGetNextExpireTime+0x16>
 800a45a:	2201      	movs	r2, #1
 800a45c:	e000      	b.n	800a460 <prvGetNextExpireTime+0x18>
 800a45e:	2200      	movs	r2, #0
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d105      	bne.n	800a478 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a46c:	4b07      	ldr	r3, [pc, #28]	; (800a48c <prvGetNextExpireTime+0x44>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	e001      	b.n	800a47c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a47c:	68fb      	ldr	r3, [r7, #12]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	20003a2c 	.word	0x20003a2c

0800a490 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a498:	f7ff fa74 	bl	8009984 <xTaskGetTickCount>
 800a49c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a49e:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <prvSampleTimeNow+0x3c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d205      	bcs.n	800a4b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a4a8:	f000 f936 	bl	800a718 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e002      	b.n	800a4ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a4ba:	4a04      	ldr	r2, [pc, #16]	; (800a4cc <prvSampleTimeNow+0x3c>)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	20003a3c 	.word	0x20003a3c

0800a4d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d812      	bhi.n	800a51c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	1ad2      	subs	r2, r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	429a      	cmp	r2, r3
 800a502:	d302      	bcc.n	800a50a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a504:	2301      	movs	r3, #1
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	e01b      	b.n	800a542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a50a:	4b10      	ldr	r3, [pc, #64]	; (800a54c <prvInsertTimerInActiveList+0x7c>)
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	3304      	adds	r3, #4
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f7fe f924 	bl	8008762 <vListInsert>
 800a51a:	e012      	b.n	800a542 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	429a      	cmp	r2, r3
 800a522:	d206      	bcs.n	800a532 <prvInsertTimerInActiveList+0x62>
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d302      	bcc.n	800a532 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a52c:	2301      	movs	r3, #1
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	e007      	b.n	800a542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a532:	4b07      	ldr	r3, [pc, #28]	; (800a550 <prvInsertTimerInActiveList+0x80>)
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3304      	adds	r3, #4
 800a53a:	4619      	mov	r1, r3
 800a53c:	4610      	mov	r0, r2
 800a53e:	f7fe f910 	bl	8008762 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a542:	697b      	ldr	r3, [r7, #20]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20003a30 	.word	0x20003a30
 800a550:	20003a2c 	.word	0x20003a2c

0800a554 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08e      	sub	sp, #56	; 0x38
 800a558:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a55a:	e0ca      	b.n	800a6f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	da18      	bge.n	800a594 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a562:	1d3b      	adds	r3, r7, #4
 800a564:	3304      	adds	r3, #4
 800a566:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10a      	bne.n	800a584 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	61fb      	str	r3, [r7, #28]
}
 800a580:	bf00      	nop
 800a582:	e7fe      	b.n	800a582 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a58a:	6850      	ldr	r0, [r2, #4]
 800a58c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a58e:	6892      	ldr	r2, [r2, #8]
 800a590:	4611      	mov	r1, r2
 800a592:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f2c0 80aa 	blt.w	800a6f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d004      	beq.n	800a5b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe f911 	bl	80087d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5b2:	463b      	mov	r3, r7
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff ff6b 	bl	800a490 <prvSampleTimeNow>
 800a5ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b09      	cmp	r3, #9
 800a5c0:	f200 8097 	bhi.w	800a6f2 <prvProcessReceivedCommands+0x19e>
 800a5c4:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <prvProcessReceivedCommands+0x78>)
 800a5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ca:	bf00      	nop
 800a5cc:	0800a5f5 	.word	0x0800a5f5
 800a5d0:	0800a5f5 	.word	0x0800a5f5
 800a5d4:	0800a5f5 	.word	0x0800a5f5
 800a5d8:	0800a669 	.word	0x0800a669
 800a5dc:	0800a67d 	.word	0x0800a67d
 800a5e0:	0800a6c7 	.word	0x0800a6c7
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a5f5 	.word	0x0800a5f5
 800a5ec:	0800a669 	.word	0x0800a669
 800a5f0:	0800a67d 	.word	0x0800a67d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5fa:	f043 0301 	orr.w	r3, r3, #1
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	18d1      	adds	r1, r2, r3
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a614:	f7ff ff5c 	bl	800a4d0 <prvInsertTimerInActiveList>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d069      	beq.n	800a6f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a624:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a62c:	f003 0304 	and.w	r3, r3, #4
 800a630:	2b00      	cmp	r3, #0
 800a632:	d05e      	beq.n	800a6f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	441a      	add	r2, r3
 800a63c:	2300      	movs	r3, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2300      	movs	r3, #0
 800a642:	2100      	movs	r1, #0
 800a644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a646:	f7ff fe05 	bl	800a254 <xTimerGenericCommand>
 800a64a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d14f      	bne.n	800a6f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	61bb      	str	r3, [r7, #24]
}
 800a664:	bf00      	nop
 800a666:	e7fe      	b.n	800a666 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a66e:	f023 0301 	bic.w	r3, r3, #1
 800a672:	b2da      	uxtb	r2, r3
 800a674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a67a:	e03a      	b.n	800a6f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a682:	f043 0301 	orr.w	r3, r3, #1
 800a686:	b2da      	uxtb	r2, r3
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10a      	bne.n	800a6b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a0:	f383 8811 	msr	BASEPRI, r3
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	617b      	str	r3, [r7, #20]
}
 800a6ae:	bf00      	nop
 800a6b0:	e7fe      	b.n	800a6b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	699a      	ldr	r2, [r3, #24]
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	18d1      	adds	r1, r2, r3
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6c0:	f7ff ff06 	bl	800a4d0 <prvInsertTimerInActiveList>
					break;
 800a6c4:	e015      	b.n	800a6f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a6d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6d6:	f000 fbdb 	bl	800ae90 <vPortFree>
 800a6da:	e00a      	b.n	800a6f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e2:	f023 0301 	bic.w	r3, r3, #1
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6ee:	e000      	b.n	800a6f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a6f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6f2:	4b08      	ldr	r3, [pc, #32]	; (800a714 <prvProcessReceivedCommands+0x1c0>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	1d39      	adds	r1, r7, #4
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fb6c 	bl	8008dd8 <xQueueReceive>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	f47f af2a 	bne.w	800a55c <prvProcessReceivedCommands+0x8>
	}
}
 800a708:	bf00      	nop
 800a70a:	bf00      	nop
 800a70c:	3730      	adds	r7, #48	; 0x30
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	20003a34 	.word	0x20003a34

0800a718 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a71e:	e048      	b.n	800a7b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a720:	4b2d      	ldr	r3, [pc, #180]	; (800a7d8 <prvSwitchTimerLists+0xc0>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a72a:	4b2b      	ldr	r3, [pc, #172]	; (800a7d8 <prvSwitchTimerLists+0xc0>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3304      	adds	r3, #4
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe f84b 	bl	80087d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	d02e      	beq.n	800a7b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	4413      	add	r3, r2
 800a75c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	429a      	cmp	r2, r3
 800a764:	d90e      	bls.n	800a784 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a772:	4b19      	ldr	r3, [pc, #100]	; (800a7d8 <prvSwitchTimerLists+0xc0>)
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3304      	adds	r3, #4
 800a77a:	4619      	mov	r1, r3
 800a77c:	4610      	mov	r0, r2
 800a77e:	f7fd fff0 	bl	8008762 <vListInsert>
 800a782:	e016      	b.n	800a7b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a784:	2300      	movs	r3, #0
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	2300      	movs	r3, #0
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	2100      	movs	r1, #0
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f7ff fd60 	bl	800a254 <xTimerGenericCommand>
 800a794:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10a      	bne.n	800a7b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	603b      	str	r3, [r7, #0]
}
 800a7ae:	bf00      	nop
 800a7b0:	e7fe      	b.n	800a7b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <prvSwitchTimerLists+0xc0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1b1      	bne.n	800a720 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7bc:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <prvSwitchTimerLists+0xc0>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7c2:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <prvSwitchTimerLists+0xc4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a04      	ldr	r2, [pc, #16]	; (800a7d8 <prvSwitchTimerLists+0xc0>)
 800a7c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7ca:	4a04      	ldr	r2, [pc, #16]	; (800a7dc <prvSwitchTimerLists+0xc4>)
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	6013      	str	r3, [r2, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20003a2c 	.word	0x20003a2c
 800a7dc:	20003a30 	.word	0x20003a30

0800a7e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7e6:	f000 f965 	bl	800aab4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7ea:	4b15      	ldr	r3, [pc, #84]	; (800a840 <prvCheckForValidListAndQueue+0x60>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d120      	bne.n	800a834 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7f2:	4814      	ldr	r0, [pc, #80]	; (800a844 <prvCheckForValidListAndQueue+0x64>)
 800a7f4:	f7fd ff64 	bl	80086c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7f8:	4813      	ldr	r0, [pc, #76]	; (800a848 <prvCheckForValidListAndQueue+0x68>)
 800a7fa:	f7fd ff61 	bl	80086c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7fe:	4b13      	ldr	r3, [pc, #76]	; (800a84c <prvCheckForValidListAndQueue+0x6c>)
 800a800:	4a10      	ldr	r2, [pc, #64]	; (800a844 <prvCheckForValidListAndQueue+0x64>)
 800a802:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a804:	4b12      	ldr	r3, [pc, #72]	; (800a850 <prvCheckForValidListAndQueue+0x70>)
 800a806:	4a10      	ldr	r2, [pc, #64]	; (800a848 <prvCheckForValidListAndQueue+0x68>)
 800a808:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a80a:	2300      	movs	r3, #0
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	4b11      	ldr	r3, [pc, #68]	; (800a854 <prvCheckForValidListAndQueue+0x74>)
 800a810:	4a11      	ldr	r2, [pc, #68]	; (800a858 <prvCheckForValidListAndQueue+0x78>)
 800a812:	2110      	movs	r1, #16
 800a814:	200a      	movs	r0, #10
 800a816:	f7fe f86f 	bl	80088f8 <xQueueGenericCreateStatic>
 800a81a:	4603      	mov	r3, r0
 800a81c:	4a08      	ldr	r2, [pc, #32]	; (800a840 <prvCheckForValidListAndQueue+0x60>)
 800a81e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a820:	4b07      	ldr	r3, [pc, #28]	; (800a840 <prvCheckForValidListAndQueue+0x60>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d005      	beq.n	800a834 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a828:	4b05      	ldr	r3, [pc, #20]	; (800a840 <prvCheckForValidListAndQueue+0x60>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	490b      	ldr	r1, [pc, #44]	; (800a85c <prvCheckForValidListAndQueue+0x7c>)
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fe fd42 	bl	80092b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a834:	f000 f96e 	bl	800ab14 <vPortExitCritical>
}
 800a838:	bf00      	nop
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20003a34 	.word	0x20003a34
 800a844:	20003a04 	.word	0x20003a04
 800a848:	20003a18 	.word	0x20003a18
 800a84c:	20003a2c 	.word	0x20003a2c
 800a850:	20003a30 	.word	0x20003a30
 800a854:	20003ae0 	.word	0x20003ae0
 800a858:	20003a40 	.word	0x20003a40
 800a85c:	0800bbbc 	.word	0x0800bbbc

0800a860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	3b04      	subs	r3, #4
 800a870:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3b04      	subs	r3, #4
 800a87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f023 0201 	bic.w	r2, r3, #1
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3b04      	subs	r3, #4
 800a88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a890:	4a0c      	ldr	r2, [pc, #48]	; (800a8c4 <pxPortInitialiseStack+0x64>)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3b14      	subs	r3, #20
 800a89a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3b04      	subs	r3, #4
 800a8a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f06f 0202 	mvn.w	r2, #2
 800a8ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3b20      	subs	r3, #32
 800a8b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	0800a8c9 	.word	0x0800a8c9

0800a8c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8d2:	4b12      	ldr	r3, [pc, #72]	; (800a91c <prvTaskExitError+0x54>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8da:	d00a      	beq.n	800a8f2 <prvTaskExitError+0x2a>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	60fb      	str	r3, [r7, #12]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <prvTaskExitError+0x28>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	60bb      	str	r3, [r7, #8]
}
 800a904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a906:	bf00      	nop
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0fc      	beq.n	800a908 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a90e:	bf00      	nop
 800a910:	bf00      	nop
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	20000010 	.word	0x20000010

0800a920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <pxCurrentTCBConst2>)
 800a922:	6819      	ldr	r1, [r3, #0]
 800a924:	6808      	ldr	r0, [r1, #0]
 800a926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92a:	f380 8809 	msr	PSP, r0
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8811 	msr	BASEPRI, r0
 800a93a:	4770      	bx	lr
 800a93c:	f3af 8000 	nop.w

0800a940 <pxCurrentTCBConst2>:
 800a940:	20003504 	.word	0x20003504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop

0800a948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a948:	4808      	ldr	r0, [pc, #32]	; (800a96c <prvPortStartFirstTask+0x24>)
 800a94a:	6800      	ldr	r0, [r0, #0]
 800a94c:	6800      	ldr	r0, [r0, #0]
 800a94e:	f380 8808 	msr	MSP, r0
 800a952:	f04f 0000 	mov.w	r0, #0
 800a956:	f380 8814 	msr	CONTROL, r0
 800a95a:	b662      	cpsie	i
 800a95c:	b661      	cpsie	f
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	df00      	svc	0
 800a968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a96a:	bf00      	nop
 800a96c:	e000ed08 	.word	0xe000ed08

0800a970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a976:	4b46      	ldr	r3, [pc, #280]	; (800aa90 <xPortStartScheduler+0x120>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a46      	ldr	r2, [pc, #280]	; (800aa94 <xPortStartScheduler+0x124>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d10a      	bne.n	800a996 <xPortStartScheduler+0x26>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	613b      	str	r3, [r7, #16]
}
 800a992:	bf00      	nop
 800a994:	e7fe      	b.n	800a994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a996:	4b3e      	ldr	r3, [pc, #248]	; (800aa90 <xPortStartScheduler+0x120>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a3f      	ldr	r2, [pc, #252]	; (800aa98 <xPortStartScheduler+0x128>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d10a      	bne.n	800a9b6 <xPortStartScheduler+0x46>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	60fb      	str	r3, [r7, #12]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a9b6:	4b39      	ldr	r3, [pc, #228]	; (800aa9c <xPortStartScheduler+0x12c>)
 800a9b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	22ff      	movs	r2, #255	; 0xff
 800a9c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	4b31      	ldr	r3, [pc, #196]	; (800aaa0 <xPortStartScheduler+0x130>)
 800a9dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9de:	4b31      	ldr	r3, [pc, #196]	; (800aaa4 <xPortStartScheduler+0x134>)
 800a9e0:	2207      	movs	r2, #7
 800a9e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9e4:	e009      	b.n	800a9fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a9e6:	4b2f      	ldr	r3, [pc, #188]	; (800aaa4 <xPortStartScheduler+0x134>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	4a2d      	ldr	r2, [pc, #180]	; (800aaa4 <xPortStartScheduler+0x134>)
 800a9ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	005b      	lsls	r3, r3, #1
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa02:	2b80      	cmp	r3, #128	; 0x80
 800aa04:	d0ef      	beq.n	800a9e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa06:	4b27      	ldr	r3, [pc, #156]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f1c3 0307 	rsb	r3, r3, #7
 800aa0e:	2b04      	cmp	r3, #4
 800aa10:	d00a      	beq.n	800aa28 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	60bb      	str	r3, [r7, #8]
}
 800aa24:	bf00      	nop
 800aa26:	e7fe      	b.n	800aa26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa28:	4b1e      	ldr	r3, [pc, #120]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	021b      	lsls	r3, r3, #8
 800aa2e:	4a1d      	ldr	r2, [pc, #116]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa32:	4b1c      	ldr	r3, [pc, #112]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa3a:	4a1a      	ldr	r2, [pc, #104]	; (800aaa4 <xPortStartScheduler+0x134>)
 800aa3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa46:	4b18      	ldr	r3, [pc, #96]	; (800aaa8 <xPortStartScheduler+0x138>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a17      	ldr	r2, [pc, #92]	; (800aaa8 <xPortStartScheduler+0x138>)
 800aa4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa52:	4b15      	ldr	r3, [pc, #84]	; (800aaa8 <xPortStartScheduler+0x138>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a14      	ldr	r2, [pc, #80]	; (800aaa8 <xPortStartScheduler+0x138>)
 800aa58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aa5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aa5e:	f000 f8dd 	bl	800ac1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aa62:	4b12      	ldr	r3, [pc, #72]	; (800aaac <xPortStartScheduler+0x13c>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aa68:	f000 f8fc 	bl	800ac64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa6c:	4b10      	ldr	r3, [pc, #64]	; (800aab0 <xPortStartScheduler+0x140>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a0f      	ldr	r2, [pc, #60]	; (800aab0 <xPortStartScheduler+0x140>)
 800aa72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aa76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aa78:	f7ff ff66 	bl	800a948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aa7c:	f7ff f84c 	bl	8009b18 <vTaskSwitchContext>
	prvTaskExitError();
 800aa80:	f7ff ff22 	bl	800a8c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	e000ed00 	.word	0xe000ed00
 800aa94:	410fc271 	.word	0x410fc271
 800aa98:	410fc270 	.word	0x410fc270
 800aa9c:	e000e400 	.word	0xe000e400
 800aaa0:	20003b30 	.word	0x20003b30
 800aaa4:	20003b34 	.word	0x20003b34
 800aaa8:	e000ed20 	.word	0xe000ed20
 800aaac:	20000010 	.word	0x20000010
 800aab0:	e000ef34 	.word	0xe000ef34

0800aab4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	607b      	str	r3, [r7, #4]
}
 800aacc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aace:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <vPortEnterCritical+0x58>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3301      	adds	r3, #1
 800aad4:	4a0d      	ldr	r2, [pc, #52]	; (800ab0c <vPortEnterCritical+0x58>)
 800aad6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aad8:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <vPortEnterCritical+0x58>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d10f      	bne.n	800ab00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aae0:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <vPortEnterCritical+0x5c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <vPortEnterCritical+0x4c>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	603b      	str	r3, [r7, #0]
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <vPortEnterCritical+0x4a>
	}
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	20000010 	.word	0x20000010
 800ab10:	e000ed04 	.word	0xe000ed04

0800ab14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab1a:	4b12      	ldr	r3, [pc, #72]	; (800ab64 <vPortExitCritical+0x50>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <vPortExitCritical+0x24>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	607b      	str	r3, [r7, #4]
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab38:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <vPortExitCritical+0x50>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	4a09      	ldr	r2, [pc, #36]	; (800ab64 <vPortExitCritical+0x50>)
 800ab40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab42:	4b08      	ldr	r3, [pc, #32]	; (800ab64 <vPortExitCritical+0x50>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d105      	bne.n	800ab56 <vPortExitCritical+0x42>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	f383 8811 	msr	BASEPRI, r3
}
 800ab54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	20000010 	.word	0x20000010
	...

0800ab70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ab70:	f3ef 8009 	mrs	r0, PSP
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	4b15      	ldr	r3, [pc, #84]	; (800abd0 <pxCurrentTCBConst>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	f01e 0f10 	tst.w	lr, #16
 800ab80:	bf08      	it	eq
 800ab82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8a:	6010      	str	r0, [r2, #0]
 800ab8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab94:	f380 8811 	msr	BASEPRI, r0
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f7fe ffba 	bl	8009b18 <vTaskSwitchContext>
 800aba4:	f04f 0000 	mov.w	r0, #0
 800aba8:	f380 8811 	msr	BASEPRI, r0
 800abac:	bc09      	pop	{r0, r3}
 800abae:	6819      	ldr	r1, [r3, #0]
 800abb0:	6808      	ldr	r0, [r1, #0]
 800abb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb6:	f01e 0f10 	tst.w	lr, #16
 800abba:	bf08      	it	eq
 800abbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800abc0:	f380 8809 	msr	PSP, r0
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w

0800abd0 <pxCurrentTCBConst>:
 800abd0:	20003504 	.word	0x20003504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop

0800abd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	607b      	str	r3, [r7, #4]
}
 800abf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800abf2:	f7fe fed7 	bl	80099a4 <xTaskIncrementTick>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800abfc:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <xPortSysTickHandler+0x40>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	2300      	movs	r3, #0
 800ac06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f383 8811 	msr	BASEPRI, r3
}
 800ac0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac20:	4b0b      	ldr	r3, [pc, #44]	; (800ac50 <vPortSetupTimerInterrupt+0x34>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac26:	4b0b      	ldr	r3, [pc, #44]	; (800ac54 <vPortSetupTimerInterrupt+0x38>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <vPortSetupTimerInterrupt+0x3c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a0a      	ldr	r2, [pc, #40]	; (800ac5c <vPortSetupTimerInterrupt+0x40>)
 800ac32:	fba2 2303 	umull	r2, r3, r2, r3
 800ac36:	099b      	lsrs	r3, r3, #6
 800ac38:	4a09      	ldr	r2, [pc, #36]	; (800ac60 <vPortSetupTimerInterrupt+0x44>)
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac3e:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <vPortSetupTimerInterrupt+0x34>)
 800ac40:	2207      	movs	r2, #7
 800ac42:	601a      	str	r2, [r3, #0]
}
 800ac44:	bf00      	nop
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	e000e010 	.word	0xe000e010
 800ac54:	e000e018 	.word	0xe000e018
 800ac58:	20000004 	.word	0x20000004
 800ac5c:	10624dd3 	.word	0x10624dd3
 800ac60:	e000e014 	.word	0xe000e014

0800ac64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ac64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ac74 <vPortEnableVFP+0x10>
 800ac68:	6801      	ldr	r1, [r0, #0]
 800ac6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ac6e:	6001      	str	r1, [r0, #0]
 800ac70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ac72:	bf00      	nop
 800ac74:	e000ed88 	.word	0xe000ed88

0800ac78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ac7e:	f3ef 8305 	mrs	r3, IPSR
 800ac82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b0f      	cmp	r3, #15
 800ac88:	d914      	bls.n	800acb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ac8a:	4a17      	ldr	r2, [pc, #92]	; (800ace8 <vPortValidateInterruptPriority+0x70>)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4413      	add	r3, r2
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac94:	4b15      	ldr	r3, [pc, #84]	; (800acec <vPortValidateInterruptPriority+0x74>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	7afa      	ldrb	r2, [r7, #11]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d20a      	bcs.n	800acb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	607b      	str	r3, [r7, #4]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acb4:	4b0e      	ldr	r3, [pc, #56]	; (800acf0 <vPortValidateInterruptPriority+0x78>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acbc:	4b0d      	ldr	r3, [pc, #52]	; (800acf4 <vPortValidateInterruptPriority+0x7c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d90a      	bls.n	800acda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	603b      	str	r3, [r7, #0]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <vPortValidateInterruptPriority+0x60>
	}
 800acda:	bf00      	nop
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	e000e3f0 	.word	0xe000e3f0
 800acec:	20003b30 	.word	0x20003b30
 800acf0:	e000ed0c 	.word	0xe000ed0c
 800acf4:	20003b34 	.word	0x20003b34

0800acf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08a      	sub	sp, #40	; 0x28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad00:	2300      	movs	r3, #0
 800ad02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad04:	f7fe fd92 	bl	800982c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad08:	4b5b      	ldr	r3, [pc, #364]	; (800ae78 <pvPortMalloc+0x180>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad10:	f000 f920 	bl	800af54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad14:	4b59      	ldr	r3, [pc, #356]	; (800ae7c <pvPortMalloc+0x184>)
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f040 8093 	bne.w	800ae48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d01d      	beq.n	800ad64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad28:	2208      	movs	r2, #8
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d014      	beq.n	800ad64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f023 0307 	bic.w	r3, r3, #7
 800ad40:	3308      	adds	r3, #8
 800ad42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f003 0307 	and.w	r3, r3, #7
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <pvPortMalloc+0x6c>
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	617b      	str	r3, [r7, #20]
}
 800ad60:	bf00      	nop
 800ad62:	e7fe      	b.n	800ad62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d06e      	beq.n	800ae48 <pvPortMalloc+0x150>
 800ad6a:	4b45      	ldr	r3, [pc, #276]	; (800ae80 <pvPortMalloc+0x188>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d869      	bhi.n	800ae48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad74:	4b43      	ldr	r3, [pc, #268]	; (800ae84 <pvPortMalloc+0x18c>)
 800ad76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad78:	4b42      	ldr	r3, [pc, #264]	; (800ae84 <pvPortMalloc+0x18c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad7e:	e004      	b.n	800ad8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d903      	bls.n	800ad9c <pvPortMalloc+0xa4>
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1f1      	bne.n	800ad80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad9c:	4b36      	ldr	r3, [pc, #216]	; (800ae78 <pvPortMalloc+0x180>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d050      	beq.n	800ae48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2208      	movs	r2, #8
 800adac:	4413      	add	r3, r2
 800adae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	1ad2      	subs	r2, r2, r3
 800adc0:	2308      	movs	r3, #8
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d91f      	bls.n	800ae08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800adc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4413      	add	r3, r2
 800adce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	f003 0307 	and.w	r3, r3, #7
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <pvPortMalloc+0xf8>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	613b      	str	r3, [r7, #16]
}
 800adec:	bf00      	nop
 800adee:	e7fe      	b.n	800adee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	1ad2      	subs	r2, r2, r3
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae02:	69b8      	ldr	r0, [r7, #24]
 800ae04:	f000 f908 	bl	800b018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae08:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <pvPortMalloc+0x188>)
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	4a1b      	ldr	r2, [pc, #108]	; (800ae80 <pvPortMalloc+0x188>)
 800ae14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae16:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <pvPortMalloc+0x188>)
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	4b1b      	ldr	r3, [pc, #108]	; (800ae88 <pvPortMalloc+0x190>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d203      	bcs.n	800ae2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae22:	4b17      	ldr	r3, [pc, #92]	; (800ae80 <pvPortMalloc+0x188>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a18      	ldr	r2, [pc, #96]	; (800ae88 <pvPortMalloc+0x190>)
 800ae28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	4b13      	ldr	r3, [pc, #76]	; (800ae7c <pvPortMalloc+0x184>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	431a      	orrs	r2, r3
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ae3e:	4b13      	ldr	r3, [pc, #76]	; (800ae8c <pvPortMalloc+0x194>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3301      	adds	r3, #1
 800ae44:	4a11      	ldr	r2, [pc, #68]	; (800ae8c <pvPortMalloc+0x194>)
 800ae46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae48:	f7fe fcfe 	bl	8009848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	f003 0307 	and.w	r3, r3, #7
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00a      	beq.n	800ae6c <pvPortMalloc+0x174>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	60fb      	str	r3, [r7, #12]
}
 800ae68:	bf00      	nop
 800ae6a:	e7fe      	b.n	800ae6a <pvPortMalloc+0x172>
	return pvReturn;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3728      	adds	r7, #40	; 0x28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20007740 	.word	0x20007740
 800ae7c:	20007754 	.word	0x20007754
 800ae80:	20007744 	.word	0x20007744
 800ae84:	20007738 	.word	0x20007738
 800ae88:	20007748 	.word	0x20007748
 800ae8c:	2000774c 	.word	0x2000774c

0800ae90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d04d      	beq.n	800af3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aea2:	2308      	movs	r3, #8
 800aea4:	425b      	negs	r3, r3
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	4413      	add	r3, r2
 800aeaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	685a      	ldr	r2, [r3, #4]
 800aeb4:	4b24      	ldr	r3, [pc, #144]	; (800af48 <vPortFree+0xb8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4013      	ands	r3, r2
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10a      	bne.n	800aed4 <vPortFree+0x44>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	60fb      	str	r3, [r7, #12]
}
 800aed0:	bf00      	nop
 800aed2:	e7fe      	b.n	800aed2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00a      	beq.n	800aef2 <vPortFree+0x62>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	60bb      	str	r3, [r7, #8]
}
 800aeee:	bf00      	nop
 800aef0:	e7fe      	b.n	800aef0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	685a      	ldr	r2, [r3, #4]
 800aef6:	4b14      	ldr	r3, [pc, #80]	; (800af48 <vPortFree+0xb8>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4013      	ands	r3, r2
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d01e      	beq.n	800af3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d11a      	bne.n	800af3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <vPortFree+0xb8>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	43db      	mvns	r3, r3
 800af12:	401a      	ands	r2, r3
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af18:	f7fe fc88 	bl	800982c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <vPortFree+0xbc>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4413      	add	r3, r2
 800af26:	4a09      	ldr	r2, [pc, #36]	; (800af4c <vPortFree+0xbc>)
 800af28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af2a:	6938      	ldr	r0, [r7, #16]
 800af2c:	f000 f874 	bl	800b018 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af30:	4b07      	ldr	r3, [pc, #28]	; (800af50 <vPortFree+0xc0>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3301      	adds	r3, #1
 800af36:	4a06      	ldr	r2, [pc, #24]	; (800af50 <vPortFree+0xc0>)
 800af38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800af3a:	f7fe fc85 	bl	8009848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af3e:	bf00      	nop
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20007754 	.word	0x20007754
 800af4c:	20007744 	.word	0x20007744
 800af50:	20007750 	.word	0x20007750

0800af54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800af5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af60:	4b27      	ldr	r3, [pc, #156]	; (800b000 <prvHeapInit+0xac>)
 800af62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f003 0307 	and.w	r3, r3, #7
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00c      	beq.n	800af88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3307      	adds	r3, #7
 800af72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f023 0307 	bic.w	r3, r3, #7
 800af7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	4a1f      	ldr	r2, [pc, #124]	; (800b000 <prvHeapInit+0xac>)
 800af84:	4413      	add	r3, r2
 800af86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af8c:	4a1d      	ldr	r2, [pc, #116]	; (800b004 <prvHeapInit+0xb0>)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af92:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <prvHeapInit+0xb0>)
 800af94:	2200      	movs	r2, #0
 800af96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	4413      	add	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afa0:	2208      	movs	r2, #8
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	1a9b      	subs	r3, r3, r2
 800afa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f023 0307 	bic.w	r3, r3, #7
 800afae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4a15      	ldr	r2, [pc, #84]	; (800b008 <prvHeapInit+0xb4>)
 800afb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afb6:	4b14      	ldr	r3, [pc, #80]	; (800b008 <prvHeapInit+0xb4>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2200      	movs	r2, #0
 800afbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afbe:	4b12      	ldr	r3, [pc, #72]	; (800b008 <prvHeapInit+0xb4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2200      	movs	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	1ad2      	subs	r2, r2, r3
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800afd4:	4b0c      	ldr	r3, [pc, #48]	; (800b008 <prvHeapInit+0xb4>)
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	4a0a      	ldr	r2, [pc, #40]	; (800b00c <prvHeapInit+0xb8>)
 800afe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	4a09      	ldr	r2, [pc, #36]	; (800b010 <prvHeapInit+0xbc>)
 800afea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afec:	4b09      	ldr	r3, [pc, #36]	; (800b014 <prvHeapInit+0xc0>)
 800afee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aff2:	601a      	str	r2, [r3, #0]
}
 800aff4:	bf00      	nop
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	20003b38 	.word	0x20003b38
 800b004:	20007738 	.word	0x20007738
 800b008:	20007740 	.word	0x20007740
 800b00c:	20007748 	.word	0x20007748
 800b010:	20007744 	.word	0x20007744
 800b014:	20007754 	.word	0x20007754

0800b018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b020:	4b28      	ldr	r3, [pc, #160]	; (800b0c4 <prvInsertBlockIntoFreeList+0xac>)
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	e002      	b.n	800b02c <prvInsertBlockIntoFreeList+0x14>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	60fb      	str	r3, [r7, #12]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	429a      	cmp	r2, r3
 800b034:	d8f7      	bhi.n	800b026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	4413      	add	r3, r2
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	429a      	cmp	r2, r3
 800b046:	d108      	bne.n	800b05a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	441a      	add	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	441a      	add	r2, r3
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d118      	bne.n	800b0a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	4b15      	ldr	r3, [pc, #84]	; (800b0c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d00d      	beq.n	800b096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685a      	ldr	r2, [r3, #4]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	441a      	add	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	e008      	b.n	800b0a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b096:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	e003      	b.n	800b0a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d002      	beq.n	800b0b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0b6:	bf00      	nop
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	20007738 	.word	0x20007738
 800b0c8:	20007740 	.word	0x20007740

0800b0cc <__errno>:
 800b0cc:	4b01      	ldr	r3, [pc, #4]	; (800b0d4 <__errno+0x8>)
 800b0ce:	6818      	ldr	r0, [r3, #0]
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	20000014 	.word	0x20000014

0800b0d8 <__libc_init_array>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	4d0d      	ldr	r5, [pc, #52]	; (800b110 <__libc_init_array+0x38>)
 800b0dc:	4c0d      	ldr	r4, [pc, #52]	; (800b114 <__libc_init_array+0x3c>)
 800b0de:	1b64      	subs	r4, r4, r5
 800b0e0:	10a4      	asrs	r4, r4, #2
 800b0e2:	2600      	movs	r6, #0
 800b0e4:	42a6      	cmp	r6, r4
 800b0e6:	d109      	bne.n	800b0fc <__libc_init_array+0x24>
 800b0e8:	4d0b      	ldr	r5, [pc, #44]	; (800b118 <__libc_init_array+0x40>)
 800b0ea:	4c0c      	ldr	r4, [pc, #48]	; (800b11c <__libc_init_array+0x44>)
 800b0ec:	f000 fcf8 	bl	800bae0 <_init>
 800b0f0:	1b64      	subs	r4, r4, r5
 800b0f2:	10a4      	asrs	r4, r4, #2
 800b0f4:	2600      	movs	r6, #0
 800b0f6:	42a6      	cmp	r6, r4
 800b0f8:	d105      	bne.n	800b106 <__libc_init_array+0x2e>
 800b0fa:	bd70      	pop	{r4, r5, r6, pc}
 800b0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b100:	4798      	blx	r3
 800b102:	3601      	adds	r6, #1
 800b104:	e7ee      	b.n	800b0e4 <__libc_init_array+0xc>
 800b106:	f855 3b04 	ldr.w	r3, [r5], #4
 800b10a:	4798      	blx	r3
 800b10c:	3601      	adds	r6, #1
 800b10e:	e7f2      	b.n	800b0f6 <__libc_init_array+0x1e>
 800b110:	0800be18 	.word	0x0800be18
 800b114:	0800be18 	.word	0x0800be18
 800b118:	0800be18 	.word	0x0800be18
 800b11c:	0800be1c 	.word	0x0800be1c

0800b120 <__retarget_lock_acquire_recursive>:
 800b120:	4770      	bx	lr

0800b122 <__retarget_lock_release_recursive>:
 800b122:	4770      	bx	lr

0800b124 <memcpy>:
 800b124:	440a      	add	r2, r1
 800b126:	4291      	cmp	r1, r2
 800b128:	f100 33ff 	add.w	r3, r0, #4294967295
 800b12c:	d100      	bne.n	800b130 <memcpy+0xc>
 800b12e:	4770      	bx	lr
 800b130:	b510      	push	{r4, lr}
 800b132:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b13a:	4291      	cmp	r1, r2
 800b13c:	d1f9      	bne.n	800b132 <memcpy+0xe>
 800b13e:	bd10      	pop	{r4, pc}

0800b140 <memset>:
 800b140:	4402      	add	r2, r0
 800b142:	4603      	mov	r3, r0
 800b144:	4293      	cmp	r3, r2
 800b146:	d100      	bne.n	800b14a <memset+0xa>
 800b148:	4770      	bx	lr
 800b14a:	f803 1b01 	strb.w	r1, [r3], #1
 800b14e:	e7f9      	b.n	800b144 <memset+0x4>

0800b150 <sbrk_aligned>:
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	4e0e      	ldr	r6, [pc, #56]	; (800b18c <sbrk_aligned+0x3c>)
 800b154:	460c      	mov	r4, r1
 800b156:	6831      	ldr	r1, [r6, #0]
 800b158:	4605      	mov	r5, r0
 800b15a:	b911      	cbnz	r1, 800b162 <sbrk_aligned+0x12>
 800b15c:	f000 f8f6 	bl	800b34c <_sbrk_r>
 800b160:	6030      	str	r0, [r6, #0]
 800b162:	4621      	mov	r1, r4
 800b164:	4628      	mov	r0, r5
 800b166:	f000 f8f1 	bl	800b34c <_sbrk_r>
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	d00a      	beq.n	800b184 <sbrk_aligned+0x34>
 800b16e:	1cc4      	adds	r4, r0, #3
 800b170:	f024 0403 	bic.w	r4, r4, #3
 800b174:	42a0      	cmp	r0, r4
 800b176:	d007      	beq.n	800b188 <sbrk_aligned+0x38>
 800b178:	1a21      	subs	r1, r4, r0
 800b17a:	4628      	mov	r0, r5
 800b17c:	f000 f8e6 	bl	800b34c <_sbrk_r>
 800b180:	3001      	adds	r0, #1
 800b182:	d101      	bne.n	800b188 <sbrk_aligned+0x38>
 800b184:	f04f 34ff 	mov.w	r4, #4294967295
 800b188:	4620      	mov	r0, r4
 800b18a:	bd70      	pop	{r4, r5, r6, pc}
 800b18c:	20007760 	.word	0x20007760

0800b190 <_malloc_r>:
 800b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b194:	1ccd      	adds	r5, r1, #3
 800b196:	f025 0503 	bic.w	r5, r5, #3
 800b19a:	3508      	adds	r5, #8
 800b19c:	2d0c      	cmp	r5, #12
 800b19e:	bf38      	it	cc
 800b1a0:	250c      	movcc	r5, #12
 800b1a2:	2d00      	cmp	r5, #0
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	db01      	blt.n	800b1ac <_malloc_r+0x1c>
 800b1a8:	42a9      	cmp	r1, r5
 800b1aa:	d905      	bls.n	800b1b8 <_malloc_r+0x28>
 800b1ac:	230c      	movs	r3, #12
 800b1ae:	603b      	str	r3, [r7, #0]
 800b1b0:	2600      	movs	r6, #0
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b8:	4e2e      	ldr	r6, [pc, #184]	; (800b274 <_malloc_r+0xe4>)
 800b1ba:	f000 f8f7 	bl	800b3ac <__malloc_lock>
 800b1be:	6833      	ldr	r3, [r6, #0]
 800b1c0:	461c      	mov	r4, r3
 800b1c2:	bb34      	cbnz	r4, 800b212 <_malloc_r+0x82>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	f7ff ffc2 	bl	800b150 <sbrk_aligned>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	d14d      	bne.n	800b26e <_malloc_r+0xde>
 800b1d2:	6834      	ldr	r4, [r6, #0]
 800b1d4:	4626      	mov	r6, r4
 800b1d6:	2e00      	cmp	r6, #0
 800b1d8:	d140      	bne.n	800b25c <_malloc_r+0xcc>
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4638      	mov	r0, r7
 800b1e0:	eb04 0803 	add.w	r8, r4, r3
 800b1e4:	f000 f8b2 	bl	800b34c <_sbrk_r>
 800b1e8:	4580      	cmp	r8, r0
 800b1ea:	d13a      	bne.n	800b262 <_malloc_r+0xd2>
 800b1ec:	6821      	ldr	r1, [r4, #0]
 800b1ee:	3503      	adds	r5, #3
 800b1f0:	1a6d      	subs	r5, r5, r1
 800b1f2:	f025 0503 	bic.w	r5, r5, #3
 800b1f6:	3508      	adds	r5, #8
 800b1f8:	2d0c      	cmp	r5, #12
 800b1fa:	bf38      	it	cc
 800b1fc:	250c      	movcc	r5, #12
 800b1fe:	4629      	mov	r1, r5
 800b200:	4638      	mov	r0, r7
 800b202:	f7ff ffa5 	bl	800b150 <sbrk_aligned>
 800b206:	3001      	adds	r0, #1
 800b208:	d02b      	beq.n	800b262 <_malloc_r+0xd2>
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	442b      	add	r3, r5
 800b20e:	6023      	str	r3, [r4, #0]
 800b210:	e00e      	b.n	800b230 <_malloc_r+0xa0>
 800b212:	6822      	ldr	r2, [r4, #0]
 800b214:	1b52      	subs	r2, r2, r5
 800b216:	d41e      	bmi.n	800b256 <_malloc_r+0xc6>
 800b218:	2a0b      	cmp	r2, #11
 800b21a:	d916      	bls.n	800b24a <_malloc_r+0xba>
 800b21c:	1961      	adds	r1, r4, r5
 800b21e:	42a3      	cmp	r3, r4
 800b220:	6025      	str	r5, [r4, #0]
 800b222:	bf18      	it	ne
 800b224:	6059      	strne	r1, [r3, #4]
 800b226:	6863      	ldr	r3, [r4, #4]
 800b228:	bf08      	it	eq
 800b22a:	6031      	streq	r1, [r6, #0]
 800b22c:	5162      	str	r2, [r4, r5]
 800b22e:	604b      	str	r3, [r1, #4]
 800b230:	4638      	mov	r0, r7
 800b232:	f104 060b 	add.w	r6, r4, #11
 800b236:	f000 f8bf 	bl	800b3b8 <__malloc_unlock>
 800b23a:	f026 0607 	bic.w	r6, r6, #7
 800b23e:	1d23      	adds	r3, r4, #4
 800b240:	1af2      	subs	r2, r6, r3
 800b242:	d0b6      	beq.n	800b1b2 <_malloc_r+0x22>
 800b244:	1b9b      	subs	r3, r3, r6
 800b246:	50a3      	str	r3, [r4, r2]
 800b248:	e7b3      	b.n	800b1b2 <_malloc_r+0x22>
 800b24a:	6862      	ldr	r2, [r4, #4]
 800b24c:	42a3      	cmp	r3, r4
 800b24e:	bf0c      	ite	eq
 800b250:	6032      	streq	r2, [r6, #0]
 800b252:	605a      	strne	r2, [r3, #4]
 800b254:	e7ec      	b.n	800b230 <_malloc_r+0xa0>
 800b256:	4623      	mov	r3, r4
 800b258:	6864      	ldr	r4, [r4, #4]
 800b25a:	e7b2      	b.n	800b1c2 <_malloc_r+0x32>
 800b25c:	4634      	mov	r4, r6
 800b25e:	6876      	ldr	r6, [r6, #4]
 800b260:	e7b9      	b.n	800b1d6 <_malloc_r+0x46>
 800b262:	230c      	movs	r3, #12
 800b264:	603b      	str	r3, [r7, #0]
 800b266:	4638      	mov	r0, r7
 800b268:	f000 f8a6 	bl	800b3b8 <__malloc_unlock>
 800b26c:	e7a1      	b.n	800b1b2 <_malloc_r+0x22>
 800b26e:	6025      	str	r5, [r4, #0]
 800b270:	e7de      	b.n	800b230 <_malloc_r+0xa0>
 800b272:	bf00      	nop
 800b274:	2000775c 	.word	0x2000775c

0800b278 <cleanup_glue>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	460c      	mov	r4, r1
 800b27c:	6809      	ldr	r1, [r1, #0]
 800b27e:	4605      	mov	r5, r0
 800b280:	b109      	cbz	r1, 800b286 <cleanup_glue+0xe>
 800b282:	f7ff fff9 	bl	800b278 <cleanup_glue>
 800b286:	4621      	mov	r1, r4
 800b288:	4628      	mov	r0, r5
 800b28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b28e:	f000 b899 	b.w	800b3c4 <_free_r>
	...

0800b294 <_reclaim_reent>:
 800b294:	4b2c      	ldr	r3, [pc, #176]	; (800b348 <_reclaim_reent+0xb4>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4283      	cmp	r3, r0
 800b29a:	b570      	push	{r4, r5, r6, lr}
 800b29c:	4604      	mov	r4, r0
 800b29e:	d051      	beq.n	800b344 <_reclaim_reent+0xb0>
 800b2a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b2a2:	b143      	cbz	r3, 800b2b6 <_reclaim_reent+0x22>
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d14a      	bne.n	800b340 <_reclaim_reent+0xac>
 800b2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2ac:	6819      	ldr	r1, [r3, #0]
 800b2ae:	b111      	cbz	r1, 800b2b6 <_reclaim_reent+0x22>
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 f887 	bl	800b3c4 <_free_r>
 800b2b6:	6961      	ldr	r1, [r4, #20]
 800b2b8:	b111      	cbz	r1, 800b2c0 <_reclaim_reent+0x2c>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 f882 	bl	800b3c4 <_free_r>
 800b2c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2c2:	b111      	cbz	r1, 800b2ca <_reclaim_reent+0x36>
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f000 f87d 	bl	800b3c4 <_free_r>
 800b2ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b2cc:	b111      	cbz	r1, 800b2d4 <_reclaim_reent+0x40>
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f000 f878 	bl	800b3c4 <_free_r>
 800b2d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2d6:	b111      	cbz	r1, 800b2de <_reclaim_reent+0x4a>
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 f873 	bl	800b3c4 <_free_r>
 800b2de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2e0:	b111      	cbz	r1, 800b2e8 <_reclaim_reent+0x54>
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f000 f86e 	bl	800b3c4 <_free_r>
 800b2e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b2ea:	b111      	cbz	r1, 800b2f2 <_reclaim_reent+0x5e>
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 f869 	bl	800b3c4 <_free_r>
 800b2f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b2f4:	b111      	cbz	r1, 800b2fc <_reclaim_reent+0x68>
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 f864 	bl	800b3c4 <_free_r>
 800b2fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2fe:	b111      	cbz	r1, 800b306 <_reclaim_reent+0x72>
 800b300:	4620      	mov	r0, r4
 800b302:	f000 f85f 	bl	800b3c4 <_free_r>
 800b306:	69a3      	ldr	r3, [r4, #24]
 800b308:	b1e3      	cbz	r3, 800b344 <_reclaim_reent+0xb0>
 800b30a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b30c:	4620      	mov	r0, r4
 800b30e:	4798      	blx	r3
 800b310:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b312:	b1b9      	cbz	r1, 800b344 <_reclaim_reent+0xb0>
 800b314:	4620      	mov	r0, r4
 800b316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b31a:	f7ff bfad 	b.w	800b278 <cleanup_glue>
 800b31e:	5949      	ldr	r1, [r1, r5]
 800b320:	b941      	cbnz	r1, 800b334 <_reclaim_reent+0xa0>
 800b322:	3504      	adds	r5, #4
 800b324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b326:	2d80      	cmp	r5, #128	; 0x80
 800b328:	68d9      	ldr	r1, [r3, #12]
 800b32a:	d1f8      	bne.n	800b31e <_reclaim_reent+0x8a>
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 f849 	bl	800b3c4 <_free_r>
 800b332:	e7ba      	b.n	800b2aa <_reclaim_reent+0x16>
 800b334:	680e      	ldr	r6, [r1, #0]
 800b336:	4620      	mov	r0, r4
 800b338:	f000 f844 	bl	800b3c4 <_free_r>
 800b33c:	4631      	mov	r1, r6
 800b33e:	e7ef      	b.n	800b320 <_reclaim_reent+0x8c>
 800b340:	2500      	movs	r5, #0
 800b342:	e7ef      	b.n	800b324 <_reclaim_reent+0x90>
 800b344:	bd70      	pop	{r4, r5, r6, pc}
 800b346:	bf00      	nop
 800b348:	20000014 	.word	0x20000014

0800b34c <_sbrk_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4d06      	ldr	r5, [pc, #24]	; (800b368 <_sbrk_r+0x1c>)
 800b350:	2300      	movs	r3, #0
 800b352:	4604      	mov	r4, r0
 800b354:	4608      	mov	r0, r1
 800b356:	602b      	str	r3, [r5, #0]
 800b358:	f7f8 f994 	bl	8003684 <_sbrk>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_sbrk_r+0x1a>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_sbrk_r+0x1a>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20007764 	.word	0x20007764

0800b36c <siprintf>:
 800b36c:	b40e      	push	{r1, r2, r3}
 800b36e:	b500      	push	{lr}
 800b370:	b09c      	sub	sp, #112	; 0x70
 800b372:	ab1d      	add	r3, sp, #116	; 0x74
 800b374:	9002      	str	r0, [sp, #8]
 800b376:	9006      	str	r0, [sp, #24]
 800b378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b37c:	4809      	ldr	r0, [pc, #36]	; (800b3a4 <siprintf+0x38>)
 800b37e:	9107      	str	r1, [sp, #28]
 800b380:	9104      	str	r1, [sp, #16]
 800b382:	4909      	ldr	r1, [pc, #36]	; (800b3a8 <siprintf+0x3c>)
 800b384:	f853 2b04 	ldr.w	r2, [r3], #4
 800b388:	9105      	str	r1, [sp, #20]
 800b38a:	6800      	ldr	r0, [r0, #0]
 800b38c:	9301      	str	r3, [sp, #4]
 800b38e:	a902      	add	r1, sp, #8
 800b390:	f000 f8c0 	bl	800b514 <_svfiprintf_r>
 800b394:	9b02      	ldr	r3, [sp, #8]
 800b396:	2200      	movs	r2, #0
 800b398:	701a      	strb	r2, [r3, #0]
 800b39a:	b01c      	add	sp, #112	; 0x70
 800b39c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3a0:	b003      	add	sp, #12
 800b3a2:	4770      	bx	lr
 800b3a4:	20000014 	.word	0x20000014
 800b3a8:	ffff0208 	.word	0xffff0208

0800b3ac <__malloc_lock>:
 800b3ac:	4801      	ldr	r0, [pc, #4]	; (800b3b4 <__malloc_lock+0x8>)
 800b3ae:	f7ff beb7 	b.w	800b120 <__retarget_lock_acquire_recursive>
 800b3b2:	bf00      	nop
 800b3b4:	20007758 	.word	0x20007758

0800b3b8 <__malloc_unlock>:
 800b3b8:	4801      	ldr	r0, [pc, #4]	; (800b3c0 <__malloc_unlock+0x8>)
 800b3ba:	f7ff beb2 	b.w	800b122 <__retarget_lock_release_recursive>
 800b3be:	bf00      	nop
 800b3c0:	20007758 	.word	0x20007758

0800b3c4 <_free_r>:
 800b3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3c6:	2900      	cmp	r1, #0
 800b3c8:	d044      	beq.n	800b454 <_free_r+0x90>
 800b3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ce:	9001      	str	r0, [sp, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b3d6:	bfb8      	it	lt
 800b3d8:	18e4      	addlt	r4, r4, r3
 800b3da:	f7ff ffe7 	bl	800b3ac <__malloc_lock>
 800b3de:	4a1e      	ldr	r2, [pc, #120]	; (800b458 <_free_r+0x94>)
 800b3e0:	9801      	ldr	r0, [sp, #4]
 800b3e2:	6813      	ldr	r3, [r2, #0]
 800b3e4:	b933      	cbnz	r3, 800b3f4 <_free_r+0x30>
 800b3e6:	6063      	str	r3, [r4, #4]
 800b3e8:	6014      	str	r4, [r2, #0]
 800b3ea:	b003      	add	sp, #12
 800b3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3f0:	f7ff bfe2 	b.w	800b3b8 <__malloc_unlock>
 800b3f4:	42a3      	cmp	r3, r4
 800b3f6:	d908      	bls.n	800b40a <_free_r+0x46>
 800b3f8:	6825      	ldr	r5, [r4, #0]
 800b3fa:	1961      	adds	r1, r4, r5
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	bf01      	itttt	eq
 800b400:	6819      	ldreq	r1, [r3, #0]
 800b402:	685b      	ldreq	r3, [r3, #4]
 800b404:	1949      	addeq	r1, r1, r5
 800b406:	6021      	streq	r1, [r4, #0]
 800b408:	e7ed      	b.n	800b3e6 <_free_r+0x22>
 800b40a:	461a      	mov	r2, r3
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	b10b      	cbz	r3, 800b414 <_free_r+0x50>
 800b410:	42a3      	cmp	r3, r4
 800b412:	d9fa      	bls.n	800b40a <_free_r+0x46>
 800b414:	6811      	ldr	r1, [r2, #0]
 800b416:	1855      	adds	r5, r2, r1
 800b418:	42a5      	cmp	r5, r4
 800b41a:	d10b      	bne.n	800b434 <_free_r+0x70>
 800b41c:	6824      	ldr	r4, [r4, #0]
 800b41e:	4421      	add	r1, r4
 800b420:	1854      	adds	r4, r2, r1
 800b422:	42a3      	cmp	r3, r4
 800b424:	6011      	str	r1, [r2, #0]
 800b426:	d1e0      	bne.n	800b3ea <_free_r+0x26>
 800b428:	681c      	ldr	r4, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	6053      	str	r3, [r2, #4]
 800b42e:	4421      	add	r1, r4
 800b430:	6011      	str	r1, [r2, #0]
 800b432:	e7da      	b.n	800b3ea <_free_r+0x26>
 800b434:	d902      	bls.n	800b43c <_free_r+0x78>
 800b436:	230c      	movs	r3, #12
 800b438:	6003      	str	r3, [r0, #0]
 800b43a:	e7d6      	b.n	800b3ea <_free_r+0x26>
 800b43c:	6825      	ldr	r5, [r4, #0]
 800b43e:	1961      	adds	r1, r4, r5
 800b440:	428b      	cmp	r3, r1
 800b442:	bf04      	itt	eq
 800b444:	6819      	ldreq	r1, [r3, #0]
 800b446:	685b      	ldreq	r3, [r3, #4]
 800b448:	6063      	str	r3, [r4, #4]
 800b44a:	bf04      	itt	eq
 800b44c:	1949      	addeq	r1, r1, r5
 800b44e:	6021      	streq	r1, [r4, #0]
 800b450:	6054      	str	r4, [r2, #4]
 800b452:	e7ca      	b.n	800b3ea <_free_r+0x26>
 800b454:	b003      	add	sp, #12
 800b456:	bd30      	pop	{r4, r5, pc}
 800b458:	2000775c 	.word	0x2000775c

0800b45c <__ssputs_r>:
 800b45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b460:	688e      	ldr	r6, [r1, #8]
 800b462:	429e      	cmp	r6, r3
 800b464:	4682      	mov	sl, r0
 800b466:	460c      	mov	r4, r1
 800b468:	4690      	mov	r8, r2
 800b46a:	461f      	mov	r7, r3
 800b46c:	d838      	bhi.n	800b4e0 <__ssputs_r+0x84>
 800b46e:	898a      	ldrh	r2, [r1, #12]
 800b470:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b474:	d032      	beq.n	800b4dc <__ssputs_r+0x80>
 800b476:	6825      	ldr	r5, [r4, #0]
 800b478:	6909      	ldr	r1, [r1, #16]
 800b47a:	eba5 0901 	sub.w	r9, r5, r1
 800b47e:	6965      	ldr	r5, [r4, #20]
 800b480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b488:	3301      	adds	r3, #1
 800b48a:	444b      	add	r3, r9
 800b48c:	106d      	asrs	r5, r5, #1
 800b48e:	429d      	cmp	r5, r3
 800b490:	bf38      	it	cc
 800b492:	461d      	movcc	r5, r3
 800b494:	0553      	lsls	r3, r2, #21
 800b496:	d531      	bpl.n	800b4fc <__ssputs_r+0xa0>
 800b498:	4629      	mov	r1, r5
 800b49a:	f7ff fe79 	bl	800b190 <_malloc_r>
 800b49e:	4606      	mov	r6, r0
 800b4a0:	b950      	cbnz	r0, 800b4b8 <__ssputs_r+0x5c>
 800b4a2:	230c      	movs	r3, #12
 800b4a4:	f8ca 3000 	str.w	r3, [sl]
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ae:	81a3      	strh	r3, [r4, #12]
 800b4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b8:	6921      	ldr	r1, [r4, #16]
 800b4ba:	464a      	mov	r2, r9
 800b4bc:	f7ff fe32 	bl	800b124 <memcpy>
 800b4c0:	89a3      	ldrh	r3, [r4, #12]
 800b4c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ca:	81a3      	strh	r3, [r4, #12]
 800b4cc:	6126      	str	r6, [r4, #16]
 800b4ce:	6165      	str	r5, [r4, #20]
 800b4d0:	444e      	add	r6, r9
 800b4d2:	eba5 0509 	sub.w	r5, r5, r9
 800b4d6:	6026      	str	r6, [r4, #0]
 800b4d8:	60a5      	str	r5, [r4, #8]
 800b4da:	463e      	mov	r6, r7
 800b4dc:	42be      	cmp	r6, r7
 800b4de:	d900      	bls.n	800b4e2 <__ssputs_r+0x86>
 800b4e0:	463e      	mov	r6, r7
 800b4e2:	6820      	ldr	r0, [r4, #0]
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	4641      	mov	r1, r8
 800b4e8:	f000 faa8 	bl	800ba3c <memmove>
 800b4ec:	68a3      	ldr	r3, [r4, #8]
 800b4ee:	1b9b      	subs	r3, r3, r6
 800b4f0:	60a3      	str	r3, [r4, #8]
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	4433      	add	r3, r6
 800b4f6:	6023      	str	r3, [r4, #0]
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	e7db      	b.n	800b4b4 <__ssputs_r+0x58>
 800b4fc:	462a      	mov	r2, r5
 800b4fe:	f000 fab7 	bl	800ba70 <_realloc_r>
 800b502:	4606      	mov	r6, r0
 800b504:	2800      	cmp	r0, #0
 800b506:	d1e1      	bne.n	800b4cc <__ssputs_r+0x70>
 800b508:	6921      	ldr	r1, [r4, #16]
 800b50a:	4650      	mov	r0, sl
 800b50c:	f7ff ff5a 	bl	800b3c4 <_free_r>
 800b510:	e7c7      	b.n	800b4a2 <__ssputs_r+0x46>
	...

0800b514 <_svfiprintf_r>:
 800b514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b518:	4698      	mov	r8, r3
 800b51a:	898b      	ldrh	r3, [r1, #12]
 800b51c:	061b      	lsls	r3, r3, #24
 800b51e:	b09d      	sub	sp, #116	; 0x74
 800b520:	4607      	mov	r7, r0
 800b522:	460d      	mov	r5, r1
 800b524:	4614      	mov	r4, r2
 800b526:	d50e      	bpl.n	800b546 <_svfiprintf_r+0x32>
 800b528:	690b      	ldr	r3, [r1, #16]
 800b52a:	b963      	cbnz	r3, 800b546 <_svfiprintf_r+0x32>
 800b52c:	2140      	movs	r1, #64	; 0x40
 800b52e:	f7ff fe2f 	bl	800b190 <_malloc_r>
 800b532:	6028      	str	r0, [r5, #0]
 800b534:	6128      	str	r0, [r5, #16]
 800b536:	b920      	cbnz	r0, 800b542 <_svfiprintf_r+0x2e>
 800b538:	230c      	movs	r3, #12
 800b53a:	603b      	str	r3, [r7, #0]
 800b53c:	f04f 30ff 	mov.w	r0, #4294967295
 800b540:	e0d1      	b.n	800b6e6 <_svfiprintf_r+0x1d2>
 800b542:	2340      	movs	r3, #64	; 0x40
 800b544:	616b      	str	r3, [r5, #20]
 800b546:	2300      	movs	r3, #0
 800b548:	9309      	str	r3, [sp, #36]	; 0x24
 800b54a:	2320      	movs	r3, #32
 800b54c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b550:	f8cd 800c 	str.w	r8, [sp, #12]
 800b554:	2330      	movs	r3, #48	; 0x30
 800b556:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b700 <_svfiprintf_r+0x1ec>
 800b55a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b55e:	f04f 0901 	mov.w	r9, #1
 800b562:	4623      	mov	r3, r4
 800b564:	469a      	mov	sl, r3
 800b566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b56a:	b10a      	cbz	r2, 800b570 <_svfiprintf_r+0x5c>
 800b56c:	2a25      	cmp	r2, #37	; 0x25
 800b56e:	d1f9      	bne.n	800b564 <_svfiprintf_r+0x50>
 800b570:	ebba 0b04 	subs.w	fp, sl, r4
 800b574:	d00b      	beq.n	800b58e <_svfiprintf_r+0x7a>
 800b576:	465b      	mov	r3, fp
 800b578:	4622      	mov	r2, r4
 800b57a:	4629      	mov	r1, r5
 800b57c:	4638      	mov	r0, r7
 800b57e:	f7ff ff6d 	bl	800b45c <__ssputs_r>
 800b582:	3001      	adds	r0, #1
 800b584:	f000 80aa 	beq.w	800b6dc <_svfiprintf_r+0x1c8>
 800b588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b58a:	445a      	add	r2, fp
 800b58c:	9209      	str	r2, [sp, #36]	; 0x24
 800b58e:	f89a 3000 	ldrb.w	r3, [sl]
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 80a2 	beq.w	800b6dc <_svfiprintf_r+0x1c8>
 800b598:	2300      	movs	r3, #0
 800b59a:	f04f 32ff 	mov.w	r2, #4294967295
 800b59e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5a2:	f10a 0a01 	add.w	sl, sl, #1
 800b5a6:	9304      	str	r3, [sp, #16]
 800b5a8:	9307      	str	r3, [sp, #28]
 800b5aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b5b0:	4654      	mov	r4, sl
 800b5b2:	2205      	movs	r2, #5
 800b5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b8:	4851      	ldr	r0, [pc, #324]	; (800b700 <_svfiprintf_r+0x1ec>)
 800b5ba:	f7f4 fe19 	bl	80001f0 <memchr>
 800b5be:	9a04      	ldr	r2, [sp, #16]
 800b5c0:	b9d8      	cbnz	r0, 800b5fa <_svfiprintf_r+0xe6>
 800b5c2:	06d0      	lsls	r0, r2, #27
 800b5c4:	bf44      	itt	mi
 800b5c6:	2320      	movmi	r3, #32
 800b5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5cc:	0711      	lsls	r1, r2, #28
 800b5ce:	bf44      	itt	mi
 800b5d0:	232b      	movmi	r3, #43	; 0x2b
 800b5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5da:	2b2a      	cmp	r3, #42	; 0x2a
 800b5dc:	d015      	beq.n	800b60a <_svfiprintf_r+0xf6>
 800b5de:	9a07      	ldr	r2, [sp, #28]
 800b5e0:	4654      	mov	r4, sl
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	f04f 0c0a 	mov.w	ip, #10
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ee:	3b30      	subs	r3, #48	; 0x30
 800b5f0:	2b09      	cmp	r3, #9
 800b5f2:	d94e      	bls.n	800b692 <_svfiprintf_r+0x17e>
 800b5f4:	b1b0      	cbz	r0, 800b624 <_svfiprintf_r+0x110>
 800b5f6:	9207      	str	r2, [sp, #28]
 800b5f8:	e014      	b.n	800b624 <_svfiprintf_r+0x110>
 800b5fa:	eba0 0308 	sub.w	r3, r0, r8
 800b5fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b602:	4313      	orrs	r3, r2
 800b604:	9304      	str	r3, [sp, #16]
 800b606:	46a2      	mov	sl, r4
 800b608:	e7d2      	b.n	800b5b0 <_svfiprintf_r+0x9c>
 800b60a:	9b03      	ldr	r3, [sp, #12]
 800b60c:	1d19      	adds	r1, r3, #4
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	9103      	str	r1, [sp, #12]
 800b612:	2b00      	cmp	r3, #0
 800b614:	bfbb      	ittet	lt
 800b616:	425b      	neglt	r3, r3
 800b618:	f042 0202 	orrlt.w	r2, r2, #2
 800b61c:	9307      	strge	r3, [sp, #28]
 800b61e:	9307      	strlt	r3, [sp, #28]
 800b620:	bfb8      	it	lt
 800b622:	9204      	strlt	r2, [sp, #16]
 800b624:	7823      	ldrb	r3, [r4, #0]
 800b626:	2b2e      	cmp	r3, #46	; 0x2e
 800b628:	d10c      	bne.n	800b644 <_svfiprintf_r+0x130>
 800b62a:	7863      	ldrb	r3, [r4, #1]
 800b62c:	2b2a      	cmp	r3, #42	; 0x2a
 800b62e:	d135      	bne.n	800b69c <_svfiprintf_r+0x188>
 800b630:	9b03      	ldr	r3, [sp, #12]
 800b632:	1d1a      	adds	r2, r3, #4
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	9203      	str	r2, [sp, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	bfb8      	it	lt
 800b63c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b640:	3402      	adds	r4, #2
 800b642:	9305      	str	r3, [sp, #20]
 800b644:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b710 <_svfiprintf_r+0x1fc>
 800b648:	7821      	ldrb	r1, [r4, #0]
 800b64a:	2203      	movs	r2, #3
 800b64c:	4650      	mov	r0, sl
 800b64e:	f7f4 fdcf 	bl	80001f0 <memchr>
 800b652:	b140      	cbz	r0, 800b666 <_svfiprintf_r+0x152>
 800b654:	2340      	movs	r3, #64	; 0x40
 800b656:	eba0 000a 	sub.w	r0, r0, sl
 800b65a:	fa03 f000 	lsl.w	r0, r3, r0
 800b65e:	9b04      	ldr	r3, [sp, #16]
 800b660:	4303      	orrs	r3, r0
 800b662:	3401      	adds	r4, #1
 800b664:	9304      	str	r3, [sp, #16]
 800b666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b66a:	4826      	ldr	r0, [pc, #152]	; (800b704 <_svfiprintf_r+0x1f0>)
 800b66c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b670:	2206      	movs	r2, #6
 800b672:	f7f4 fdbd 	bl	80001f0 <memchr>
 800b676:	2800      	cmp	r0, #0
 800b678:	d038      	beq.n	800b6ec <_svfiprintf_r+0x1d8>
 800b67a:	4b23      	ldr	r3, [pc, #140]	; (800b708 <_svfiprintf_r+0x1f4>)
 800b67c:	bb1b      	cbnz	r3, 800b6c6 <_svfiprintf_r+0x1b2>
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	3307      	adds	r3, #7
 800b682:	f023 0307 	bic.w	r3, r3, #7
 800b686:	3308      	adds	r3, #8
 800b688:	9303      	str	r3, [sp, #12]
 800b68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b68c:	4433      	add	r3, r6
 800b68e:	9309      	str	r3, [sp, #36]	; 0x24
 800b690:	e767      	b.n	800b562 <_svfiprintf_r+0x4e>
 800b692:	fb0c 3202 	mla	r2, ip, r2, r3
 800b696:	460c      	mov	r4, r1
 800b698:	2001      	movs	r0, #1
 800b69a:	e7a5      	b.n	800b5e8 <_svfiprintf_r+0xd4>
 800b69c:	2300      	movs	r3, #0
 800b69e:	3401      	adds	r4, #1
 800b6a0:	9305      	str	r3, [sp, #20]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	f04f 0c0a 	mov.w	ip, #10
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ae:	3a30      	subs	r2, #48	; 0x30
 800b6b0:	2a09      	cmp	r2, #9
 800b6b2:	d903      	bls.n	800b6bc <_svfiprintf_r+0x1a8>
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d0c5      	beq.n	800b644 <_svfiprintf_r+0x130>
 800b6b8:	9105      	str	r1, [sp, #20]
 800b6ba:	e7c3      	b.n	800b644 <_svfiprintf_r+0x130>
 800b6bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e7f0      	b.n	800b6a8 <_svfiprintf_r+0x194>
 800b6c6:	ab03      	add	r3, sp, #12
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	462a      	mov	r2, r5
 800b6cc:	4b0f      	ldr	r3, [pc, #60]	; (800b70c <_svfiprintf_r+0x1f8>)
 800b6ce:	a904      	add	r1, sp, #16
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f3af 8000 	nop.w
 800b6d6:	1c42      	adds	r2, r0, #1
 800b6d8:	4606      	mov	r6, r0
 800b6da:	d1d6      	bne.n	800b68a <_svfiprintf_r+0x176>
 800b6dc:	89ab      	ldrh	r3, [r5, #12]
 800b6de:	065b      	lsls	r3, r3, #25
 800b6e0:	f53f af2c 	bmi.w	800b53c <_svfiprintf_r+0x28>
 800b6e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6e6:	b01d      	add	sp, #116	; 0x74
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	ab03      	add	r3, sp, #12
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	462a      	mov	r2, r5
 800b6f2:	4b06      	ldr	r3, [pc, #24]	; (800b70c <_svfiprintf_r+0x1f8>)
 800b6f4:	a904      	add	r1, sp, #16
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	f000 f87a 	bl	800b7f0 <_printf_i>
 800b6fc:	e7eb      	b.n	800b6d6 <_svfiprintf_r+0x1c2>
 800b6fe:	bf00      	nop
 800b700:	0800bddc 	.word	0x0800bddc
 800b704:	0800bde6 	.word	0x0800bde6
 800b708:	00000000 	.word	0x00000000
 800b70c:	0800b45d 	.word	0x0800b45d
 800b710:	0800bde2 	.word	0x0800bde2

0800b714 <_printf_common>:
 800b714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b718:	4616      	mov	r6, r2
 800b71a:	4699      	mov	r9, r3
 800b71c:	688a      	ldr	r2, [r1, #8]
 800b71e:	690b      	ldr	r3, [r1, #16]
 800b720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b724:	4293      	cmp	r3, r2
 800b726:	bfb8      	it	lt
 800b728:	4613      	movlt	r3, r2
 800b72a:	6033      	str	r3, [r6, #0]
 800b72c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b730:	4607      	mov	r7, r0
 800b732:	460c      	mov	r4, r1
 800b734:	b10a      	cbz	r2, 800b73a <_printf_common+0x26>
 800b736:	3301      	adds	r3, #1
 800b738:	6033      	str	r3, [r6, #0]
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	0699      	lsls	r1, r3, #26
 800b73e:	bf42      	ittt	mi
 800b740:	6833      	ldrmi	r3, [r6, #0]
 800b742:	3302      	addmi	r3, #2
 800b744:	6033      	strmi	r3, [r6, #0]
 800b746:	6825      	ldr	r5, [r4, #0]
 800b748:	f015 0506 	ands.w	r5, r5, #6
 800b74c:	d106      	bne.n	800b75c <_printf_common+0x48>
 800b74e:	f104 0a19 	add.w	sl, r4, #25
 800b752:	68e3      	ldr	r3, [r4, #12]
 800b754:	6832      	ldr	r2, [r6, #0]
 800b756:	1a9b      	subs	r3, r3, r2
 800b758:	42ab      	cmp	r3, r5
 800b75a:	dc26      	bgt.n	800b7aa <_printf_common+0x96>
 800b75c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b760:	1e13      	subs	r3, r2, #0
 800b762:	6822      	ldr	r2, [r4, #0]
 800b764:	bf18      	it	ne
 800b766:	2301      	movne	r3, #1
 800b768:	0692      	lsls	r2, r2, #26
 800b76a:	d42b      	bmi.n	800b7c4 <_printf_common+0xb0>
 800b76c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b770:	4649      	mov	r1, r9
 800b772:	4638      	mov	r0, r7
 800b774:	47c0      	blx	r8
 800b776:	3001      	adds	r0, #1
 800b778:	d01e      	beq.n	800b7b8 <_printf_common+0xa4>
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	68e5      	ldr	r5, [r4, #12]
 800b77e:	6832      	ldr	r2, [r6, #0]
 800b780:	f003 0306 	and.w	r3, r3, #6
 800b784:	2b04      	cmp	r3, #4
 800b786:	bf08      	it	eq
 800b788:	1aad      	subeq	r5, r5, r2
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	6922      	ldr	r2, [r4, #16]
 800b78e:	bf0c      	ite	eq
 800b790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b794:	2500      	movne	r5, #0
 800b796:	4293      	cmp	r3, r2
 800b798:	bfc4      	itt	gt
 800b79a:	1a9b      	subgt	r3, r3, r2
 800b79c:	18ed      	addgt	r5, r5, r3
 800b79e:	2600      	movs	r6, #0
 800b7a0:	341a      	adds	r4, #26
 800b7a2:	42b5      	cmp	r5, r6
 800b7a4:	d11a      	bne.n	800b7dc <_printf_common+0xc8>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	e008      	b.n	800b7bc <_printf_common+0xa8>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	4652      	mov	r2, sl
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	47c0      	blx	r8
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	d103      	bne.n	800b7c0 <_printf_common+0xac>
 800b7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	e7c6      	b.n	800b752 <_printf_common+0x3e>
 800b7c4:	18e1      	adds	r1, r4, r3
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	2030      	movs	r0, #48	; 0x30
 800b7ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7ce:	4422      	add	r2, r4
 800b7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7d8:	3302      	adds	r3, #2
 800b7da:	e7c7      	b.n	800b76c <_printf_common+0x58>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	4622      	mov	r2, r4
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	47c0      	blx	r8
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	d0e6      	beq.n	800b7b8 <_printf_common+0xa4>
 800b7ea:	3601      	adds	r6, #1
 800b7ec:	e7d9      	b.n	800b7a2 <_printf_common+0x8e>
	...

0800b7f0 <_printf_i>:
 800b7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f4:	7e0f      	ldrb	r7, [r1, #24]
 800b7f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7f8:	2f78      	cmp	r7, #120	; 0x78
 800b7fa:	4691      	mov	r9, r2
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	469a      	mov	sl, r3
 800b802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b806:	d807      	bhi.n	800b818 <_printf_i+0x28>
 800b808:	2f62      	cmp	r7, #98	; 0x62
 800b80a:	d80a      	bhi.n	800b822 <_printf_i+0x32>
 800b80c:	2f00      	cmp	r7, #0
 800b80e:	f000 80d8 	beq.w	800b9c2 <_printf_i+0x1d2>
 800b812:	2f58      	cmp	r7, #88	; 0x58
 800b814:	f000 80a3 	beq.w	800b95e <_printf_i+0x16e>
 800b818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b81c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b820:	e03a      	b.n	800b898 <_printf_i+0xa8>
 800b822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b826:	2b15      	cmp	r3, #21
 800b828:	d8f6      	bhi.n	800b818 <_printf_i+0x28>
 800b82a:	a101      	add	r1, pc, #4	; (adr r1, 800b830 <_printf_i+0x40>)
 800b82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b830:	0800b889 	.word	0x0800b889
 800b834:	0800b89d 	.word	0x0800b89d
 800b838:	0800b819 	.word	0x0800b819
 800b83c:	0800b819 	.word	0x0800b819
 800b840:	0800b819 	.word	0x0800b819
 800b844:	0800b819 	.word	0x0800b819
 800b848:	0800b89d 	.word	0x0800b89d
 800b84c:	0800b819 	.word	0x0800b819
 800b850:	0800b819 	.word	0x0800b819
 800b854:	0800b819 	.word	0x0800b819
 800b858:	0800b819 	.word	0x0800b819
 800b85c:	0800b9a9 	.word	0x0800b9a9
 800b860:	0800b8cd 	.word	0x0800b8cd
 800b864:	0800b98b 	.word	0x0800b98b
 800b868:	0800b819 	.word	0x0800b819
 800b86c:	0800b819 	.word	0x0800b819
 800b870:	0800b9cb 	.word	0x0800b9cb
 800b874:	0800b819 	.word	0x0800b819
 800b878:	0800b8cd 	.word	0x0800b8cd
 800b87c:	0800b819 	.word	0x0800b819
 800b880:	0800b819 	.word	0x0800b819
 800b884:	0800b993 	.word	0x0800b993
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	1d1a      	adds	r2, r3, #4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	602a      	str	r2, [r5, #0]
 800b890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b898:	2301      	movs	r3, #1
 800b89a:	e0a3      	b.n	800b9e4 <_printf_i+0x1f4>
 800b89c:	6820      	ldr	r0, [r4, #0]
 800b89e:	6829      	ldr	r1, [r5, #0]
 800b8a0:	0606      	lsls	r6, r0, #24
 800b8a2:	f101 0304 	add.w	r3, r1, #4
 800b8a6:	d50a      	bpl.n	800b8be <_printf_i+0xce>
 800b8a8:	680e      	ldr	r6, [r1, #0]
 800b8aa:	602b      	str	r3, [r5, #0]
 800b8ac:	2e00      	cmp	r6, #0
 800b8ae:	da03      	bge.n	800b8b8 <_printf_i+0xc8>
 800b8b0:	232d      	movs	r3, #45	; 0x2d
 800b8b2:	4276      	negs	r6, r6
 800b8b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8b8:	485e      	ldr	r0, [pc, #376]	; (800ba34 <_printf_i+0x244>)
 800b8ba:	230a      	movs	r3, #10
 800b8bc:	e019      	b.n	800b8f2 <_printf_i+0x102>
 800b8be:	680e      	ldr	r6, [r1, #0]
 800b8c0:	602b      	str	r3, [r5, #0]
 800b8c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8c6:	bf18      	it	ne
 800b8c8:	b236      	sxthne	r6, r6
 800b8ca:	e7ef      	b.n	800b8ac <_printf_i+0xbc>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	1d19      	adds	r1, r3, #4
 800b8d2:	6029      	str	r1, [r5, #0]
 800b8d4:	0601      	lsls	r1, r0, #24
 800b8d6:	d501      	bpl.n	800b8dc <_printf_i+0xec>
 800b8d8:	681e      	ldr	r6, [r3, #0]
 800b8da:	e002      	b.n	800b8e2 <_printf_i+0xf2>
 800b8dc:	0646      	lsls	r6, r0, #25
 800b8de:	d5fb      	bpl.n	800b8d8 <_printf_i+0xe8>
 800b8e0:	881e      	ldrh	r6, [r3, #0]
 800b8e2:	4854      	ldr	r0, [pc, #336]	; (800ba34 <_printf_i+0x244>)
 800b8e4:	2f6f      	cmp	r7, #111	; 0x6f
 800b8e6:	bf0c      	ite	eq
 800b8e8:	2308      	moveq	r3, #8
 800b8ea:	230a      	movne	r3, #10
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8f2:	6865      	ldr	r5, [r4, #4]
 800b8f4:	60a5      	str	r5, [r4, #8]
 800b8f6:	2d00      	cmp	r5, #0
 800b8f8:	bfa2      	ittt	ge
 800b8fa:	6821      	ldrge	r1, [r4, #0]
 800b8fc:	f021 0104 	bicge.w	r1, r1, #4
 800b900:	6021      	strge	r1, [r4, #0]
 800b902:	b90e      	cbnz	r6, 800b908 <_printf_i+0x118>
 800b904:	2d00      	cmp	r5, #0
 800b906:	d04d      	beq.n	800b9a4 <_printf_i+0x1b4>
 800b908:	4615      	mov	r5, r2
 800b90a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b90e:	fb03 6711 	mls	r7, r3, r1, r6
 800b912:	5dc7      	ldrb	r7, [r0, r7]
 800b914:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b918:	4637      	mov	r7, r6
 800b91a:	42bb      	cmp	r3, r7
 800b91c:	460e      	mov	r6, r1
 800b91e:	d9f4      	bls.n	800b90a <_printf_i+0x11a>
 800b920:	2b08      	cmp	r3, #8
 800b922:	d10b      	bne.n	800b93c <_printf_i+0x14c>
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	07de      	lsls	r6, r3, #31
 800b928:	d508      	bpl.n	800b93c <_printf_i+0x14c>
 800b92a:	6923      	ldr	r3, [r4, #16]
 800b92c:	6861      	ldr	r1, [r4, #4]
 800b92e:	4299      	cmp	r1, r3
 800b930:	bfde      	ittt	le
 800b932:	2330      	movle	r3, #48	; 0x30
 800b934:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b938:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b93c:	1b52      	subs	r2, r2, r5
 800b93e:	6122      	str	r2, [r4, #16]
 800b940:	f8cd a000 	str.w	sl, [sp]
 800b944:	464b      	mov	r3, r9
 800b946:	aa03      	add	r2, sp, #12
 800b948:	4621      	mov	r1, r4
 800b94a:	4640      	mov	r0, r8
 800b94c:	f7ff fee2 	bl	800b714 <_printf_common>
 800b950:	3001      	adds	r0, #1
 800b952:	d14c      	bne.n	800b9ee <_printf_i+0x1fe>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	b004      	add	sp, #16
 800b95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b95e:	4835      	ldr	r0, [pc, #212]	; (800ba34 <_printf_i+0x244>)
 800b960:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b964:	6829      	ldr	r1, [r5, #0]
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	f851 6b04 	ldr.w	r6, [r1], #4
 800b96c:	6029      	str	r1, [r5, #0]
 800b96e:	061d      	lsls	r5, r3, #24
 800b970:	d514      	bpl.n	800b99c <_printf_i+0x1ac>
 800b972:	07df      	lsls	r7, r3, #31
 800b974:	bf44      	itt	mi
 800b976:	f043 0320 	orrmi.w	r3, r3, #32
 800b97a:	6023      	strmi	r3, [r4, #0]
 800b97c:	b91e      	cbnz	r6, 800b986 <_printf_i+0x196>
 800b97e:	6823      	ldr	r3, [r4, #0]
 800b980:	f023 0320 	bic.w	r3, r3, #32
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	2310      	movs	r3, #16
 800b988:	e7b0      	b.n	800b8ec <_printf_i+0xfc>
 800b98a:	6823      	ldr	r3, [r4, #0]
 800b98c:	f043 0320 	orr.w	r3, r3, #32
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	2378      	movs	r3, #120	; 0x78
 800b994:	4828      	ldr	r0, [pc, #160]	; (800ba38 <_printf_i+0x248>)
 800b996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b99a:	e7e3      	b.n	800b964 <_printf_i+0x174>
 800b99c:	0659      	lsls	r1, r3, #25
 800b99e:	bf48      	it	mi
 800b9a0:	b2b6      	uxthmi	r6, r6
 800b9a2:	e7e6      	b.n	800b972 <_printf_i+0x182>
 800b9a4:	4615      	mov	r5, r2
 800b9a6:	e7bb      	b.n	800b920 <_printf_i+0x130>
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	6826      	ldr	r6, [r4, #0]
 800b9ac:	6961      	ldr	r1, [r4, #20]
 800b9ae:	1d18      	adds	r0, r3, #4
 800b9b0:	6028      	str	r0, [r5, #0]
 800b9b2:	0635      	lsls	r5, r6, #24
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	d501      	bpl.n	800b9bc <_printf_i+0x1cc>
 800b9b8:	6019      	str	r1, [r3, #0]
 800b9ba:	e002      	b.n	800b9c2 <_printf_i+0x1d2>
 800b9bc:	0670      	lsls	r0, r6, #25
 800b9be:	d5fb      	bpl.n	800b9b8 <_printf_i+0x1c8>
 800b9c0:	8019      	strh	r1, [r3, #0]
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	6123      	str	r3, [r4, #16]
 800b9c6:	4615      	mov	r5, r2
 800b9c8:	e7ba      	b.n	800b940 <_printf_i+0x150>
 800b9ca:	682b      	ldr	r3, [r5, #0]
 800b9cc:	1d1a      	adds	r2, r3, #4
 800b9ce:	602a      	str	r2, [r5, #0]
 800b9d0:	681d      	ldr	r5, [r3, #0]
 800b9d2:	6862      	ldr	r2, [r4, #4]
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f7f4 fc0a 	bl	80001f0 <memchr>
 800b9dc:	b108      	cbz	r0, 800b9e2 <_printf_i+0x1f2>
 800b9de:	1b40      	subs	r0, r0, r5
 800b9e0:	6060      	str	r0, [r4, #4]
 800b9e2:	6863      	ldr	r3, [r4, #4]
 800b9e4:	6123      	str	r3, [r4, #16]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9ec:	e7a8      	b.n	800b940 <_printf_i+0x150>
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	462a      	mov	r2, r5
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	47d0      	blx	sl
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	d0ab      	beq.n	800b954 <_printf_i+0x164>
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	079b      	lsls	r3, r3, #30
 800ba00:	d413      	bmi.n	800ba2a <_printf_i+0x23a>
 800ba02:	68e0      	ldr	r0, [r4, #12]
 800ba04:	9b03      	ldr	r3, [sp, #12]
 800ba06:	4298      	cmp	r0, r3
 800ba08:	bfb8      	it	lt
 800ba0a:	4618      	movlt	r0, r3
 800ba0c:	e7a4      	b.n	800b958 <_printf_i+0x168>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	4632      	mov	r2, r6
 800ba12:	4649      	mov	r1, r9
 800ba14:	4640      	mov	r0, r8
 800ba16:	47d0      	blx	sl
 800ba18:	3001      	adds	r0, #1
 800ba1a:	d09b      	beq.n	800b954 <_printf_i+0x164>
 800ba1c:	3501      	adds	r5, #1
 800ba1e:	68e3      	ldr	r3, [r4, #12]
 800ba20:	9903      	ldr	r1, [sp, #12]
 800ba22:	1a5b      	subs	r3, r3, r1
 800ba24:	42ab      	cmp	r3, r5
 800ba26:	dcf2      	bgt.n	800ba0e <_printf_i+0x21e>
 800ba28:	e7eb      	b.n	800ba02 <_printf_i+0x212>
 800ba2a:	2500      	movs	r5, #0
 800ba2c:	f104 0619 	add.w	r6, r4, #25
 800ba30:	e7f5      	b.n	800ba1e <_printf_i+0x22e>
 800ba32:	bf00      	nop
 800ba34:	0800bded 	.word	0x0800bded
 800ba38:	0800bdfe 	.word	0x0800bdfe

0800ba3c <memmove>:
 800ba3c:	4288      	cmp	r0, r1
 800ba3e:	b510      	push	{r4, lr}
 800ba40:	eb01 0402 	add.w	r4, r1, r2
 800ba44:	d902      	bls.n	800ba4c <memmove+0x10>
 800ba46:	4284      	cmp	r4, r0
 800ba48:	4623      	mov	r3, r4
 800ba4a:	d807      	bhi.n	800ba5c <memmove+0x20>
 800ba4c:	1e43      	subs	r3, r0, #1
 800ba4e:	42a1      	cmp	r1, r4
 800ba50:	d008      	beq.n	800ba64 <memmove+0x28>
 800ba52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba5a:	e7f8      	b.n	800ba4e <memmove+0x12>
 800ba5c:	4402      	add	r2, r0
 800ba5e:	4601      	mov	r1, r0
 800ba60:	428a      	cmp	r2, r1
 800ba62:	d100      	bne.n	800ba66 <memmove+0x2a>
 800ba64:	bd10      	pop	{r4, pc}
 800ba66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba6e:	e7f7      	b.n	800ba60 <memmove+0x24>

0800ba70 <_realloc_r>:
 800ba70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba74:	4680      	mov	r8, r0
 800ba76:	4614      	mov	r4, r2
 800ba78:	460e      	mov	r6, r1
 800ba7a:	b921      	cbnz	r1, 800ba86 <_realloc_r+0x16>
 800ba7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba80:	4611      	mov	r1, r2
 800ba82:	f7ff bb85 	b.w	800b190 <_malloc_r>
 800ba86:	b92a      	cbnz	r2, 800ba94 <_realloc_r+0x24>
 800ba88:	f7ff fc9c 	bl	800b3c4 <_free_r>
 800ba8c:	4625      	mov	r5, r4
 800ba8e:	4628      	mov	r0, r5
 800ba90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba94:	f000 f81b 	bl	800bace <_malloc_usable_size_r>
 800ba98:	4284      	cmp	r4, r0
 800ba9a:	4607      	mov	r7, r0
 800ba9c:	d802      	bhi.n	800baa4 <_realloc_r+0x34>
 800ba9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800baa2:	d812      	bhi.n	800baca <_realloc_r+0x5a>
 800baa4:	4621      	mov	r1, r4
 800baa6:	4640      	mov	r0, r8
 800baa8:	f7ff fb72 	bl	800b190 <_malloc_r>
 800baac:	4605      	mov	r5, r0
 800baae:	2800      	cmp	r0, #0
 800bab0:	d0ed      	beq.n	800ba8e <_realloc_r+0x1e>
 800bab2:	42bc      	cmp	r4, r7
 800bab4:	4622      	mov	r2, r4
 800bab6:	4631      	mov	r1, r6
 800bab8:	bf28      	it	cs
 800baba:	463a      	movcs	r2, r7
 800babc:	f7ff fb32 	bl	800b124 <memcpy>
 800bac0:	4631      	mov	r1, r6
 800bac2:	4640      	mov	r0, r8
 800bac4:	f7ff fc7e 	bl	800b3c4 <_free_r>
 800bac8:	e7e1      	b.n	800ba8e <_realloc_r+0x1e>
 800baca:	4635      	mov	r5, r6
 800bacc:	e7df      	b.n	800ba8e <_realloc_r+0x1e>

0800bace <_malloc_usable_size_r>:
 800bace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bad2:	1f18      	subs	r0, r3, #4
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	bfbc      	itt	lt
 800bad8:	580b      	ldrlt	r3, [r1, r0]
 800bada:	18c0      	addlt	r0, r0, r3
 800badc:	4770      	bx	lr
	...

0800bae0 <_init>:
 800bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae2:	bf00      	nop
 800bae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae6:	bc08      	pop	{r3}
 800bae8:	469e      	mov	lr, r3
 800baea:	4770      	bx	lr

0800baec <_fini>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	bf00      	nop
 800baf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf2:	bc08      	pop	{r3}
 800baf4:	469e      	mov	lr, r3
 800baf6:	4770      	bx	lr
